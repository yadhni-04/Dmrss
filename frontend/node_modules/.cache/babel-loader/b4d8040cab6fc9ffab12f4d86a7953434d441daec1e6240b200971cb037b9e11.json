{"ast":null,"code":"/**\n *  A **Password-Based Key-Derivation Function** is designed to create\n *  a sequence of bytes suitible as a **key** from a human-rememberable\n *  password.\n *\n *  @_subsection: api/crypto:Passwords  [about-pbkdf]\n */\nimport { pbkdf2Sync } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _pbkdf2 = function (password, salt, iterations, keylen, algo) {\n  return pbkdf2Sync(password, salt, iterations, keylen, algo);\n};\nlet __pbkdf2 = _pbkdf2;\n/**\n *  Return the [[link-pbkdf2]] for %%keylen%% bytes for %%password%% using\n *  the %%salt%% and using %%iterations%% of %%algo%%.\n *\n *  This PBKDF is outdated and should not be used in new projects, but is\n *  required to decrypt older files.\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the PBKDF2\n *    pbkdf2(passwordBytes, salt, 1024, 16, \"sha256\")\n *    //_result:\n */\nexport function pbkdf2(_password, _salt, iterations, keylen, algo) {\n  const password = getBytes(_password, \"password\");\n  const salt = getBytes(_salt, \"salt\");\n  return hexlify(__pbkdf2(password, salt, iterations, keylen, algo));\n}\npbkdf2._ = _pbkdf2;\npbkdf2.lock = function () {\n  locked = true;\n};\npbkdf2.register = function (func) {\n  if (locked) {\n    throw new Error(\"pbkdf2 is locked\");\n  }\n  __pbkdf2 = func;\n};\nObject.freeze(pbkdf2);","map":{"version":3,"names":["pbkdf2Sync","getBytes","hexlify","locked","_pbkdf2","password","salt","iterations","keylen","algo","__pbkdf2","pbkdf2","_password","_salt","_","lock","register","func","Error","Object","freeze"],"sources":["/Users/yadhnikharkar/Desktop/dmrs-mvp/frontend/node_modules/ethers/lib.esm/crypto/pbkdf2.js"],"sourcesContent":["/**\n *  A **Password-Based Key-Derivation Function** is designed to create\n *  a sequence of bytes suitible as a **key** from a human-rememberable\n *  password.\n *\n *  @_subsection: api/crypto:Passwords  [about-pbkdf]\n */\nimport { pbkdf2Sync } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _pbkdf2 = function (password, salt, iterations, keylen, algo) {\n    return pbkdf2Sync(password, salt, iterations, keylen, algo);\n};\nlet __pbkdf2 = _pbkdf2;\n/**\n *  Return the [[link-pbkdf2]] for %%keylen%% bytes for %%password%% using\n *  the %%salt%% and using %%iterations%% of %%algo%%.\n *\n *  This PBKDF is outdated and should not be used in new projects, but is\n *  required to decrypt older files.\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the PBKDF2\n *    pbkdf2(passwordBytes, salt, 1024, 16, \"sha256\")\n *    //_result:\n */\nexport function pbkdf2(_password, _salt, iterations, keylen, algo) {\n    const password = getBytes(_password, \"password\");\n    const salt = getBytes(_salt, \"salt\");\n    return hexlify(__pbkdf2(password, salt, iterations, keylen, algo));\n}\npbkdf2._ = _pbkdf2;\npbkdf2.lock = function () { locked = true; };\npbkdf2.register = function (func) {\n    if (locked) {\n        throw new Error(\"pbkdf2 is locked\");\n    }\n    __pbkdf2 = func;\n};\nObject.freeze(pbkdf2);\n//# sourceMappingURL=pbkdf2.js.map"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAU,QAAQ,aAAa;AACxC,SAASC,QAAQ,EAAEC,OAAO,QAAQ,mBAAmB;AACrD,IAAIC,MAAM,GAAG,KAAK;AAClB,MAAMC,OAAO,GAAG,SAAAA,CAAUC,QAAQ,EAAEC,IAAI,EAAEC,UAAU,EAAEC,MAAM,EAAEC,IAAI,EAAE;EAChE,OAAOT,UAAU,CAACK,QAAQ,EAAEC,IAAI,EAAEC,UAAU,EAAEC,MAAM,EAAEC,IAAI,CAAC;AAC/D,CAAC;AACD,IAAIC,QAAQ,GAAGN,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,MAAMA,CAACC,SAAS,EAAEC,KAAK,EAAEN,UAAU,EAAEC,MAAM,EAAEC,IAAI,EAAE;EAC/D,MAAMJ,QAAQ,GAAGJ,QAAQ,CAACW,SAAS,EAAE,UAAU,CAAC;EAChD,MAAMN,IAAI,GAAGL,QAAQ,CAACY,KAAK,EAAE,MAAM,CAAC;EACpC,OAAOX,OAAO,CAACQ,QAAQ,CAACL,QAAQ,EAAEC,IAAI,EAAEC,UAAU,EAAEC,MAAM,EAAEC,IAAI,CAAC,CAAC;AACtE;AACAE,MAAM,CAACG,CAAC,GAAGV,OAAO;AAClBO,MAAM,CAACI,IAAI,GAAG,YAAY;EAAEZ,MAAM,GAAG,IAAI;AAAE,CAAC;AAC5CQ,MAAM,CAACK,QAAQ,GAAG,UAAUC,IAAI,EAAE;EAC9B,IAAId,MAAM,EAAE;IACR,MAAM,IAAIe,KAAK,CAAC,kBAAkB,CAAC;EACvC;EACAR,QAAQ,GAAGO,IAAI;AACnB,CAAC;AACDE,MAAM,CAACC,MAAM,CAACT,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}