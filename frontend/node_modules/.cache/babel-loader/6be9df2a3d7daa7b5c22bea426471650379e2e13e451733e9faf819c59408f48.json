{"ast":null,"code":"/**\n *  [[link-alchemy]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\n *  - Base (``base``)\n *  - Base Goerlia Testnet (``base-goerli``)\n *  - Base Sepolia Testnet (``base-sepolia``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\n *  - Polygon (``matic``)\n *  - Polygon Amoy Testnet (``matic-amoy``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\n */\nimport { defineProperties, resolveProperties, assert, assertArgument, FetchRequest } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"eth-mainnet.alchemyapi.io\";\n    case \"goerli\":\n      return \"eth-goerli.g.alchemy.com\";\n    case \"sepolia\":\n      return \"eth-sepolia.g.alchemy.com\";\n    case \"arbitrum\":\n      return \"arb-mainnet.g.alchemy.com\";\n    case \"arbitrum-goerli\":\n      return \"arb-goerli.g.alchemy.com\";\n    case \"arbitrum-sepolia\":\n      return \"arb-sepolia.g.alchemy.com\";\n    case \"base\":\n      return \"base-mainnet.g.alchemy.com\";\n    case \"base-goerli\":\n      return \"base-goerli.g.alchemy.com\";\n    case \"base-sepolia\":\n      return \"base-sepolia.g.alchemy.com\";\n    case \"matic\":\n      return \"polygon-mainnet.g.alchemy.com\";\n    case \"matic-amoy\":\n      return \"polygon-amoy.g.alchemy.com\";\n    case \"matic-mumbai\":\n      return \"polygon-mumbai.g.alchemy.com\";\n    case \"optimism\":\n      return \"opt-mainnet.g.alchemy.com\";\n    case \"optimism-goerli\":\n      return \"opt-goerli.g.alchemy.com\";\n    case \"optimism-sepolia\":\n      return \"opt-sepolia.g.alchemy.com\";\n  }\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-alchemy-signup).\n *\n *  @_docloc: api/providers/thirdparty\n */\nexport class AlchemyProvider extends JsonRpcProvider {\n  apiKey;\n  constructor(_network, apiKey) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = Network.from(_network);\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    const request = AlchemyProvider.getRequest(network, apiKey);\n    super(request, network, {\n      staticNetwork: network\n    });\n    defineProperties(this, {\n      apiKey\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new AlchemyProvider(chainId, this.apiKey);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  async _perform(req) {\n    // https://docs.alchemy.com/reference/trace-transaction\n    if (req.method === \"getTransactionResult\") {\n      const {\n        trace,\n        tx\n      } = await resolveProperties({\n        trace: this.send(\"trace_transaction\", [req.hash]),\n        tx: this.getTransaction(req.hash)\n      });\n      if (trace == null || tx == null) {\n        return null;\n      }\n      let data;\n      let error = false;\n      try {\n        data = trace[0].result.output;\n        error = trace[0].error === \"Reverted\";\n      } catch (error) {}\n      if (data) {\n        assert(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\n          action: \"getTransactionResult\",\n          data,\n          reason: null,\n          transaction: tx,\n          invocation: null,\n          revert: null // @TODO\n        });\n        return data;\n      }\n      assert(false, \"could not parse trace result\", \"BAD_DATA\", {\n        value: trace\n      });\n    }\n    return await super._perform(req);\n  }\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n  static getRequest(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    const request = new FetchRequest(`https:/\\/${getHost(network.name)}/v2/${apiKey}`);\n    request.allowGzip = true;\n    if (apiKey === defaultApiKey) {\n      request.retryFunc = async (request, response, attempt) => {\n        showThrottleMessage(\"alchemy\");\n        return true;\n      };\n    }\n    return request;\n  }\n}","map":{"version":3,"names":["defineProperties","resolveProperties","assert","assertArgument","FetchRequest","showThrottleMessage","Network","JsonRpcProvider","defaultApiKey","getHost","name","AlchemyProvider","apiKey","constructor","_network","network","from","request","getRequest","staticNetwork","_getProvider","chainId","error","_perform","req","method","trace","tx","send","hash","getTransaction","data","result","output","action","reason","transaction","invocation","revert","value","isCommunityResource","allowGzip","retryFunc","response","attempt"],"sources":["/Users/yadhnikharkar/Desktop/dmrs-mvp/frontend/node_modules/ethers/lib.esm/providers/provider-alchemy.js"],"sourcesContent":["/**\n *  [[link-alchemy]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\n *  - Base (``base``)\n *  - Base Goerlia Testnet (``base-goerli``)\n *  - Base Sepolia Testnet (``base-sepolia``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\n *  - Polygon (``matic``)\n *  - Polygon Amoy Testnet (``matic-amoy``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\n */\nimport { defineProperties, resolveProperties, assert, assertArgument, FetchRequest } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nfunction getHost(name) {\n    switch (name) {\n        case \"mainnet\":\n            return \"eth-mainnet.alchemyapi.io\";\n        case \"goerli\":\n            return \"eth-goerli.g.alchemy.com\";\n        case \"sepolia\":\n            return \"eth-sepolia.g.alchemy.com\";\n        case \"arbitrum\":\n            return \"arb-mainnet.g.alchemy.com\";\n        case \"arbitrum-goerli\":\n            return \"arb-goerli.g.alchemy.com\";\n        case \"arbitrum-sepolia\":\n            return \"arb-sepolia.g.alchemy.com\";\n        case \"base\":\n            return \"base-mainnet.g.alchemy.com\";\n        case \"base-goerli\":\n            return \"base-goerli.g.alchemy.com\";\n        case \"base-sepolia\":\n            return \"base-sepolia.g.alchemy.com\";\n        case \"matic\":\n            return \"polygon-mainnet.g.alchemy.com\";\n        case \"matic-amoy\":\n            return \"polygon-amoy.g.alchemy.com\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai.g.alchemy.com\";\n        case \"optimism\":\n            return \"opt-mainnet.g.alchemy.com\";\n        case \"optimism-goerli\":\n            return \"opt-goerli.g.alchemy.com\";\n        case \"optimism-sepolia\":\n            return \"opt-sepolia.g.alchemy.com\";\n    }\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-alchemy-signup).\n *\n *  @_docloc: api/providers/thirdparty\n */\nexport class AlchemyProvider extends JsonRpcProvider {\n    apiKey;\n    constructor(_network, apiKey) {\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = Network.from(_network);\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const request = AlchemyProvider.getRequest(network, apiKey);\n        super(request, network, { staticNetwork: network });\n        defineProperties(this, { apiKey });\n    }\n    _getProvider(chainId) {\n        try {\n            return new AlchemyProvider(chainId, this.apiKey);\n        }\n        catch (error) { }\n        return super._getProvider(chainId);\n    }\n    async _perform(req) {\n        // https://docs.alchemy.com/reference/trace-transaction\n        if (req.method === \"getTransactionResult\") {\n            const { trace, tx } = await resolveProperties({\n                trace: this.send(\"trace_transaction\", [req.hash]),\n                tx: this.getTransaction(req.hash)\n            });\n            if (trace == null || tx == null) {\n                return null;\n            }\n            let data;\n            let error = false;\n            try {\n                data = trace[0].result.output;\n                error = (trace[0].error === \"Reverted\");\n            }\n            catch (error) { }\n            if (data) {\n                assert(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\n                    action: \"getTransactionResult\",\n                    data,\n                    reason: null,\n                    transaction: tx,\n                    invocation: null,\n                    revert: null // @TODO\n                });\n                return data;\n            }\n            assert(false, \"could not parse trace result\", \"BAD_DATA\", { value: trace });\n        }\n        return await super._perform(req);\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n    static getRequest(network, apiKey) {\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const request = new FetchRequest(`https:/\\/${getHost(network.name)}/v2/${apiKey}`);\n        request.allowGzip = true;\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"alchemy\");\n                return true;\n            };\n        }\n        return request;\n    }\n}\n//# sourceMappingURL=provider-alchemy.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}