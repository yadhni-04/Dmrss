{"ast":null,"code":"// Use the encode-latin.js script to create the necessary\n// data files to be consumed by this class\nimport { id } from \"../hash/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\nimport { decodeOwl } from \"./decode-owl.js\";\nimport { Wordlist } from \"./wordlist.js\";\n/**\n *  An OWL format Wordlist is an encoding method that exploits\n *  the general locality of alphabetically sorted words to\n *  achieve a simple but effective means of compression.\n *\n *  This class is generally not useful to most developers as\n *  it is used mainly internally to keep Wordlists for languages\n *  based on ASCII-7 small.\n *\n *  If necessary, there are tools within the ``generation/`` folder\n *  to create the necessary data.\n */\nexport class WordlistOwl extends Wordlist {\n  #data;\n  #checksum;\n  /**\n   *  Creates a new Wordlist for %%locale%% using the OWL %%data%%\n   *  and validated against the %%checksum%%.\n   */\n  constructor(locale, data, checksum) {\n    super(locale);\n    this.#data = data;\n    this.#checksum = checksum;\n    this.#words = null;\n  }\n  /**\n   *  The OWL-encoded data.\n   */\n  get _data() {\n    return this.#data;\n  }\n  /**\n   *  Decode all the words for the wordlist.\n   */\n  _decodeWords() {\n    return decodeOwl(this.#data);\n  }\n  #words;\n  #loadWords() {\n    if (this.#words == null) {\n      const words = this._decodeWords();\n      // Verify the computed list matches the official list\n      const checksum = id(words.join(\"\\n\") + \"\\n\");\n      /* c8 ignore start */\n      if (checksum !== this.#checksum) {\n        throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);\n      }\n      /* c8 ignore stop */\n      this.#words = words;\n    }\n    return this.#words;\n  }\n  getWord(index) {\n    const words = this.#loadWords();\n    assertArgument(index >= 0 && index < words.length, `invalid word index: ${index}`, \"index\", index);\n    return words[index];\n  }\n  getWordIndex(word) {\n    return this.#loadWords().indexOf(word);\n  }\n}","map":{"version":3,"names":["id","assertArgument","decodeOwl","Wordlist","WordlistOwl","data","checksum","constructor","locale","words","_data","_decodeWords","loadWords","#loadWords","join","Error","getWord","index","length","getWordIndex","word","indexOf"],"sources":["/Users/yadhnikharkar/Desktop/dmrs-mvp/frontend/node_modules/ethers/lib.esm/wordlists/wordlist-owl.js"],"sourcesContent":["// Use the encode-latin.js script to create the necessary\n// data files to be consumed by this class\nimport { id } from \"../hash/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\nimport { decodeOwl } from \"./decode-owl.js\";\nimport { Wordlist } from \"./wordlist.js\";\n/**\n *  An OWL format Wordlist is an encoding method that exploits\n *  the general locality of alphabetically sorted words to\n *  achieve a simple but effective means of compression.\n *\n *  This class is generally not useful to most developers as\n *  it is used mainly internally to keep Wordlists for languages\n *  based on ASCII-7 small.\n *\n *  If necessary, there are tools within the ``generation/`` folder\n *  to create the necessary data.\n */\nexport class WordlistOwl extends Wordlist {\n    #data;\n    #checksum;\n    /**\n     *  Creates a new Wordlist for %%locale%% using the OWL %%data%%\n     *  and validated against the %%checksum%%.\n     */\n    constructor(locale, data, checksum) {\n        super(locale);\n        this.#data = data;\n        this.#checksum = checksum;\n        this.#words = null;\n    }\n    /**\n     *  The OWL-encoded data.\n     */\n    get _data() { return this.#data; }\n    /**\n     *  Decode all the words for the wordlist.\n     */\n    _decodeWords() {\n        return decodeOwl(this.#data);\n    }\n    #words;\n    #loadWords() {\n        if (this.#words == null) {\n            const words = this._decodeWords();\n            // Verify the computed list matches the official list\n            const checksum = id(words.join(\"\\n\") + \"\\n\");\n            /* c8 ignore start */\n            if (checksum !== this.#checksum) {\n                throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);\n            }\n            /* c8 ignore stop */\n            this.#words = words;\n        }\n        return this.#words;\n    }\n    getWord(index) {\n        const words = this.#loadWords();\n        assertArgument(index >= 0 && index < words.length, `invalid word index: ${index}`, \"index\", index);\n        return words[index];\n    }\n    getWordIndex(word) {\n        return this.#loadWords().indexOf(word);\n    }\n}\n//# sourceMappingURL=wordlist-owl.js.map"],"mappings":"AAAA;AACA;AACA,SAASA,EAAE,QAAQ,kBAAkB;AACrC,SAASC,cAAc,QAAQ,mBAAmB;AAClD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,QAAQ,QAAQ,eAAe;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,SAASD,QAAQ,CAAC;EACtC,CAACE,IAAI;EACL,CAACC,QAAQ;EACT;AACJ;AACA;AACA;EACIC,WAAWA,CAACC,MAAM,EAAEH,IAAI,EAAEC,QAAQ,EAAE;IAChC,KAAK,CAACE,MAAM,CAAC;IACb,IAAI,CAAC,CAACH,IAAI,GAAGA,IAAI;IACjB,IAAI,CAAC,CAACC,QAAQ,GAAGA,QAAQ;IACzB,IAAI,CAAC,CAACG,KAAK,GAAG,IAAI;EACtB;EACA;AACJ;AACA;EACI,IAAIC,KAAKA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAC,CAACL,IAAI;EAAE;EACjC;AACJ;AACA;EACIM,YAAYA,CAAA,EAAG;IACX,OAAOT,SAAS,CAAC,IAAI,CAAC,CAACG,IAAI,CAAC;EAChC;EACA,CAACI,KAAK;EACN,CAACG,SAASC,CAAA,EAAG;IACT,IAAI,IAAI,CAAC,CAACJ,KAAK,IAAI,IAAI,EAAE;MACrB,MAAMA,KAAK,GAAG,IAAI,CAACE,YAAY,CAAC,CAAC;MACjC;MACA,MAAML,QAAQ,GAAGN,EAAE,CAACS,KAAK,CAACK,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;MAC5C;MACA,IAAIR,QAAQ,KAAK,IAAI,CAAC,CAACA,QAAQ,EAAE;QAC7B,MAAM,IAAIS,KAAK,CAAC,sBAAsB,IAAI,CAACP,MAAM,SAAS,CAAC;MAC/D;MACA;MACA,IAAI,CAAC,CAACC,KAAK,GAAGA,KAAK;IACvB;IACA,OAAO,IAAI,CAAC,CAACA,KAAK;EACtB;EACAO,OAAOA,CAACC,KAAK,EAAE;IACX,MAAMR,KAAK,GAAG,IAAI,CAAC,CAACG,SAAS,CAAC,CAAC;IAC/BX,cAAc,CAACgB,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAGR,KAAK,CAACS,MAAM,EAAE,uBAAuBD,KAAK,EAAE,EAAE,OAAO,EAAEA,KAAK,CAAC;IAClG,OAAOR,KAAK,CAACQ,KAAK,CAAC;EACvB;EACAE,YAAYA,CAACC,IAAI,EAAE;IACf,OAAO,IAAI,CAAC,CAACR,SAAS,CAAC,CAAC,CAACS,OAAO,CAACD,IAAI,CAAC;EAC1C;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}