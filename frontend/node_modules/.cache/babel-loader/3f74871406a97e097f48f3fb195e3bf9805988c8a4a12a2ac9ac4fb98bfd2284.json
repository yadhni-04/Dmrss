{"ast":null,"code":"import { defineProperties } from \"../utils/properties.js\";\nimport { assertArgument } from \"../utils/index.js\";\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n/**\n *  A **NetworkPlugin** provides additional functionality on a [[Network]].\n */\nexport class NetworkPlugin {\n  /**\n   *  The name of the plugin.\n   *\n   *  It is recommended to use reverse-domain-notation, which permits\n   *  unique names with a known authority as well as hierarchal entries.\n   */\n  name;\n  /**\n   *  Creates a new **NetworkPlugin**.\n   */\n  constructor(name) {\n    defineProperties(this, {\n      name\n    });\n  }\n  /**\n   *  Creates a copy of this plugin.\n   */\n  clone() {\n    return new NetworkPlugin(this.name);\n  }\n}\n/**\n *  A **GasCostPlugin** allows a network to provide alternative values when\n *  computing the intrinsic gas required for a transaction.\n */\nexport class GasCostPlugin extends NetworkPlugin {\n  /**\n   *  The block number to treat these values as valid from.\n   *\n   *  This allows a hardfork to have updated values included as well as\n   *  mulutiple hardforks to be supported.\n   */\n  effectiveBlock;\n  /**\n   *  The transactions base fee.\n   */\n  txBase;\n  /**\n   *  The fee for creating a new account.\n   */\n  txCreate;\n  /**\n   *  The fee per zero-byte in the data.\n   */\n  txDataZero;\n  /**\n   *  The fee per non-zero-byte in the data.\n   */\n  txDataNonzero;\n  /**\n   *  The fee per storage key in the [[link-eip-2930]] access list.\n   */\n  txAccessListStorageKey;\n  /**\n   *  The fee per address in the [[link-eip-2930]] access list.\n   */\n  txAccessListAddress;\n  /**\n   *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\n   *  latest block or another GasCostPlugin supercedes that block number,\n   *  with the associated %%costs%%.\n   */\n  constructor(effectiveBlock, costs) {\n    if (effectiveBlock == null) {\n      effectiveBlock = 0;\n    }\n    super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);\n    const props = {\n      effectiveBlock\n    };\n    function set(name, nullish) {\n      let value = (costs || {})[name];\n      if (value == null) {\n        value = nullish;\n      }\n      assertArgument(typeof value === \"number\", `invalud value for ${name}`, \"costs\", costs);\n      props[name] = value;\n    }\n    set(\"txBase\", 21000);\n    set(\"txCreate\", 32000);\n    set(\"txDataZero\", 4);\n    set(\"txDataNonzero\", 16);\n    set(\"txAccessListStorageKey\", 1900);\n    set(\"txAccessListAddress\", 2400);\n    defineProperties(this, props);\n  }\n  clone() {\n    return new GasCostPlugin(this.effectiveBlock, this);\n  }\n}\n/**\n *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry\n *  Contract address and the target network to use when using that\n *  contract.\n *\n *  Various testnets have their own instance of the contract to use, but\n *  in general, the mainnet instance supports multi-chain addresses and\n *  should be used.\n */\nexport class EnsPlugin extends NetworkPlugin {\n  /**\n   *  The ENS Registrty Contract address.\n   */\n  address;\n  /**\n   *  The chain ID that the ENS contract lives on.\n   */\n  targetNetwork;\n  /**\n   *  Creates a new **EnsPlugin** connected to %%address%% on the\n   *  %%targetNetwork%%. The default ENS address and mainnet is used\n   *  if unspecified.\n   */\n  constructor(address, targetNetwork) {\n    super(\"org.ethers.plugins.network.Ens\");\n    defineProperties(this, {\n      address: address || EnsAddress,\n      targetNetwork: targetNetwork == null ? 1 : targetNetwork\n    });\n  }\n  clone() {\n    return new EnsPlugin(this.address, this.targetNetwork);\n  }\n}\n/**\n *  A **FeeDataNetworkPlugin** allows a network to provide and alternate\n *  means to specify its fee data.\n *\n *  For example, a network which does not support [[link-eip-1559]] may\n *  choose to use a Gas Station site to approximate the gas price.\n */\nexport class FeeDataNetworkPlugin extends NetworkPlugin {\n  #feeDataFunc;\n  /**\n   *  The fee data function provided to the constructor.\n   */\n  get feeDataFunc() {\n    return this.#feeDataFunc;\n  }\n  /**\n   *  Creates a new **FeeDataNetworkPlugin**.\n   */\n  constructor(feeDataFunc) {\n    super(\"org.ethers.plugins.network.FeeData\");\n    this.#feeDataFunc = feeDataFunc;\n  }\n  /**\n   *  Resolves to the fee data.\n   */\n  async getFeeData(provider) {\n    return await this.#feeDataFunc(provider);\n  }\n  clone() {\n    return new FeeDataNetworkPlugin(this.#feeDataFunc);\n  }\n}\nexport class FetchUrlFeeDataNetworkPlugin extends NetworkPlugin {\n  #url;\n  #processFunc;\n  /**\n   *  The URL to initialize the FetchRequest with in %%processFunc%%.\n   */\n  get url() {\n    return this.#url;\n  }\n  /**\n   *  The callback to use when computing the FeeData.\n   */\n  get processFunc() {\n    return this.#processFunc;\n  }\n  /**\n   *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will\n   *  be used when computing the fee data for the network.\n   */\n  constructor(url, processFunc) {\n    super(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\n    this.#url = url;\n    this.#processFunc = processFunc;\n  }\n  // We are immutable, so we can serve as our own clone\n  clone() {\n    return this;\n  }\n}\n/*\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\n\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\n        super(\"org.ethers.network-plugins.custom-block\");\n        this.#blockFunc = blockFunc;\n        this.#blockWithTxsFunc = blockWithTxsFunc;\n    }\n\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\n        return await this.#blockFunc(provider, block);\n    }\n\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\n        return await this.#blockWithTxsFunc(provider, block);\n    }\n\n    clone(): CustomBlockNetworkPlugin {\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\n    }\n}\n*/","map":{"version":3,"names":["defineProperties","assertArgument","EnsAddress","NetworkPlugin","name","constructor","clone","GasCostPlugin","effectiveBlock","txBase","txCreate","txDataZero","txDataNonzero","txAccessListStorageKey","txAccessListAddress","costs","props","set","nullish","value","EnsPlugin","address","targetNetwork","FeeDataNetworkPlugin","feeDataFunc","getFeeData","provider","FetchUrlFeeDataNetworkPlugin","url","processFunc"],"sources":["/Users/yadhnikharkar/Desktop/dmrs-mvp/frontend/node_modules/ethers/lib.esm/providers/plugins-network.js"],"sourcesContent":["import { defineProperties } from \"../utils/properties.js\";\nimport { assertArgument } from \"../utils/index.js\";\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n/**\n *  A **NetworkPlugin** provides additional functionality on a [[Network]].\n */\nexport class NetworkPlugin {\n    /**\n     *  The name of the plugin.\n     *\n     *  It is recommended to use reverse-domain-notation, which permits\n     *  unique names with a known authority as well as hierarchal entries.\n     */\n    name;\n    /**\n     *  Creates a new **NetworkPlugin**.\n     */\n    constructor(name) {\n        defineProperties(this, { name });\n    }\n    /**\n     *  Creates a copy of this plugin.\n     */\n    clone() {\n        return new NetworkPlugin(this.name);\n    }\n}\n/**\n *  A **GasCostPlugin** allows a network to provide alternative values when\n *  computing the intrinsic gas required for a transaction.\n */\nexport class GasCostPlugin extends NetworkPlugin {\n    /**\n     *  The block number to treat these values as valid from.\n     *\n     *  This allows a hardfork to have updated values included as well as\n     *  mulutiple hardforks to be supported.\n     */\n    effectiveBlock;\n    /**\n     *  The transactions base fee.\n     */\n    txBase;\n    /**\n     *  The fee for creating a new account.\n     */\n    txCreate;\n    /**\n     *  The fee per zero-byte in the data.\n     */\n    txDataZero;\n    /**\n     *  The fee per non-zero-byte in the data.\n     */\n    txDataNonzero;\n    /**\n     *  The fee per storage key in the [[link-eip-2930]] access list.\n     */\n    txAccessListStorageKey;\n    /**\n     *  The fee per address in the [[link-eip-2930]] access list.\n     */\n    txAccessListAddress;\n    /**\n     *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\n     *  latest block or another GasCostPlugin supercedes that block number,\n     *  with the associated %%costs%%.\n     */\n    constructor(effectiveBlock, costs) {\n        if (effectiveBlock == null) {\n            effectiveBlock = 0;\n        }\n        super(`org.ethers.network.plugins.GasCost#${(effectiveBlock || 0)}`);\n        const props = { effectiveBlock };\n        function set(name, nullish) {\n            let value = (costs || {})[name];\n            if (value == null) {\n                value = nullish;\n            }\n            assertArgument(typeof (value) === \"number\", `invalud value for ${name}`, \"costs\", costs);\n            props[name] = value;\n        }\n        set(\"txBase\", 21000);\n        set(\"txCreate\", 32000);\n        set(\"txDataZero\", 4);\n        set(\"txDataNonzero\", 16);\n        set(\"txAccessListStorageKey\", 1900);\n        set(\"txAccessListAddress\", 2400);\n        defineProperties(this, props);\n    }\n    clone() {\n        return new GasCostPlugin(this.effectiveBlock, this);\n    }\n}\n/**\n *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry\n *  Contract address and the target network to use when using that\n *  contract.\n *\n *  Various testnets have their own instance of the contract to use, but\n *  in general, the mainnet instance supports multi-chain addresses and\n *  should be used.\n */\nexport class EnsPlugin extends NetworkPlugin {\n    /**\n     *  The ENS Registrty Contract address.\n     */\n    address;\n    /**\n     *  The chain ID that the ENS contract lives on.\n     */\n    targetNetwork;\n    /**\n     *  Creates a new **EnsPlugin** connected to %%address%% on the\n     *  %%targetNetwork%%. The default ENS address and mainnet is used\n     *  if unspecified.\n     */\n    constructor(address, targetNetwork) {\n        super(\"org.ethers.plugins.network.Ens\");\n        defineProperties(this, {\n            address: (address || EnsAddress),\n            targetNetwork: ((targetNetwork == null) ? 1 : targetNetwork)\n        });\n    }\n    clone() {\n        return new EnsPlugin(this.address, this.targetNetwork);\n    }\n}\n/**\n *  A **FeeDataNetworkPlugin** allows a network to provide and alternate\n *  means to specify its fee data.\n *\n *  For example, a network which does not support [[link-eip-1559]] may\n *  choose to use a Gas Station site to approximate the gas price.\n */\nexport class FeeDataNetworkPlugin extends NetworkPlugin {\n    #feeDataFunc;\n    /**\n     *  The fee data function provided to the constructor.\n     */\n    get feeDataFunc() {\n        return this.#feeDataFunc;\n    }\n    /**\n     *  Creates a new **FeeDataNetworkPlugin**.\n     */\n    constructor(feeDataFunc) {\n        super(\"org.ethers.plugins.network.FeeData\");\n        this.#feeDataFunc = feeDataFunc;\n    }\n    /**\n     *  Resolves to the fee data.\n     */\n    async getFeeData(provider) {\n        return await this.#feeDataFunc(provider);\n    }\n    clone() {\n        return new FeeDataNetworkPlugin(this.#feeDataFunc);\n    }\n}\nexport class FetchUrlFeeDataNetworkPlugin extends NetworkPlugin {\n    #url;\n    #processFunc;\n    /**\n     *  The URL to initialize the FetchRequest with in %%processFunc%%.\n     */\n    get url() { return this.#url; }\n    /**\n     *  The callback to use when computing the FeeData.\n     */\n    get processFunc() { return this.#processFunc; }\n    /**\n     *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will\n     *  be used when computing the fee data for the network.\n     */\n    constructor(url, processFunc) {\n        super(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\n        this.#url = url;\n        this.#processFunc = processFunc;\n    }\n    // We are immutable, so we can serve as our own clone\n    clone() { return this; }\n}\n/*\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\n\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\n        super(\"org.ethers.network-plugins.custom-block\");\n        this.#blockFunc = blockFunc;\n        this.#blockWithTxsFunc = blockWithTxsFunc;\n    }\n\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\n        return await this.#blockFunc(provider, block);\n    }\n\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\n        return await this.#blockWithTxsFunc(provider, block);\n    }\n\n    clone(): CustomBlockNetworkPlugin {\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\n    }\n}\n*/\n//# sourceMappingURL=plugins-network.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}