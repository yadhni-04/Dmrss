{"ast":null,"code":"/**\n *  Fetching content from the web is environment-specific, so Ethers\n *  provides an abstraction that each environment can implement to provide\n *  this service.\n *\n *  On [Node.js](link-node), the ``http`` and ``https`` libs are used to\n *  create a request object, register event listeners and process data\n *  and populate the [[FetchResponse]].\n *\n *  In a browser, the [DOM fetch](link-js-fetch) is used, and the resulting\n *  ``Promise`` is waited on to retrieve the payload.\n *\n *  The [[FetchRequest]] is responsible for handling many common situations,\n *  such as redirects, server throttling, authentication, etc.\n *\n *  It also handles common gateways, such as IPFS and data URIs.\n *\n *  @_section api/utils/fetching:Fetching Web Content  [about-fetch]\n */\nimport { decodeBase64, encodeBase64 } from \"./base64.js\";\nimport { hexlify } from \"./data.js\";\nimport { assert, assertArgument } from \"./errors.js\";\nimport { defineProperties } from \"./properties.js\";\nimport { toUtf8Bytes, toUtf8String } from \"./utf8.js\";\nimport { createGetUrl } from \"./geturl.js\";\nconst MAX_ATTEMPTS = 12;\nconst SLOT_INTERVAL = 250;\n// The global FetchGetUrlFunc implementation.\nlet defaultGetUrlFunc = createGetUrl();\nconst reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\nconst reIpfs = new RegExp(\"^ipfs:/\\/(ipfs/)?(.*)$\", \"i\");\n// If locked, new Gateways cannot be added\nlet locked = false;\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\nasync function dataGatewayFunc(url, signal) {\n  try {\n    const match = url.match(reData);\n    if (!match) {\n      throw new Error(\"invalid data\");\n    }\n    return new FetchResponse(200, \"OK\", {\n      \"content-type\": match[1] || \"text/plain\"\n    }, match[2] ? decodeBase64(match[3]) : unpercent(match[3]));\n  } catch (error) {\n    return new FetchResponse(599, \"BAD REQUEST (invalid data: URI)\", {}, null, new FetchRequest(url));\n  }\n}\n/**\n *  Returns a [[FetchGatewayFunc]] for fetching content from a standard\n *  IPFS gateway hosted at %%baseUrl%%.\n */\nfunction getIpfsGatewayFunc(baseUrl) {\n  async function gatewayIpfs(url, signal) {\n    try {\n      const match = url.match(reIpfs);\n      if (!match) {\n        throw new Error(\"invalid link\");\n      }\n      return new FetchRequest(`${baseUrl}${match[2]}`);\n    } catch (error) {\n      return new FetchResponse(599, \"BAD REQUEST (invalid IPFS URI)\", {}, null, new FetchRequest(url));\n    }\n  }\n  return gatewayIpfs;\n}\nconst Gateways = {\n  \"data\": dataGatewayFunc,\n  \"ipfs\": getIpfsGatewayFunc(\"https:/\\/gateway.ipfs.io/ipfs/\")\n};\nconst fetchSignals = new WeakMap();\n/**\n *  @_ignore\n */\nexport class FetchCancelSignal {\n  #listeners;\n  #cancelled;\n  constructor(request) {\n    this.#listeners = [];\n    this.#cancelled = false;\n    fetchSignals.set(request, () => {\n      if (this.#cancelled) {\n        return;\n      }\n      this.#cancelled = true;\n      for (const listener of this.#listeners) {\n        setTimeout(() => {\n          listener();\n        }, 0);\n      }\n      this.#listeners = [];\n    });\n  }\n  addListener(listener) {\n    assert(!this.#cancelled, \"singal already cancelled\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fetchCancelSignal.addCancelListener\"\n    });\n    this.#listeners.push(listener);\n  }\n  get cancelled() {\n    return this.#cancelled;\n  }\n  checkSignal() {\n    assert(!this.cancelled, \"cancelled\", \"CANCELLED\", {});\n  }\n}\n// Check the signal, throwing if it is cancelled\nfunction checkSignal(signal) {\n  if (signal == null) {\n    throw new Error(\"missing signal; should not happen\");\n  }\n  signal.checkSignal();\n  return signal;\n}\n/**\n *  Represents a request for a resource using a URI.\n *\n *  By default, the supported schemes are ``HTTP``, ``HTTPS``, ``data:``,\n *  and ``IPFS:``.\n *\n *  Additional schemes can be added globally using [[registerGateway]].\n *\n *  @example:\n *    req = new FetchRequest(\"https://www.ricmoo.com\")\n *    resp = await req.send()\n *    resp.body.length\n *    //_result:\n */\nexport class FetchRequest {\n  #allowInsecure;\n  #gzip;\n  #headers;\n  #method;\n  #timeout;\n  #url;\n  #body;\n  #bodyType;\n  #creds;\n  // Hooks\n  #preflight;\n  #process;\n  #retry;\n  #signal;\n  #throttle;\n  #getUrlFunc;\n  /**\n   *  The fetch URL to request.\n   */\n  get url() {\n    return this.#url;\n  }\n  set url(url) {\n    this.#url = String(url);\n  }\n  /**\n   *  The fetch body, if any, to send as the request body. //(default: null)//\n   *\n   *  When setting a body, the intrinsic ``Content-Type`` is automatically\n   *  set and will be used if **not overridden** by setting a custom\n   *  header.\n   *\n   *  If %%body%% is null, the body is cleared (along with the\n   *  intrinsic ``Content-Type``).\n   *\n   *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to\n   *  ``text/plain``.\n   *\n   *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to\n   *  ``application/octet-stream``.\n   *\n   *  If %%body%% is any other object, the intrinsic ``Content-Type`` is\n   *  set to ``application/json``.\n   */\n  get body() {\n    if (this.#body == null) {\n      return null;\n    }\n    return new Uint8Array(this.#body);\n  }\n  set body(body) {\n    if (body == null) {\n      this.#body = undefined;\n      this.#bodyType = undefined;\n    } else if (typeof body === \"string\") {\n      this.#body = toUtf8Bytes(body);\n      this.#bodyType = \"text/plain\";\n    } else if (body instanceof Uint8Array) {\n      this.#body = body;\n      this.#bodyType = \"application/octet-stream\";\n    } else if (typeof body === \"object\") {\n      this.#body = toUtf8Bytes(JSON.stringify(body));\n      this.#bodyType = \"application/json\";\n    } else {\n      throw new Error(\"invalid body\");\n    }\n  }\n  /**\n   *  Returns true if the request has a body.\n   */\n  hasBody() {\n    return this.#body != null;\n  }\n  /**\n   *  The HTTP method to use when requesting the URI. If no method\n   *  has been explicitly set, then ``GET`` is used if the body is\n   *  null and ``POST`` otherwise.\n   */\n  get method() {\n    if (this.#method) {\n      return this.#method;\n    }\n    if (this.hasBody()) {\n      return \"POST\";\n    }\n    return \"GET\";\n  }\n  set method(method) {\n    if (method == null) {\n      method = \"\";\n    }\n    this.#method = String(method).toUpperCase();\n  }\n  /**\n   *  The headers that will be used when requesting the URI. All\n   *  keys are lower-case.\n   *\n   *  This object is a copy, so any changes will **NOT** be reflected\n   *  in the ``FetchRequest``.\n   *\n   *  To set a header entry, use the ``setHeader`` method.\n   */\n  get headers() {\n    const headers = Object.assign({}, this.#headers);\n    if (this.#creds) {\n      headers[\"authorization\"] = `Basic ${encodeBase64(toUtf8Bytes(this.#creds))}`;\n    }\n    ;\n    if (this.allowGzip) {\n      headers[\"accept-encoding\"] = \"gzip\";\n    }\n    if (headers[\"content-type\"] == null && this.#bodyType) {\n      headers[\"content-type\"] = this.#bodyType;\n    }\n    if (this.body) {\n      headers[\"content-length\"] = String(this.body.length);\n    }\n    return headers;\n  }\n  /**\n   *  Get the header for %%key%%, ignoring case.\n   */\n  getHeader(key) {\n    return this.headers[key.toLowerCase()];\n  }\n  /**\n   *  Set the header for %%key%% to %%value%%. All values are coerced\n   *  to a string.\n   */\n  setHeader(key, value) {\n    this.#headers[String(key).toLowerCase()] = String(value);\n  }\n  /**\n   *  Clear all headers, resetting all intrinsic headers.\n   */\n  clearHeaders() {\n    this.#headers = {};\n  }\n  [Symbol.iterator]() {\n    const headers = this.headers;\n    const keys = Object.keys(headers);\n    let index = 0;\n    return {\n      next: () => {\n        if (index < keys.length) {\n          const key = keys[index++];\n          return {\n            value: [key, headers[key]],\n            done: false\n          };\n        }\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  /**\n   *  The value that will be sent for the ``Authorization`` header.\n   *\n   *  To set the credentials, use the ``setCredentials`` method.\n   */\n  get credentials() {\n    return this.#creds || null;\n  }\n  /**\n   *  Sets an ``Authorization`` for %%username%% with %%password%%.\n   */\n  setCredentials(username, password) {\n    assertArgument(!username.match(/:/), \"invalid basic authentication username\", \"username\", \"[REDACTED]\");\n    this.#creds = `${username}:${password}`;\n  }\n  /**\n   *  Enable and request gzip-encoded responses. The response will\n   *  automatically be decompressed. //(default: true)//\n   */\n  get allowGzip() {\n    return this.#gzip;\n  }\n  set allowGzip(value) {\n    this.#gzip = !!value;\n  }\n  /**\n   *  Allow ``Authentication`` credentials to be sent over insecure\n   *  channels. //(default: false)//\n   */\n  get allowInsecureAuthentication() {\n    return !!this.#allowInsecure;\n  }\n  set allowInsecureAuthentication(value) {\n    this.#allowInsecure = !!value;\n  }\n  /**\n   *  The timeout (in milliseconds) to wait for a complete response.\n   *  //(default: 5 minutes)//\n   */\n  get timeout() {\n    return this.#timeout;\n  }\n  set timeout(timeout) {\n    assertArgument(timeout >= 0, \"timeout must be non-zero\", \"timeout\", timeout);\n    this.#timeout = timeout;\n  }\n  /**\n   *  This function is called prior to each request, for example\n   *  during a redirection or retry in case of server throttling.\n   *\n   *  This offers an opportunity to populate headers or update\n   *  content before sending a request.\n   */\n  get preflightFunc() {\n    return this.#preflight || null;\n  }\n  set preflightFunc(preflight) {\n    this.#preflight = preflight;\n  }\n  /**\n   *  This function is called after each response, offering an\n   *  opportunity to provide client-level throttling or updating\n   *  response data.\n   *\n   *  Any error thrown in this causes the ``send()`` to throw.\n   *\n   *  To schedule a retry attempt (assuming the maximum retry limit\n   *  has not been reached), use [[response.throwThrottleError]].\n   */\n  get processFunc() {\n    return this.#process || null;\n  }\n  set processFunc(process) {\n    this.#process = process;\n  }\n  /**\n   *  This function is called on each retry attempt.\n   */\n  get retryFunc() {\n    return this.#retry || null;\n  }\n  set retryFunc(retry) {\n    this.#retry = retry;\n  }\n  /**\n   *  This function is called to fetch content from HTTP and\n   *  HTTPS URLs and is platform specific (e.g. nodejs vs\n   *  browsers).\n   *\n   *  This is by default the currently registered global getUrl\n   *  function, which can be changed using [[registerGetUrl]].\n   *  If this has been set, setting is to ``null`` will cause\n   *  this FetchRequest (and any future clones) to revert back to\n   *  using the currently registered global getUrl function.\n   *\n   *  Setting this is generally not necessary, but may be useful\n   *  for developers that wish to intercept requests or to\n   *  configurege a proxy or other agent.\n   */\n  get getUrlFunc() {\n    return this.#getUrlFunc || defaultGetUrlFunc;\n  }\n  set getUrlFunc(value) {\n    this.#getUrlFunc = value;\n  }\n  /**\n   *  Create a new FetchRequest instance with default values.\n   *\n   *  Once created, each property may be set before issuing a\n   *  ``.send()`` to make the request.\n   */\n  constructor(url) {\n    this.#url = String(url);\n    this.#allowInsecure = false;\n    this.#gzip = true;\n    this.#headers = {};\n    this.#method = \"\";\n    this.#timeout = 300000;\n    this.#throttle = {\n      slotInterval: SLOT_INTERVAL,\n      maxAttempts: MAX_ATTEMPTS\n    };\n    this.#getUrlFunc = null;\n  }\n  toString() {\n    return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#body ? hexlify(this.#body) : \"null\"}>`;\n  }\n  /**\n   *  Update the throttle parameters used to determine maximum\n   *  attempts and exponential-backoff properties.\n   */\n  setThrottleParams(params) {\n    if (params.slotInterval != null) {\n      this.#throttle.slotInterval = params.slotInterval;\n    }\n    if (params.maxAttempts != null) {\n      this.#throttle.maxAttempts = params.maxAttempts;\n    }\n  }\n  async #send(attempt, expires, delay, _request, _response) {\n    if (attempt >= this.#throttle.maxAttempts) {\n      return _response.makeServerError(\"exceeded maximum retry limit\");\n    }\n    assert(getTime() <= expires, \"timeout\", \"TIMEOUT\", {\n      operation: \"request.send\",\n      reason: \"timeout\",\n      request: _request\n    });\n    if (delay > 0) {\n      await wait(delay);\n    }\n    let req = this.clone();\n    const scheme = (req.url.split(\":\")[0] || \"\").toLowerCase();\n    // Process any Gateways\n    if (scheme in Gateways) {\n      const result = await Gateways[scheme](req.url, checkSignal(_request.#signal));\n      if (result instanceof FetchResponse) {\n        let response = result;\n        if (this.processFunc) {\n          checkSignal(_request.#signal);\n          try {\n            response = await this.processFunc(req, response);\n          } catch (error) {\n            // Something went wrong during processing; throw a 5xx server error\n            if (error.throttle == null || typeof error.stall !== \"number\") {\n              response.makeServerError(\"error in post-processing function\", error).assertOk();\n            }\n            // Ignore throttling\n          }\n        }\n        return response;\n      }\n      req = result;\n    }\n    // We have a preflight function; update the request\n    if (this.preflightFunc) {\n      req = await this.preflightFunc(req);\n    }\n    const resp = await this.getUrlFunc(req, checkSignal(_request.#signal));\n    let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);\n    if (response.statusCode === 301 || response.statusCode === 302) {\n      // Redirect\n      try {\n        const location = response.headers.location || \"\";\n        return req.redirect(location).#send(attempt + 1, expires, 0, _request, response);\n      } catch (error) {}\n      // Things won't get any better on another attempt; abort\n      return response;\n    } else if (response.statusCode === 429) {\n      // Throttle\n      if (this.retryFunc == null || (await this.retryFunc(req, response, attempt))) {\n        const retryAfter = response.headers[\"retry-after\"];\n        let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n        if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n          delay = parseInt(retryAfter);\n        }\n        return req.clone().#send(attempt + 1, expires, delay, _request, response);\n      }\n    }\n    if (this.processFunc) {\n      checkSignal(_request.#signal);\n      try {\n        response = await this.processFunc(req, response);\n      } catch (error) {\n        // Something went wrong during processing; throw a 5xx server error\n        if (error.throttle == null || typeof error.stall !== \"number\") {\n          response.makeServerError(\"error in post-processing function\", error).assertOk();\n        }\n        // Throttle\n        let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n        ;\n        if (error.stall >= 0) {\n          delay = error.stall;\n        }\n        return req.clone().#send(attempt + 1, expires, delay, _request, response);\n      }\n    }\n    return response;\n  }\n  /**\n   *  Resolves to the response by sending the request.\n   */\n  send() {\n    assert(this.#signal == null, \"request already sent\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fetchRequest.send\"\n    });\n    this.#signal = new FetchCancelSignal(this);\n    return this.#send(0, getTime() + this.timeout, 0, this, new FetchResponse(0, \"\", {}, null, this));\n  }\n  /**\n   *  Cancels the inflight response, causing a ``CANCELLED``\n   *  error to be rejected from the [[send]].\n   */\n  cancel() {\n    assert(this.#signal != null, \"request has not been sent\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fetchRequest.cancel\"\n    });\n    const signal = fetchSignals.get(this);\n    if (!signal) {\n      throw new Error(\"missing signal; should not happen\");\n    }\n    signal();\n  }\n  /**\n   *  Returns a new [[FetchRequest]] that represents the redirection\n   *  to %%location%%.\n   */\n  redirect(location) {\n    // Redirection; for now we only support absolute locations\n    const current = this.url.split(\":\")[0].toLowerCase();\n    const target = location.split(\":\")[0].toLowerCase();\n    // Don't allow redirecting:\n    // - non-GET requests\n    // - downgrading the security (e.g. https => http)\n    // - to non-HTTP (or non-HTTPS) protocols [this could be relaxed?]\n    assert(this.method === \"GET\" && (current !== \"https\" || target !== \"http\") && location.match(/^https?:/), `unsupported redirect`, \"UNSUPPORTED_OPERATION\", {\n      operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`\n    });\n    // Create a copy of this request, with a new URL\n    const req = new FetchRequest(location);\n    req.method = \"GET\";\n    req.allowGzip = this.allowGzip;\n    req.timeout = this.timeout;\n    req.#headers = Object.assign({}, this.#headers);\n    if (this.#body) {\n      req.#body = new Uint8Array(this.#body);\n    }\n    req.#bodyType = this.#bodyType;\n    // Do not forward credentials unless on the same domain; only absolute\n    //req.allowInsecure = false;\n    // paths are currently supported; may want a way to specify to forward?\n    //setStore(req.#props, \"creds\", getStore(this.#pros, \"creds\"));\n    return req;\n  }\n  /**\n   *  Create a new copy of this request.\n   */\n  clone() {\n    const clone = new FetchRequest(this.url);\n    // Preserve \"default method\" (i.e. null)\n    clone.#method = this.#method;\n    // Preserve \"default body\" with type, copying the Uint8Array is present\n    if (this.#body) {\n      clone.#body = this.#body;\n    }\n    clone.#bodyType = this.#bodyType;\n    // Preserve \"default headers\"\n    clone.#headers = Object.assign({}, this.#headers);\n    // Credentials is readonly, so we copy internally\n    clone.#creds = this.#creds;\n    if (this.allowGzip) {\n      clone.allowGzip = true;\n    }\n    clone.timeout = this.timeout;\n    if (this.allowInsecureAuthentication) {\n      clone.allowInsecureAuthentication = true;\n    }\n    clone.#preflight = this.#preflight;\n    clone.#process = this.#process;\n    clone.#retry = this.#retry;\n    clone.#throttle = Object.assign({}, this.#throttle);\n    clone.#getUrlFunc = this.#getUrlFunc;\n    return clone;\n  }\n  /**\n   *  Locks all static configuration for gateways and FetchGetUrlFunc\n   *  registration.\n   */\n  static lockConfig() {\n    locked = true;\n  }\n  /**\n   *  Get the current Gateway function for %%scheme%%.\n   */\n  static getGateway(scheme) {\n    return Gateways[scheme.toLowerCase()] || null;\n  }\n  /**\n   *  Use the %%func%% when fetching URIs using %%scheme%%.\n   *\n   *  This method affects all requests globally.\n   *\n   *  If [[lockConfig]] has been called, no change is made and this\n   *  throws.\n   */\n  static registerGateway(scheme, func) {\n    scheme = scheme.toLowerCase();\n    if (scheme === \"http\" || scheme === \"https\") {\n      throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);\n    }\n    if (locked) {\n      throw new Error(\"gateways locked\");\n    }\n    Gateways[scheme] = func;\n  }\n  /**\n   *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.\n   *\n   *  This method affects all requests globally.\n   *\n   *  If [[lockConfig]] has been called, no change is made and this\n   *  throws.\n   */\n  static registerGetUrl(getUrl) {\n    if (locked) {\n      throw new Error(\"gateways locked\");\n    }\n    defaultGetUrlFunc = getUrl;\n  }\n  /**\n   *  Creates a getUrl function that fetches content from HTTP and\n   *  HTTPS URLs.\n   *\n   *  The available %%options%% are dependent on the platform\n   *  implementation of the default getUrl function.\n   *\n   *  This is not generally something that is needed, but is useful\n   *  when trying to customize simple behaviour when fetching HTTP\n   *  content.\n   */\n  static createGetUrlFunc(options) {\n    return createGetUrl(options);\n  }\n  /**\n   *  Creates a function that can \"fetch\" data URIs.\n   *\n   *  Note that this is automatically done internally to support\n   *  data URIs, so it is not necessary to register it.\n   *\n   *  This is not generally something that is needed, but may\n   *  be useful in a wrapper to perfom custom data URI functionality.\n   */\n  static createDataGateway() {\n    return dataGatewayFunc;\n  }\n  /**\n   *  Creates a function that will fetch IPFS (unvalidated) from\n   *  a custom gateway baseUrl.\n   *\n   *  The default IPFS gateway used internally is\n   *  ``\"https:/\\/gateway.ipfs.io/ipfs/\"``.\n   */\n  static createIpfsGatewayFunc(baseUrl) {\n    return getIpfsGatewayFunc(baseUrl);\n  }\n}\n;\n/**\n *  The response for a FetchRequest.\n */\nexport class FetchResponse {\n  #statusCode;\n  #statusMessage;\n  #headers;\n  #body;\n  #request;\n  #error;\n  toString() {\n    return `<FetchResponse status=${this.statusCode} body=${this.#body ? hexlify(this.#body) : \"null\"}>`;\n  }\n  /**\n   *  The response status code.\n   */\n  get statusCode() {\n    return this.#statusCode;\n  }\n  /**\n   *  The response status message.\n   */\n  get statusMessage() {\n    return this.#statusMessage;\n  }\n  /**\n   *  The response headers. All keys are lower-case.\n   */\n  get headers() {\n    return Object.assign({}, this.#headers);\n  }\n  /**\n   *  The response body, or ``null`` if there was no body.\n   */\n  get body() {\n    return this.#body == null ? null : new Uint8Array(this.#body);\n  }\n  /**\n   *  The response body as a UTF-8 encoded string, or the empty\n   *  string (i.e. ``\"\"``) if there was no body.\n   *\n   *  An error is thrown if the body is invalid UTF-8 data.\n   */\n  get bodyText() {\n    try {\n      return this.#body == null ? \"\" : toUtf8String(this.#body);\n    } catch (error) {\n      assert(false, \"response body is not valid UTF-8 data\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"bodyText\",\n        info: {\n          response: this\n        }\n      });\n    }\n  }\n  /**\n   *  The response body, decoded as JSON.\n   *\n   *  An error is thrown if the body is invalid JSON-encoded data\n   *  or if there was no body.\n   */\n  get bodyJson() {\n    try {\n      return JSON.parse(this.bodyText);\n    } catch (error) {\n      assert(false, \"response body is not valid JSON\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"bodyJson\",\n        info: {\n          response: this\n        }\n      });\n    }\n  }\n  [Symbol.iterator]() {\n    const headers = this.headers;\n    const keys = Object.keys(headers);\n    let index = 0;\n    return {\n      next: () => {\n        if (index < keys.length) {\n          const key = keys[index++];\n          return {\n            value: [key, headers[key]],\n            done: false\n          };\n        }\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  constructor(statusCode, statusMessage, headers, body, request) {\n    this.#statusCode = statusCode;\n    this.#statusMessage = statusMessage;\n    this.#headers = Object.keys(headers).reduce((accum, k) => {\n      accum[k.toLowerCase()] = String(headers[k]);\n      return accum;\n    }, {});\n    this.#body = body == null ? null : new Uint8Array(body);\n    this.#request = request || null;\n    this.#error = {\n      message: \"\"\n    };\n  }\n  /**\n   *  Return a Response with matching headers and body, but with\n   *  an error status code (i.e. 599) and %%message%% with an\n   *  optional %%error%%.\n   */\n  makeServerError(message, error) {\n    let statusMessage;\n    if (!message) {\n      message = `${this.statusCode} ${this.statusMessage}`;\n      statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;\n    } else {\n      statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;\n    }\n    const response = new FetchResponse(599, statusMessage, this.headers, this.body, this.#request || undefined);\n    response.#error = {\n      message,\n      error\n    };\n    return response;\n  }\n  /**\n   *  If called within a [request.processFunc](FetchRequest-processFunc)\n   *  call, causes the request to retry as if throttled for %%stall%%\n   *  milliseconds.\n   */\n  throwThrottleError(message, stall) {\n    if (stall == null) {\n      stall = -1;\n    } else {\n      assertArgument(Number.isInteger(stall) && stall >= 0, \"invalid stall timeout\", \"stall\", stall);\n    }\n    const error = new Error(message || \"throttling requests\");\n    defineProperties(error, {\n      stall,\n      throttle: true\n    });\n    throw error;\n  }\n  /**\n   *  Get the header value for %%key%%, ignoring case.\n   */\n  getHeader(key) {\n    return this.headers[key.toLowerCase()];\n  }\n  /**\n   *  Returns true if the response has a body.\n   */\n  hasBody() {\n    return this.#body != null;\n  }\n  /**\n   *  The request made for this response.\n   */\n  get request() {\n    return this.#request;\n  }\n  /**\n   *  Returns true if this response was a success statusCode.\n   */\n  ok() {\n    return this.#error.message === \"\" && this.statusCode >= 200 && this.statusCode < 300;\n  }\n  /**\n   *  Throws a ``SERVER_ERROR`` if this response is not ok.\n   */\n  assertOk() {\n    if (this.ok()) {\n      return;\n    }\n    let {\n      message,\n      error\n    } = this.#error;\n    if (message === \"\") {\n      message = `server response ${this.statusCode} ${this.statusMessage}`;\n    }\n    let requestUrl = null;\n    if (this.request) {\n      requestUrl = this.request.url;\n    }\n    let responseBody = null;\n    try {\n      if (this.#body) {\n        responseBody = toUtf8String(this.#body);\n      }\n    } catch (e) {}\n    assert(false, message, \"SERVER_ERROR\", {\n      request: this.request || \"unknown request\",\n      response: this,\n      error,\n      info: {\n        requestUrl,\n        responseBody,\n        responseStatus: `${this.statusCode} ${this.statusMessage}`\n      }\n    });\n  }\n}\nfunction getTime() {\n  return new Date().getTime();\n}\nfunction unpercent(value) {\n  return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n    return String.fromCharCode(parseInt(code, 16));\n  }));\n}\nfunction wait(delay) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}","map":{"version":3,"names":["decodeBase64","encodeBase64","hexlify","assert","assertArgument","defineProperties","toUtf8Bytes","toUtf8String","createGetUrl","MAX_ATTEMPTS","SLOT_INTERVAL","defaultGetUrlFunc","reData","RegExp","reIpfs","locked","dataGatewayFunc","url","signal","match","Error","FetchResponse","unpercent","error","FetchRequest","getIpfsGatewayFunc","baseUrl","gatewayIpfs","Gateways","fetchSignals","WeakMap","FetchCancelSignal","listeners","cancelled","constructor","request","set","listener","setTimeout","addListener","operation","push","checkSignal","allowInsecure","gzip","headers","method","timeout","body","bodyType","creds","preflight","process","retry","throttle","getUrlFunc","String","Uint8Array","undefined","JSON","stringify","hasBody","toUpperCase","Object","assign","allowGzip","length","getHeader","key","toLowerCase","setHeader","value","clearHeaders","Symbol","iterator","keys","index","next","done","credentials","setCredentials","username","password","allowInsecureAuthentication","preflightFunc","processFunc","retryFunc","slotInterval","maxAttempts","toString","setThrottleParams","params","send","#send","attempt","expires","delay","_request","_response","makeServerError","getTime","reason","wait","req","clone","scheme","split","result","response","stall","assertOk","resp","statusCode","statusMessage","location","redirect","retryAfter","Math","trunc","random","pow","parseInt","cancel","get","current","target","lockConfig","getGateway","registerGateway","func","registerGetUrl","getUrl","createGetUrlFunc","options","createDataGateway","createIpfsGatewayFunc","bodyText","info","bodyJson","parse","reduce","accum","k","message","throwThrottleError","Number","isInteger","ok","requestUrl","responseBody","e","responseStatus","Date","replace","all","code","fromCharCode","Promise","resolve"],"sources":["/Users/yadhnikharkar/Desktop/dmrs-mvp/frontend/node_modules/ethers/lib.esm/utils/fetch.js"],"sourcesContent":["/**\n *  Fetching content from the web is environment-specific, so Ethers\n *  provides an abstraction that each environment can implement to provide\n *  this service.\n *\n *  On [Node.js](link-node), the ``http`` and ``https`` libs are used to\n *  create a request object, register event listeners and process data\n *  and populate the [[FetchResponse]].\n *\n *  In a browser, the [DOM fetch](link-js-fetch) is used, and the resulting\n *  ``Promise`` is waited on to retrieve the payload.\n *\n *  The [[FetchRequest]] is responsible for handling many common situations,\n *  such as redirects, server throttling, authentication, etc.\n *\n *  It also handles common gateways, such as IPFS and data URIs.\n *\n *  @_section api/utils/fetching:Fetching Web Content  [about-fetch]\n */\nimport { decodeBase64, encodeBase64 } from \"./base64.js\";\nimport { hexlify } from \"./data.js\";\nimport { assert, assertArgument } from \"./errors.js\";\nimport { defineProperties } from \"./properties.js\";\nimport { toUtf8Bytes, toUtf8String } from \"./utf8.js\";\nimport { createGetUrl } from \"./geturl.js\";\nconst MAX_ATTEMPTS = 12;\nconst SLOT_INTERVAL = 250;\n// The global FetchGetUrlFunc implementation.\nlet defaultGetUrlFunc = createGetUrl();\nconst reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\nconst reIpfs = new RegExp(\"^ipfs:/\\/(ipfs/)?(.*)$\", \"i\");\n// If locked, new Gateways cannot be added\nlet locked = false;\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\nasync function dataGatewayFunc(url, signal) {\n    try {\n        const match = url.match(reData);\n        if (!match) {\n            throw new Error(\"invalid data\");\n        }\n        return new FetchResponse(200, \"OK\", {\n            \"content-type\": (match[1] || \"text/plain\"),\n        }, (match[2] ? decodeBase64(match[3]) : unpercent(match[3])));\n    }\n    catch (error) {\n        return new FetchResponse(599, \"BAD REQUEST (invalid data: URI)\", {}, null, new FetchRequest(url));\n    }\n}\n/**\n *  Returns a [[FetchGatewayFunc]] for fetching content from a standard\n *  IPFS gateway hosted at %%baseUrl%%.\n */\nfunction getIpfsGatewayFunc(baseUrl) {\n    async function gatewayIpfs(url, signal) {\n        try {\n            const match = url.match(reIpfs);\n            if (!match) {\n                throw new Error(\"invalid link\");\n            }\n            return new FetchRequest(`${baseUrl}${match[2]}`);\n        }\n        catch (error) {\n            return new FetchResponse(599, \"BAD REQUEST (invalid IPFS URI)\", {}, null, new FetchRequest(url));\n        }\n    }\n    return gatewayIpfs;\n}\nconst Gateways = {\n    \"data\": dataGatewayFunc,\n    \"ipfs\": getIpfsGatewayFunc(\"https:/\\/gateway.ipfs.io/ipfs/\")\n};\nconst fetchSignals = new WeakMap();\n/**\n *  @_ignore\n */\nexport class FetchCancelSignal {\n    #listeners;\n    #cancelled;\n    constructor(request) {\n        this.#listeners = [];\n        this.#cancelled = false;\n        fetchSignals.set(request, () => {\n            if (this.#cancelled) {\n                return;\n            }\n            this.#cancelled = true;\n            for (const listener of this.#listeners) {\n                setTimeout(() => { listener(); }, 0);\n            }\n            this.#listeners = [];\n        });\n    }\n    addListener(listener) {\n        assert(!this.#cancelled, \"singal already cancelled\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fetchCancelSignal.addCancelListener\"\n        });\n        this.#listeners.push(listener);\n    }\n    get cancelled() { return this.#cancelled; }\n    checkSignal() {\n        assert(!this.cancelled, \"cancelled\", \"CANCELLED\", {});\n    }\n}\n// Check the signal, throwing if it is cancelled\nfunction checkSignal(signal) {\n    if (signal == null) {\n        throw new Error(\"missing signal; should not happen\");\n    }\n    signal.checkSignal();\n    return signal;\n}\n/**\n *  Represents a request for a resource using a URI.\n *\n *  By default, the supported schemes are ``HTTP``, ``HTTPS``, ``data:``,\n *  and ``IPFS:``.\n *\n *  Additional schemes can be added globally using [[registerGateway]].\n *\n *  @example:\n *    req = new FetchRequest(\"https://www.ricmoo.com\")\n *    resp = await req.send()\n *    resp.body.length\n *    //_result:\n */\nexport class FetchRequest {\n    #allowInsecure;\n    #gzip;\n    #headers;\n    #method;\n    #timeout;\n    #url;\n    #body;\n    #bodyType;\n    #creds;\n    // Hooks\n    #preflight;\n    #process;\n    #retry;\n    #signal;\n    #throttle;\n    #getUrlFunc;\n    /**\n     *  The fetch URL to request.\n     */\n    get url() { return this.#url; }\n    set url(url) {\n        this.#url = String(url);\n    }\n    /**\n     *  The fetch body, if any, to send as the request body. //(default: null)//\n     *\n     *  When setting a body, the intrinsic ``Content-Type`` is automatically\n     *  set and will be used if **not overridden** by setting a custom\n     *  header.\n     *\n     *  If %%body%% is null, the body is cleared (along with the\n     *  intrinsic ``Content-Type``).\n     *\n     *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to\n     *  ``text/plain``.\n     *\n     *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to\n     *  ``application/octet-stream``.\n     *\n     *  If %%body%% is any other object, the intrinsic ``Content-Type`` is\n     *  set to ``application/json``.\n     */\n    get body() {\n        if (this.#body == null) {\n            return null;\n        }\n        return new Uint8Array(this.#body);\n    }\n    set body(body) {\n        if (body == null) {\n            this.#body = undefined;\n            this.#bodyType = undefined;\n        }\n        else if (typeof (body) === \"string\") {\n            this.#body = toUtf8Bytes(body);\n            this.#bodyType = \"text/plain\";\n        }\n        else if (body instanceof Uint8Array) {\n            this.#body = body;\n            this.#bodyType = \"application/octet-stream\";\n        }\n        else if (typeof (body) === \"object\") {\n            this.#body = toUtf8Bytes(JSON.stringify(body));\n            this.#bodyType = \"application/json\";\n        }\n        else {\n            throw new Error(\"invalid body\");\n        }\n    }\n    /**\n     *  Returns true if the request has a body.\n     */\n    hasBody() {\n        return (this.#body != null);\n    }\n    /**\n     *  The HTTP method to use when requesting the URI. If no method\n     *  has been explicitly set, then ``GET`` is used if the body is\n     *  null and ``POST`` otherwise.\n     */\n    get method() {\n        if (this.#method) {\n            return this.#method;\n        }\n        if (this.hasBody()) {\n            return \"POST\";\n        }\n        return \"GET\";\n    }\n    set method(method) {\n        if (method == null) {\n            method = \"\";\n        }\n        this.#method = String(method).toUpperCase();\n    }\n    /**\n     *  The headers that will be used when requesting the URI. All\n     *  keys are lower-case.\n     *\n     *  This object is a copy, so any changes will **NOT** be reflected\n     *  in the ``FetchRequest``.\n     *\n     *  To set a header entry, use the ``setHeader`` method.\n     */\n    get headers() {\n        const headers = Object.assign({}, this.#headers);\n        if (this.#creds) {\n            headers[\"authorization\"] = `Basic ${encodeBase64(toUtf8Bytes(this.#creds))}`;\n        }\n        ;\n        if (this.allowGzip) {\n            headers[\"accept-encoding\"] = \"gzip\";\n        }\n        if (headers[\"content-type\"] == null && this.#bodyType) {\n            headers[\"content-type\"] = this.#bodyType;\n        }\n        if (this.body) {\n            headers[\"content-length\"] = String(this.body.length);\n        }\n        return headers;\n    }\n    /**\n     *  Get the header for %%key%%, ignoring case.\n     */\n    getHeader(key) {\n        return this.headers[key.toLowerCase()];\n    }\n    /**\n     *  Set the header for %%key%% to %%value%%. All values are coerced\n     *  to a string.\n     */\n    setHeader(key, value) {\n        this.#headers[String(key).toLowerCase()] = String(value);\n    }\n    /**\n     *  Clear all headers, resetting all intrinsic headers.\n     */\n    clearHeaders() {\n        this.#headers = {};\n    }\n    [Symbol.iterator]() {\n        const headers = this.headers;\n        const keys = Object.keys(headers);\n        let index = 0;\n        return {\n            next: () => {\n                if (index < keys.length) {\n                    const key = keys[index++];\n                    return {\n                        value: [key, headers[key]], done: false\n                    };\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n    /**\n     *  The value that will be sent for the ``Authorization`` header.\n     *\n     *  To set the credentials, use the ``setCredentials`` method.\n     */\n    get credentials() {\n        return this.#creds || null;\n    }\n    /**\n     *  Sets an ``Authorization`` for %%username%% with %%password%%.\n     */\n    setCredentials(username, password) {\n        assertArgument(!username.match(/:/), \"invalid basic authentication username\", \"username\", \"[REDACTED]\");\n        this.#creds = `${username}:${password}`;\n    }\n    /**\n     *  Enable and request gzip-encoded responses. The response will\n     *  automatically be decompressed. //(default: true)//\n     */\n    get allowGzip() {\n        return this.#gzip;\n    }\n    set allowGzip(value) {\n        this.#gzip = !!value;\n    }\n    /**\n     *  Allow ``Authentication`` credentials to be sent over insecure\n     *  channels. //(default: false)//\n     */\n    get allowInsecureAuthentication() {\n        return !!this.#allowInsecure;\n    }\n    set allowInsecureAuthentication(value) {\n        this.#allowInsecure = !!value;\n    }\n    /**\n     *  The timeout (in milliseconds) to wait for a complete response.\n     *  //(default: 5 minutes)//\n     */\n    get timeout() { return this.#timeout; }\n    set timeout(timeout) {\n        assertArgument(timeout >= 0, \"timeout must be non-zero\", \"timeout\", timeout);\n        this.#timeout = timeout;\n    }\n    /**\n     *  This function is called prior to each request, for example\n     *  during a redirection or retry in case of server throttling.\n     *\n     *  This offers an opportunity to populate headers or update\n     *  content before sending a request.\n     */\n    get preflightFunc() {\n        return this.#preflight || null;\n    }\n    set preflightFunc(preflight) {\n        this.#preflight = preflight;\n    }\n    /**\n     *  This function is called after each response, offering an\n     *  opportunity to provide client-level throttling or updating\n     *  response data.\n     *\n     *  Any error thrown in this causes the ``send()`` to throw.\n     *\n     *  To schedule a retry attempt (assuming the maximum retry limit\n     *  has not been reached), use [[response.throwThrottleError]].\n     */\n    get processFunc() {\n        return this.#process || null;\n    }\n    set processFunc(process) {\n        this.#process = process;\n    }\n    /**\n     *  This function is called on each retry attempt.\n     */\n    get retryFunc() {\n        return this.#retry || null;\n    }\n    set retryFunc(retry) {\n        this.#retry = retry;\n    }\n    /**\n     *  This function is called to fetch content from HTTP and\n     *  HTTPS URLs and is platform specific (e.g. nodejs vs\n     *  browsers).\n     *\n     *  This is by default the currently registered global getUrl\n     *  function, which can be changed using [[registerGetUrl]].\n     *  If this has been set, setting is to ``null`` will cause\n     *  this FetchRequest (and any future clones) to revert back to\n     *  using the currently registered global getUrl function.\n     *\n     *  Setting this is generally not necessary, but may be useful\n     *  for developers that wish to intercept requests or to\n     *  configurege a proxy or other agent.\n     */\n    get getUrlFunc() {\n        return this.#getUrlFunc || defaultGetUrlFunc;\n    }\n    set getUrlFunc(value) {\n        this.#getUrlFunc = value;\n    }\n    /**\n     *  Create a new FetchRequest instance with default values.\n     *\n     *  Once created, each property may be set before issuing a\n     *  ``.send()`` to make the request.\n     */\n    constructor(url) {\n        this.#url = String(url);\n        this.#allowInsecure = false;\n        this.#gzip = true;\n        this.#headers = {};\n        this.#method = \"\";\n        this.#timeout = 300000;\n        this.#throttle = {\n            slotInterval: SLOT_INTERVAL,\n            maxAttempts: MAX_ATTEMPTS\n        };\n        this.#getUrlFunc = null;\n    }\n    toString() {\n        return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#body ? hexlify(this.#body) : \"null\"}>`;\n    }\n    /**\n     *  Update the throttle parameters used to determine maximum\n     *  attempts and exponential-backoff properties.\n     */\n    setThrottleParams(params) {\n        if (params.slotInterval != null) {\n            this.#throttle.slotInterval = params.slotInterval;\n        }\n        if (params.maxAttempts != null) {\n            this.#throttle.maxAttempts = params.maxAttempts;\n        }\n    }\n    async #send(attempt, expires, delay, _request, _response) {\n        if (attempt >= this.#throttle.maxAttempts) {\n            return _response.makeServerError(\"exceeded maximum retry limit\");\n        }\n        assert(getTime() <= expires, \"timeout\", \"TIMEOUT\", {\n            operation: \"request.send\", reason: \"timeout\", request: _request\n        });\n        if (delay > 0) {\n            await wait(delay);\n        }\n        let req = this.clone();\n        const scheme = (req.url.split(\":\")[0] || \"\").toLowerCase();\n        // Process any Gateways\n        if (scheme in Gateways) {\n            const result = await Gateways[scheme](req.url, checkSignal(_request.#signal));\n            if (result instanceof FetchResponse) {\n                let response = result;\n                if (this.processFunc) {\n                    checkSignal(_request.#signal);\n                    try {\n                        response = await this.processFunc(req, response);\n                    }\n                    catch (error) {\n                        // Something went wrong during processing; throw a 5xx server error\n                        if (error.throttle == null || typeof (error.stall) !== \"number\") {\n                            response.makeServerError(\"error in post-processing function\", error).assertOk();\n                        }\n                        // Ignore throttling\n                    }\n                }\n                return response;\n            }\n            req = result;\n        }\n        // We have a preflight function; update the request\n        if (this.preflightFunc) {\n            req = await this.preflightFunc(req);\n        }\n        const resp = await this.getUrlFunc(req, checkSignal(_request.#signal));\n        let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);\n        if (response.statusCode === 301 || response.statusCode === 302) {\n            // Redirect\n            try {\n                const location = response.headers.location || \"\";\n                return req.redirect(location).#send(attempt + 1, expires, 0, _request, response);\n            }\n            catch (error) { }\n            // Things won't get any better on another attempt; abort\n            return response;\n        }\n        else if (response.statusCode === 429) {\n            // Throttle\n            if (this.retryFunc == null || (await this.retryFunc(req, response, attempt))) {\n                const retryAfter = response.headers[\"retry-after\"];\n                let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n                if (typeof (retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                    delay = parseInt(retryAfter);\n                }\n                return req.clone().#send(attempt + 1, expires, delay, _request, response);\n            }\n        }\n        if (this.processFunc) {\n            checkSignal(_request.#signal);\n            try {\n                response = await this.processFunc(req, response);\n            }\n            catch (error) {\n                // Something went wrong during processing; throw a 5xx server error\n                if (error.throttle == null || typeof (error.stall) !== \"number\") {\n                    response.makeServerError(\"error in post-processing function\", error).assertOk();\n                }\n                // Throttle\n                let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n                ;\n                if (error.stall >= 0) {\n                    delay = error.stall;\n                }\n                return req.clone().#send(attempt + 1, expires, delay, _request, response);\n            }\n        }\n        return response;\n    }\n    /**\n     *  Resolves to the response by sending the request.\n     */\n    send() {\n        assert(this.#signal == null, \"request already sent\", \"UNSUPPORTED_OPERATION\", { operation: \"fetchRequest.send\" });\n        this.#signal = new FetchCancelSignal(this);\n        return this.#send(0, getTime() + this.timeout, 0, this, new FetchResponse(0, \"\", {}, null, this));\n    }\n    /**\n     *  Cancels the inflight response, causing a ``CANCELLED``\n     *  error to be rejected from the [[send]].\n     */\n    cancel() {\n        assert(this.#signal != null, \"request has not been sent\", \"UNSUPPORTED_OPERATION\", { operation: \"fetchRequest.cancel\" });\n        const signal = fetchSignals.get(this);\n        if (!signal) {\n            throw new Error(\"missing signal; should not happen\");\n        }\n        signal();\n    }\n    /**\n     *  Returns a new [[FetchRequest]] that represents the redirection\n     *  to %%location%%.\n     */\n    redirect(location) {\n        // Redirection; for now we only support absolute locations\n        const current = this.url.split(\":\")[0].toLowerCase();\n        const target = location.split(\":\")[0].toLowerCase();\n        // Don't allow redirecting:\n        // - non-GET requests\n        // - downgrading the security (e.g. https => http)\n        // - to non-HTTP (or non-HTTPS) protocols [this could be relaxed?]\n        assert(this.method === \"GET\" && (current !== \"https\" || target !== \"http\") && location.match(/^https?:/), `unsupported redirect`, \"UNSUPPORTED_OPERATION\", {\n            operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`\n        });\n        // Create a copy of this request, with a new URL\n        const req = new FetchRequest(location);\n        req.method = \"GET\";\n        req.allowGzip = this.allowGzip;\n        req.timeout = this.timeout;\n        req.#headers = Object.assign({}, this.#headers);\n        if (this.#body) {\n            req.#body = new Uint8Array(this.#body);\n        }\n        req.#bodyType = this.#bodyType;\n        // Do not forward credentials unless on the same domain; only absolute\n        //req.allowInsecure = false;\n        // paths are currently supported; may want a way to specify to forward?\n        //setStore(req.#props, \"creds\", getStore(this.#pros, \"creds\"));\n        return req;\n    }\n    /**\n     *  Create a new copy of this request.\n     */\n    clone() {\n        const clone = new FetchRequest(this.url);\n        // Preserve \"default method\" (i.e. null)\n        clone.#method = this.#method;\n        // Preserve \"default body\" with type, copying the Uint8Array is present\n        if (this.#body) {\n            clone.#body = this.#body;\n        }\n        clone.#bodyType = this.#bodyType;\n        // Preserve \"default headers\"\n        clone.#headers = Object.assign({}, this.#headers);\n        // Credentials is readonly, so we copy internally\n        clone.#creds = this.#creds;\n        if (this.allowGzip) {\n            clone.allowGzip = true;\n        }\n        clone.timeout = this.timeout;\n        if (this.allowInsecureAuthentication) {\n            clone.allowInsecureAuthentication = true;\n        }\n        clone.#preflight = this.#preflight;\n        clone.#process = this.#process;\n        clone.#retry = this.#retry;\n        clone.#throttle = Object.assign({}, this.#throttle);\n        clone.#getUrlFunc = this.#getUrlFunc;\n        return clone;\n    }\n    /**\n     *  Locks all static configuration for gateways and FetchGetUrlFunc\n     *  registration.\n     */\n    static lockConfig() {\n        locked = true;\n    }\n    /**\n     *  Get the current Gateway function for %%scheme%%.\n     */\n    static getGateway(scheme) {\n        return Gateways[scheme.toLowerCase()] || null;\n    }\n    /**\n     *  Use the %%func%% when fetching URIs using %%scheme%%.\n     *\n     *  This method affects all requests globally.\n     *\n     *  If [[lockConfig]] has been called, no change is made and this\n     *  throws.\n     */\n    static registerGateway(scheme, func) {\n        scheme = scheme.toLowerCase();\n        if (scheme === \"http\" || scheme === \"https\") {\n            throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);\n        }\n        if (locked) {\n            throw new Error(\"gateways locked\");\n        }\n        Gateways[scheme] = func;\n    }\n    /**\n     *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.\n     *\n     *  This method affects all requests globally.\n     *\n     *  If [[lockConfig]] has been called, no change is made and this\n     *  throws.\n     */\n    static registerGetUrl(getUrl) {\n        if (locked) {\n            throw new Error(\"gateways locked\");\n        }\n        defaultGetUrlFunc = getUrl;\n    }\n    /**\n     *  Creates a getUrl function that fetches content from HTTP and\n     *  HTTPS URLs.\n     *\n     *  The available %%options%% are dependent on the platform\n     *  implementation of the default getUrl function.\n     *\n     *  This is not generally something that is needed, but is useful\n     *  when trying to customize simple behaviour when fetching HTTP\n     *  content.\n     */\n    static createGetUrlFunc(options) {\n        return createGetUrl(options);\n    }\n    /**\n     *  Creates a function that can \"fetch\" data URIs.\n     *\n     *  Note that this is automatically done internally to support\n     *  data URIs, so it is not necessary to register it.\n     *\n     *  This is not generally something that is needed, but may\n     *  be useful in a wrapper to perfom custom data URI functionality.\n     */\n    static createDataGateway() {\n        return dataGatewayFunc;\n    }\n    /**\n     *  Creates a function that will fetch IPFS (unvalidated) from\n     *  a custom gateway baseUrl.\n     *\n     *  The default IPFS gateway used internally is\n     *  ``\"https:/\\/gateway.ipfs.io/ipfs/\"``.\n     */\n    static createIpfsGatewayFunc(baseUrl) {\n        return getIpfsGatewayFunc(baseUrl);\n    }\n}\n;\n/**\n *  The response for a FetchRequest.\n */\nexport class FetchResponse {\n    #statusCode;\n    #statusMessage;\n    #headers;\n    #body;\n    #request;\n    #error;\n    toString() {\n        return `<FetchResponse status=${this.statusCode} body=${this.#body ? hexlify(this.#body) : \"null\"}>`;\n    }\n    /**\n     *  The response status code.\n     */\n    get statusCode() { return this.#statusCode; }\n    /**\n     *  The response status message.\n     */\n    get statusMessage() { return this.#statusMessage; }\n    /**\n     *  The response headers. All keys are lower-case.\n     */\n    get headers() { return Object.assign({}, this.#headers); }\n    /**\n     *  The response body, or ``null`` if there was no body.\n     */\n    get body() {\n        return (this.#body == null) ? null : new Uint8Array(this.#body);\n    }\n    /**\n     *  The response body as a UTF-8 encoded string, or the empty\n     *  string (i.e. ``\"\"``) if there was no body.\n     *\n     *  An error is thrown if the body is invalid UTF-8 data.\n     */\n    get bodyText() {\n        try {\n            return (this.#body == null) ? \"\" : toUtf8String(this.#body);\n        }\n        catch (error) {\n            assert(false, \"response body is not valid UTF-8 data\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"bodyText\", info: { response: this }\n            });\n        }\n    }\n    /**\n     *  The response body, decoded as JSON.\n     *\n     *  An error is thrown if the body is invalid JSON-encoded data\n     *  or if there was no body.\n     */\n    get bodyJson() {\n        try {\n            return JSON.parse(this.bodyText);\n        }\n        catch (error) {\n            assert(false, \"response body is not valid JSON\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"bodyJson\", info: { response: this }\n            });\n        }\n    }\n    [Symbol.iterator]() {\n        const headers = this.headers;\n        const keys = Object.keys(headers);\n        let index = 0;\n        return {\n            next: () => {\n                if (index < keys.length) {\n                    const key = keys[index++];\n                    return {\n                        value: [key, headers[key]], done: false\n                    };\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n    constructor(statusCode, statusMessage, headers, body, request) {\n        this.#statusCode = statusCode;\n        this.#statusMessage = statusMessage;\n        this.#headers = Object.keys(headers).reduce((accum, k) => {\n            accum[k.toLowerCase()] = String(headers[k]);\n            return accum;\n        }, {});\n        this.#body = ((body == null) ? null : new Uint8Array(body));\n        this.#request = (request || null);\n        this.#error = { message: \"\" };\n    }\n    /**\n     *  Return a Response with matching headers and body, but with\n     *  an error status code (i.e. 599) and %%message%% with an\n     *  optional %%error%%.\n     */\n    makeServerError(message, error) {\n        let statusMessage;\n        if (!message) {\n            message = `${this.statusCode} ${this.statusMessage}`;\n            statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;\n        }\n        else {\n            statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;\n        }\n        const response = new FetchResponse(599, statusMessage, this.headers, this.body, this.#request || undefined);\n        response.#error = { message, error };\n        return response;\n    }\n    /**\n     *  If called within a [request.processFunc](FetchRequest-processFunc)\n     *  call, causes the request to retry as if throttled for %%stall%%\n     *  milliseconds.\n     */\n    throwThrottleError(message, stall) {\n        if (stall == null) {\n            stall = -1;\n        }\n        else {\n            assertArgument(Number.isInteger(stall) && stall >= 0, \"invalid stall timeout\", \"stall\", stall);\n        }\n        const error = new Error(message || \"throttling requests\");\n        defineProperties(error, { stall, throttle: true });\n        throw error;\n    }\n    /**\n     *  Get the header value for %%key%%, ignoring case.\n     */\n    getHeader(key) {\n        return this.headers[key.toLowerCase()];\n    }\n    /**\n     *  Returns true if the response has a body.\n     */\n    hasBody() {\n        return (this.#body != null);\n    }\n    /**\n     *  The request made for this response.\n     */\n    get request() { return this.#request; }\n    /**\n     *  Returns true if this response was a success statusCode.\n     */\n    ok() {\n        return (this.#error.message === \"\" && this.statusCode >= 200 && this.statusCode < 300);\n    }\n    /**\n     *  Throws a ``SERVER_ERROR`` if this response is not ok.\n     */\n    assertOk() {\n        if (this.ok()) {\n            return;\n        }\n        let { message, error } = this.#error;\n        if (message === \"\") {\n            message = `server response ${this.statusCode} ${this.statusMessage}`;\n        }\n        let requestUrl = null;\n        if (this.request) {\n            requestUrl = this.request.url;\n        }\n        let responseBody = null;\n        try {\n            if (this.#body) {\n                responseBody = toUtf8String(this.#body);\n            }\n        }\n        catch (e) { }\n        assert(false, message, \"SERVER_ERROR\", {\n            request: (this.request || \"unknown request\"), response: this, error,\n            info: {\n                requestUrl, responseBody,\n                responseStatus: `${this.statusCode} ${this.statusMessage}`\n            }\n        });\n    }\n}\nfunction getTime() { return (new Date()).getTime(); }\nfunction unpercent(value) {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\nfunction wait(delay) {\n    return new Promise((resolve) => setTimeout(resolve, delay));\n}\n//# sourceMappingURL=fetch.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}