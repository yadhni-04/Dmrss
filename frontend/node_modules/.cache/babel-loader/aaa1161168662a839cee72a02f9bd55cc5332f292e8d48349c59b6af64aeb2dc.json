{"ast":null,"code":"/**\n *  A **Network** encapsulates the various properties required to\n *  interact with a specific chain.\n *\n *  @_subsection: api/providers:Networks  [networks]\n */\nimport { accessListify } from \"../transaction/index.js\";\nimport { getBigInt, assert, assertArgument } from \"../utils/index.js\";\nimport { EnsPlugin, FetchUrlFeeDataNetworkPlugin, GasCostPlugin } from \"./plugins-network.js\";\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/\nconst Networks = new Map();\n/**\n *  A **Network** provides access to a chain's properties and allows\n *  for plug-ins to extend functionality.\n */\nexport class Network {\n  #name;\n  #chainId;\n  #plugins;\n  /**\n   *  Creates a new **Network** for %%name%% and %%chainId%%.\n   */\n  constructor(name, chainId) {\n    this.#name = name;\n    this.#chainId = getBigInt(chainId);\n    this.#plugins = new Map();\n  }\n  /**\n   *  Returns a JSON-compatible representation of a Network.\n   */\n  toJSON() {\n    return {\n      name: this.name,\n      chainId: String(this.chainId)\n    };\n  }\n  /**\n   *  The network common name.\n   *\n   *  This is the canonical name, as networks migh have multiple\n   *  names.\n   */\n  get name() {\n    return this.#name;\n  }\n  set name(value) {\n    this.#name = value;\n  }\n  /**\n   *  The network chain ID.\n   */\n  get chainId() {\n    return this.#chainId;\n  }\n  set chainId(value) {\n    this.#chainId = getBigInt(value, \"chainId\");\n  }\n  /**\n   *  Returns true if %%other%% matches this network. Any chain ID\n   *  must match, and if no chain ID is present, the name must match.\n   *\n   *  This method does not currently check for additional properties,\n   *  such as ENS address or plug-in compatibility.\n   */\n  matches(other) {\n    if (other == null) {\n      return false;\n    }\n    if (typeof other === \"string\") {\n      try {\n        return this.chainId === getBigInt(other);\n      } catch (error) {}\n      return this.name === other;\n    }\n    if (typeof other === \"number\" || typeof other === \"bigint\") {\n      try {\n        return this.chainId === getBigInt(other);\n      } catch (error) {}\n      return false;\n    }\n    if (typeof other === \"object\") {\n      if (other.chainId != null) {\n        try {\n          return this.chainId === getBigInt(other.chainId);\n        } catch (error) {}\n        return false;\n      }\n      if (other.name != null) {\n        return this.name === other.name;\n      }\n      return false;\n    }\n    return false;\n  }\n  /**\n   *  Returns the list of plugins currently attached to this Network.\n   */\n  get plugins() {\n    return Array.from(this.#plugins.values());\n  }\n  /**\n   *  Attach a new %%plugin%% to this Network. The network name\n   *  must be unique, excluding any fragment.\n   */\n  attachPlugin(plugin) {\n    if (this.#plugins.get(plugin.name)) {\n      throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n    }\n    this.#plugins.set(plugin.name, plugin.clone());\n    return this;\n  }\n  /**\n   *  Return the plugin, if any, matching %%name%% exactly. Plugins\n   *  with fragments will not be returned unless %%name%% includes\n   *  a fragment.\n   */\n  getPlugin(name) {\n    return this.#plugins.get(name) || null;\n  }\n  /**\n   *  Gets a list of all plugins that match %%name%%, with otr without\n   *  a fragment.\n   */\n  getPlugins(basename) {\n    return this.plugins.filter(p => p.name.split(\"#\")[0] === basename);\n  }\n  /**\n   *  Create a copy of this Network.\n   */\n  clone() {\n    const clone = new Network(this.name, this.chainId);\n    this.plugins.forEach(plugin => {\n      clone.attachPlugin(plugin.clone());\n    });\n    return clone;\n  }\n  /**\n   *  Compute the intrinsic gas required for a transaction.\n   *\n   *  A GasCostPlugin can be attached to override the default\n   *  values.\n   */\n  computeIntrinsicGas(tx) {\n    const costs = this.getPlugin(\"org.ethers.plugins.network.GasCost\") || new GasCostPlugin();\n    let gas = costs.txBase;\n    if (tx.to == null) {\n      gas += costs.txCreate;\n    }\n    if (tx.data) {\n      for (let i = 2; i < tx.data.length; i += 2) {\n        if (tx.data.substring(i, i + 2) === \"00\") {\n          gas += costs.txDataZero;\n        } else {\n          gas += costs.txDataNonzero;\n        }\n      }\n    }\n    if (tx.accessList) {\n      const accessList = accessListify(tx.accessList);\n      for (const addr in accessList) {\n        gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n      }\n    }\n    return gas;\n  }\n  /**\n   *  Returns a new Network for the %%network%% name or chainId.\n   */\n  static from(network) {\n    injectCommonNetworks();\n    // Default network\n    if (network == null) {\n      return Network.from(\"mainnet\");\n    }\n    // Canonical name or chain ID\n    if (typeof network === \"number\") {\n      network = BigInt(network);\n    }\n    if (typeof network === \"string\" || typeof network === \"bigint\") {\n      const networkFunc = Networks.get(network);\n      if (networkFunc) {\n        return networkFunc();\n      }\n      if (typeof network === \"bigint\") {\n        return new Network(\"unknown\", network);\n      }\n      assertArgument(false, \"unknown network\", \"network\", network);\n    }\n    // Clonable with network-like abilities\n    if (typeof network.clone === \"function\") {\n      const clone = network.clone();\n      //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n      //}\n      return clone;\n    }\n    // Networkish\n    if (typeof network === \"object\") {\n      assertArgument(typeof network.name === \"string\" && typeof network.chainId === \"number\", \"invalid network object name or chainId\", \"network\", network);\n      const custom = new Network(network.name, network.chainId);\n      if (network.ensAddress || network.ensNetwork != null) {\n        custom.attachPlugin(new EnsPlugin(network.ensAddress, network.ensNetwork));\n      }\n      //if ((<any>network).layerOneConnection) {\n      //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n      //}\n      return custom;\n    }\n    assertArgument(false, \"invalid network\", \"network\", network);\n  }\n  /**\n   *  Register %%nameOrChainId%% with a function which returns\n   *  an instance of a Network representing that chain.\n   */\n  static register(nameOrChainId, networkFunc) {\n    if (typeof nameOrChainId === \"number\") {\n      nameOrChainId = BigInt(nameOrChainId);\n    }\n    const existing = Networks.get(nameOrChainId);\n    if (existing) {\n      assertArgument(false, `conflicting network for ${JSON.stringify(existing.name)}`, \"nameOrChainId\", nameOrChainId);\n    }\n    Networks.set(nameOrChainId, networkFunc);\n  }\n}\n// We don't want to bring in formatUnits because it is backed by\n// FixedNumber and we want to keep Networks tiny. The values\n// included by the Gas Stations are also IEEE 754 with lots of\n// rounding issues and exceed the strict checks formatUnits has.\nfunction parseUnits(_value, decimals) {\n  const value = String(_value);\n  if (!value.match(/^[0-9.]+$/)) {\n    throw new Error(`invalid gwei value: ${_value}`);\n  }\n  // Break into [ whole, fraction ]\n  const comps = value.split(\".\");\n  if (comps.length === 1) {\n    comps.push(\"\");\n  }\n  // More than 1 decimal point or too many fractional positions\n  if (comps.length !== 2) {\n    throw new Error(`invalid gwei value: ${_value}`);\n  }\n  // Pad the fraction to 9 decimalplaces\n  while (comps[1].length < decimals) {\n    comps[1] += \"0\";\n  }\n  // Too many decimals and some non-zero ending, take the ceiling\n  if (comps[1].length > 9) {\n    let frac = BigInt(comps[1].substring(0, 9));\n    if (!comps[1].substring(9).match(/^0+$/)) {\n      frac++;\n    }\n    comps[1] = frac.toString();\n  }\n  return BigInt(comps[0] + comps[1]);\n}\n// Used by Polygon to use a gas station for fee data\nfunction getGasStationPlugin(url) {\n  return new FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {\n    // Prevent Cloudflare from blocking our request in node.js\n    request.setHeader(\"User-Agent\", \"ethers\");\n    let response;\n    try {\n      const [_response, _feeData] = await Promise.all([request.send(), fetchFeeData()]);\n      response = _response;\n      const payload = response.bodyJson.standard;\n      const feeData = {\n        gasPrice: _feeData.gasPrice,\n        maxFeePerGas: parseUnits(payload.maxFee, 9),\n        maxPriorityFeePerGas: parseUnits(payload.maxPriorityFee, 9)\n      };\n      return feeData;\n    } catch (error) {\n      assert(false, `error encountered with polygon gas station (${JSON.stringify(request.url)})`, \"SERVER_ERROR\", {\n        request,\n        response,\n        error\n      });\n    }\n  });\n}\n// See: https://chainlist.org\nlet injected = false;\nfunction injectCommonNetworks() {\n  if (injected) {\n    return;\n  }\n  injected = true;\n  /// Register popular Ethereum networks\n  function registerEth(name, chainId, options) {\n    const func = function () {\n      const network = new Network(name, chainId);\n      // We use 0 to disable ENS\n      if (options.ensNetwork != null) {\n        network.attachPlugin(new EnsPlugin(null, options.ensNetwork));\n      }\n      network.attachPlugin(new GasCostPlugin());\n      (options.plugins || []).forEach(plugin => {\n        network.attachPlugin(plugin);\n      });\n      return network;\n    };\n    // Register the network by name and chain ID\n    Network.register(name, func);\n    Network.register(chainId, func);\n    if (options.altNames) {\n      options.altNames.forEach(name => {\n        Network.register(name, func);\n      });\n    }\n  }\n  registerEth(\"mainnet\", 1, {\n    ensNetwork: 1,\n    altNames: [\"homestead\"]\n  });\n  registerEth(\"ropsten\", 3, {\n    ensNetwork: 3\n  });\n  registerEth(\"rinkeby\", 4, {\n    ensNetwork: 4\n  });\n  registerEth(\"goerli\", 5, {\n    ensNetwork: 5\n  });\n  registerEth(\"kovan\", 42, {\n    ensNetwork: 42\n  });\n  registerEth(\"sepolia\", 11155111, {\n    ensNetwork: 11155111\n  });\n  registerEth(\"holesky\", 17000, {\n    ensNetwork: 17000\n  });\n  registerEth(\"classic\", 61, {});\n  registerEth(\"classicKotti\", 6, {});\n  registerEth(\"arbitrum\", 42161, {\n    ensNetwork: 1\n  });\n  registerEth(\"arbitrum-goerli\", 421613, {});\n  registerEth(\"arbitrum-sepolia\", 421614, {});\n  registerEth(\"base\", 8453, {\n    ensNetwork: 1\n  });\n  registerEth(\"base-goerli\", 84531, {});\n  registerEth(\"base-sepolia\", 84532, {});\n  registerEth(\"bnb\", 56, {\n    ensNetwork: 1\n  });\n  registerEth(\"bnbt\", 97, {});\n  registerEth(\"linea\", 59144, {\n    ensNetwork: 1\n  });\n  registerEth(\"linea-goerli\", 59140, {});\n  registerEth(\"linea-sepolia\", 59141, {});\n  registerEth(\"matic\", 137, {\n    ensNetwork: 1,\n    plugins: [getGasStationPlugin(\"https:/\\/gasstation.polygon.technology/v2\")]\n  });\n  registerEth(\"matic-amoy\", 80002, {});\n  registerEth(\"matic-mumbai\", 80001, {\n    altNames: [\"maticMumbai\", \"maticmum\"],\n    plugins: [getGasStationPlugin(\"https:/\\/gasstation-testnet.polygon.technology/v2\")]\n  });\n  registerEth(\"optimism\", 10, {\n    ensNetwork: 1,\n    plugins: []\n  });\n  registerEth(\"optimism-goerli\", 420, {});\n  registerEth(\"optimism-sepolia\", 11155420, {});\n  registerEth(\"xdai\", 100, {\n    ensNetwork: 1\n  });\n}","map":{"version":3,"names":["accessListify","getBigInt","assert","assertArgument","EnsPlugin","FetchUrlFeeDataNetworkPlugin","GasCostPlugin","Networks","Map","Network","name","chainId","plugins","constructor","toJSON","String","value","matches","other","error","Array","from","values","attachPlugin","plugin","get","Error","set","clone","getPlugin","getPlugins","basename","filter","p","split","forEach","computeIntrinsicGas","tx","costs","gas","txBase","to","txCreate","data","i","length","substring","txDataZero","txDataNonzero","accessList","addr","txAccessListAddress","txAccessListStorageKey","storageKeys","network","injectCommonNetworks","BigInt","networkFunc","custom","ensAddress","ensNetwork","register","nameOrChainId","existing","JSON","stringify","parseUnits","_value","decimals","match","comps","push","frac","toString","getGasStationPlugin","url","fetchFeeData","provider","request","setHeader","response","_response","_feeData","Promise","all","send","payload","bodyJson","standard","feeData","gasPrice","maxFeePerGas","maxFee","maxPriorityFeePerGas","maxPriorityFee","injected","registerEth","options","func","altNames"],"sources":["/Users/yadhnikharkar/Desktop/dmrs-mvp/frontend/node_modules/ethers/lib.esm/providers/network.js"],"sourcesContent":["/**\n *  A **Network** encapsulates the various properties required to\n *  interact with a specific chain.\n *\n *  @_subsection: api/providers:Networks  [networks]\n */\nimport { accessListify } from \"../transaction/index.js\";\nimport { getBigInt, assert, assertArgument } from \"../utils/index.js\";\nimport { EnsPlugin, FetchUrlFeeDataNetworkPlugin, GasCostPlugin } from \"./plugins-network.js\";\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/\nconst Networks = new Map();\n/**\n *  A **Network** provides access to a chain's properties and allows\n *  for plug-ins to extend functionality.\n */\nexport class Network {\n    #name;\n    #chainId;\n    #plugins;\n    /**\n     *  Creates a new **Network** for %%name%% and %%chainId%%.\n     */\n    constructor(name, chainId) {\n        this.#name = name;\n        this.#chainId = getBigInt(chainId);\n        this.#plugins = new Map();\n    }\n    /**\n     *  Returns a JSON-compatible representation of a Network.\n     */\n    toJSON() {\n        return { name: this.name, chainId: String(this.chainId) };\n    }\n    /**\n     *  The network common name.\n     *\n     *  This is the canonical name, as networks migh have multiple\n     *  names.\n     */\n    get name() { return this.#name; }\n    set name(value) { this.#name = value; }\n    /**\n     *  The network chain ID.\n     */\n    get chainId() { return this.#chainId; }\n    set chainId(value) { this.#chainId = getBigInt(value, \"chainId\"); }\n    /**\n     *  Returns true if %%other%% matches this network. Any chain ID\n     *  must match, and if no chain ID is present, the name must match.\n     *\n     *  This method does not currently check for additional properties,\n     *  such as ENS address or plug-in compatibility.\n     */\n    matches(other) {\n        if (other == null) {\n            return false;\n        }\n        if (typeof (other) === \"string\") {\n            try {\n                return (this.chainId === getBigInt(other));\n            }\n            catch (error) { }\n            return (this.name === other);\n        }\n        if (typeof (other) === \"number\" || typeof (other) === \"bigint\") {\n            try {\n                return (this.chainId === getBigInt(other));\n            }\n            catch (error) { }\n            return false;\n        }\n        if (typeof (other) === \"object\") {\n            if (other.chainId != null) {\n                try {\n                    return (this.chainId === getBigInt(other.chainId));\n                }\n                catch (error) { }\n                return false;\n            }\n            if (other.name != null) {\n                return (this.name === other.name);\n            }\n            return false;\n        }\n        return false;\n    }\n    /**\n     *  Returns the list of plugins currently attached to this Network.\n     */\n    get plugins() {\n        return Array.from(this.#plugins.values());\n    }\n    /**\n     *  Attach a new %%plugin%% to this Network. The network name\n     *  must be unique, excluding any fragment.\n     */\n    attachPlugin(plugin) {\n        if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n        }\n        this.#plugins.set(plugin.name, plugin.clone());\n        return this;\n    }\n    /**\n     *  Return the plugin, if any, matching %%name%% exactly. Plugins\n     *  with fragments will not be returned unless %%name%% includes\n     *  a fragment.\n     */\n    getPlugin(name) {\n        return (this.#plugins.get(name)) || null;\n    }\n    /**\n     *  Gets a list of all plugins that match %%name%%, with otr without\n     *  a fragment.\n     */\n    getPlugins(basename) {\n        return (this.plugins.filter((p) => (p.name.split(\"#\")[0] === basename)));\n    }\n    /**\n     *  Create a copy of this Network.\n     */\n    clone() {\n        const clone = new Network(this.name, this.chainId);\n        this.plugins.forEach((plugin) => {\n            clone.attachPlugin(plugin.clone());\n        });\n        return clone;\n    }\n    /**\n     *  Compute the intrinsic gas required for a transaction.\n     *\n     *  A GasCostPlugin can be attached to override the default\n     *  values.\n     */\n    computeIntrinsicGas(tx) {\n        const costs = this.getPlugin(\"org.ethers.plugins.network.GasCost\") || (new GasCostPlugin());\n        let gas = costs.txBase;\n        if (tx.to == null) {\n            gas += costs.txCreate;\n        }\n        if (tx.data) {\n            for (let i = 2; i < tx.data.length; i += 2) {\n                if (tx.data.substring(i, i + 2) === \"00\") {\n                    gas += costs.txDataZero;\n                }\n                else {\n                    gas += costs.txDataNonzero;\n                }\n            }\n        }\n        if (tx.accessList) {\n            const accessList = accessListify(tx.accessList);\n            for (const addr in accessList) {\n                gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n            }\n        }\n        return gas;\n    }\n    /**\n     *  Returns a new Network for the %%network%% name or chainId.\n     */\n    static from(network) {\n        injectCommonNetworks();\n        // Default network\n        if (network == null) {\n            return Network.from(\"mainnet\");\n        }\n        // Canonical name or chain ID\n        if (typeof (network) === \"number\") {\n            network = BigInt(network);\n        }\n        if (typeof (network) === \"string\" || typeof (network) === \"bigint\") {\n            const networkFunc = Networks.get(network);\n            if (networkFunc) {\n                return networkFunc();\n            }\n            if (typeof (network) === \"bigint\") {\n                return new Network(\"unknown\", network);\n            }\n            assertArgument(false, \"unknown network\", \"network\", network);\n        }\n        // Clonable with network-like abilities\n        if (typeof (network.clone) === \"function\") {\n            const clone = network.clone();\n            //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n            //}\n            return clone;\n        }\n        // Networkish\n        if (typeof (network) === \"object\") {\n            assertArgument(typeof (network.name) === \"string\" && typeof (network.chainId) === \"number\", \"invalid network object name or chainId\", \"network\", network);\n            const custom = new Network((network.name), (network.chainId));\n            if (network.ensAddress || network.ensNetwork != null) {\n                custom.attachPlugin(new EnsPlugin(network.ensAddress, network.ensNetwork));\n            }\n            //if ((<any>network).layerOneConnection) {\n            //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n            //}\n            return custom;\n        }\n        assertArgument(false, \"invalid network\", \"network\", network);\n    }\n    /**\n     *  Register %%nameOrChainId%% with a function which returns\n     *  an instance of a Network representing that chain.\n     */\n    static register(nameOrChainId, networkFunc) {\n        if (typeof (nameOrChainId) === \"number\") {\n            nameOrChainId = BigInt(nameOrChainId);\n        }\n        const existing = Networks.get(nameOrChainId);\n        if (existing) {\n            assertArgument(false, `conflicting network for ${JSON.stringify(existing.name)}`, \"nameOrChainId\", nameOrChainId);\n        }\n        Networks.set(nameOrChainId, networkFunc);\n    }\n}\n// We don't want to bring in formatUnits because it is backed by\n// FixedNumber and we want to keep Networks tiny. The values\n// included by the Gas Stations are also IEEE 754 with lots of\n// rounding issues and exceed the strict checks formatUnits has.\nfunction parseUnits(_value, decimals) {\n    const value = String(_value);\n    if (!value.match(/^[0-9.]+$/)) {\n        throw new Error(`invalid gwei value: ${_value}`);\n    }\n    // Break into [ whole, fraction ]\n    const comps = value.split(\".\");\n    if (comps.length === 1) {\n        comps.push(\"\");\n    }\n    // More than 1 decimal point or too many fractional positions\n    if (comps.length !== 2) {\n        throw new Error(`invalid gwei value: ${_value}`);\n    }\n    // Pad the fraction to 9 decimalplaces\n    while (comps[1].length < decimals) {\n        comps[1] += \"0\";\n    }\n    // Too many decimals and some non-zero ending, take the ceiling\n    if (comps[1].length > 9) {\n        let frac = BigInt(comps[1].substring(0, 9));\n        if (!comps[1].substring(9).match(/^0+$/)) {\n            frac++;\n        }\n        comps[1] = frac.toString();\n    }\n    return BigInt(comps[0] + comps[1]);\n}\n// Used by Polygon to use a gas station for fee data\nfunction getGasStationPlugin(url) {\n    return new FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {\n        // Prevent Cloudflare from blocking our request in node.js\n        request.setHeader(\"User-Agent\", \"ethers\");\n        let response;\n        try {\n            const [_response, _feeData] = await Promise.all([\n                request.send(), fetchFeeData()\n            ]);\n            response = _response;\n            const payload = response.bodyJson.standard;\n            const feeData = {\n                gasPrice: _feeData.gasPrice,\n                maxFeePerGas: parseUnits(payload.maxFee, 9),\n                maxPriorityFeePerGas: parseUnits(payload.maxPriorityFee, 9),\n            };\n            return feeData;\n        }\n        catch (error) {\n            assert(false, `error encountered with polygon gas station (${JSON.stringify(request.url)})`, \"SERVER_ERROR\", { request, response, error });\n        }\n    });\n}\n// See: https://chainlist.org\nlet injected = false;\nfunction injectCommonNetworks() {\n    if (injected) {\n        return;\n    }\n    injected = true;\n    /// Register popular Ethereum networks\n    function registerEth(name, chainId, options) {\n        const func = function () {\n            const network = new Network(name, chainId);\n            // We use 0 to disable ENS\n            if (options.ensNetwork != null) {\n                network.attachPlugin(new EnsPlugin(null, options.ensNetwork));\n            }\n            network.attachPlugin(new GasCostPlugin());\n            (options.plugins || []).forEach((plugin) => {\n                network.attachPlugin(plugin);\n            });\n            return network;\n        };\n        // Register the network by name and chain ID\n        Network.register(name, func);\n        Network.register(chainId, func);\n        if (options.altNames) {\n            options.altNames.forEach((name) => {\n                Network.register(name, func);\n            });\n        }\n    }\n    registerEth(\"mainnet\", 1, { ensNetwork: 1, altNames: [\"homestead\"] });\n    registerEth(\"ropsten\", 3, { ensNetwork: 3 });\n    registerEth(\"rinkeby\", 4, { ensNetwork: 4 });\n    registerEth(\"goerli\", 5, { ensNetwork: 5 });\n    registerEth(\"kovan\", 42, { ensNetwork: 42 });\n    registerEth(\"sepolia\", 11155111, { ensNetwork: 11155111 });\n    registerEth(\"holesky\", 17000, { ensNetwork: 17000 });\n    registerEth(\"classic\", 61, {});\n    registerEth(\"classicKotti\", 6, {});\n    registerEth(\"arbitrum\", 42161, {\n        ensNetwork: 1,\n    });\n    registerEth(\"arbitrum-goerli\", 421613, {});\n    registerEth(\"arbitrum-sepolia\", 421614, {});\n    registerEth(\"base\", 8453, { ensNetwork: 1 });\n    registerEth(\"base-goerli\", 84531, {});\n    registerEth(\"base-sepolia\", 84532, {});\n    registerEth(\"bnb\", 56, { ensNetwork: 1 });\n    registerEth(\"bnbt\", 97, {});\n    registerEth(\"linea\", 59144, { ensNetwork: 1 });\n    registerEth(\"linea-goerli\", 59140, {});\n    registerEth(\"linea-sepolia\", 59141, {});\n    registerEth(\"matic\", 137, {\n        ensNetwork: 1,\n        plugins: [\n            getGasStationPlugin(\"https:/\\/gasstation.polygon.technology/v2\")\n        ]\n    });\n    registerEth(\"matic-amoy\", 80002, {});\n    registerEth(\"matic-mumbai\", 80001, {\n        altNames: [\"maticMumbai\", \"maticmum\"],\n        plugins: [\n            getGasStationPlugin(\"https:/\\/gasstation-testnet.polygon.technology/v2\")\n        ]\n    });\n    registerEth(\"optimism\", 10, {\n        ensNetwork: 1,\n        plugins: []\n    });\n    registerEth(\"optimism-goerli\", 420, {});\n    registerEth(\"optimism-sepolia\", 11155420, {});\n    registerEth(\"xdai\", 100, { ensNetwork: 1 });\n}\n//# sourceMappingURL=network.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}