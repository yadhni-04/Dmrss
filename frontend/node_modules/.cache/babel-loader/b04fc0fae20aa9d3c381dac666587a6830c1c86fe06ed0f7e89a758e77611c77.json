{"ast":null,"code":"/**\n *  All errors in ethers include properties to ensure they are both\n *  human-readable (i.e. ``.message``) and machine-readable (i.e. ``.code``).\n *\n *  The [[isError]] function can be used to check the error ``code`` and\n *  provide a type guard for the properties present on that error interface.\n *\n *  @_section: api/utils/errors:Errors  [about-errors]\n */\nimport { version } from \"../_version.js\";\nimport { defineProperties } from \"./properties.js\";\nfunction stringify(value, seen) {\n  if (value == null) {\n    return \"null\";\n  }\n  if (seen == null) {\n    seen = new Set();\n  }\n  if (typeof value === \"object\") {\n    if (seen.has(value)) {\n      return \"[Circular]\";\n    }\n    seen.add(value);\n  }\n  if (Array.isArray(value)) {\n    return \"[ \" + value.map(v => stringify(v, seen)).join(\", \") + \" ]\";\n  }\n  if (value instanceof Uint8Array) {\n    const HEX = \"0123456789abcdef\";\n    let result = \"0x\";\n    for (let i = 0; i < value.length; i++) {\n      result += HEX[value[i] >> 4];\n      result += HEX[value[i] & 0xf];\n    }\n    return result;\n  }\n  if (typeof value === \"object\" && typeof value.toJSON === \"function\") {\n    return stringify(value.toJSON(), seen);\n  }\n  switch (typeof value) {\n    case \"boolean\":\n    case \"number\":\n    case \"symbol\":\n      return value.toString();\n    case \"bigint\":\n      return BigInt(value).toString();\n    case \"string\":\n      return JSON.stringify(value);\n    case \"object\":\n      {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{ \" + keys.map(k => `${stringify(k, seen)}: ${stringify(value[k], seen)}`).join(\", \") + \" }\";\n      }\n  }\n  return `[ COULD NOT SERIALIZE ]`;\n}\n/**\n *  Returns true if the %%error%% matches an error thrown by ethers\n *  that matches the error %%code%%.\n *\n *  In TypeScript environments, this can be used to check that %%error%%\n *  matches an EthersError type, which means the expected properties will\n *  be set.\n *\n *  @See [ErrorCodes](api:ErrorCode)\n *  @example\n *    try {\n *      // code....\n *    } catch (e) {\n *      if (isError(e, \"CALL_EXCEPTION\")) {\n *          // The Type Guard has validated this object\n *          console.log(e.data);\n *      }\n *    }\n */\nexport function isError(error, code) {\n  return error && error.code === code;\n}\n/**\n *  Returns true if %%error%% is a [[CallExceptionError].\n */\nexport function isCallException(error) {\n  return isError(error, \"CALL_EXCEPTION\");\n}\n/**\n *  Returns a new Error configured to the format ethers emits errors, with\n *  the %%message%%, [[api:ErrorCode]] %%code%% and additional properties\n *  for the corresponding EthersError.\n *\n *  Each error in ethers includes the version of ethers, a\n *  machine-readable [[ErrorCode]], and depending on %%code%%, additional\n *  required properties. The error message will also include the %%message%%,\n *  ethers version, %%code%% and all additional properties, serialized.\n */\nexport function makeError(message, code, info) {\n  let shortMessage = message;\n  {\n    const details = [];\n    if (info) {\n      if (\"message\" in info || \"code\" in info || \"name\" in info) {\n        throw new Error(`value will overwrite populated values: ${stringify(info)}`);\n      }\n      for (const key in info) {\n        if (key === \"shortMessage\") {\n          continue;\n        }\n        const value = info[key];\n        //                try {\n        details.push(key + \"=\" + stringify(value));\n        //                } catch (error: any) {\n        //                console.log(\"MMM\", error.message);\n        //                    details.push(key + \"=[could not serialize object]\");\n        //                }\n      }\n    }\n    details.push(`code=${code}`);\n    details.push(`version=${version}`);\n    if (details.length) {\n      message += \" (\" + details.join(\", \") + \")\";\n    }\n  }\n  let error;\n  switch (code) {\n    case \"INVALID_ARGUMENT\":\n      error = new TypeError(message);\n      break;\n    case \"NUMERIC_FAULT\":\n    case \"BUFFER_OVERRUN\":\n      error = new RangeError(message);\n      break;\n    default:\n      error = new Error(message);\n  }\n  defineProperties(error, {\n    code\n  });\n  if (info) {\n    Object.assign(error, info);\n  }\n  if (error.shortMessage == null) {\n    defineProperties(error, {\n      shortMessage\n    });\n  }\n  return error;\n}\n/**\n *  Throws an EthersError with %%message%%, %%code%% and additional error\n *  %%info%% when %%check%% is falsish..\n *\n *  @see [[api:makeError]]\n */\nexport function assert(check, message, code, info) {\n  if (!check) {\n    throw makeError(message, code, info);\n  }\n}\n/**\n *  A simple helper to simply ensuring provided arguments match expected\n *  constraints, throwing if not.\n *\n *  In TypeScript environments, the %%check%% has been asserted true, so\n *  any further code does not need additional compile-time checks.\n */\nexport function assertArgument(check, message, name, value) {\n  assert(check, message, \"INVALID_ARGUMENT\", {\n    argument: name,\n    value: value\n  });\n}\nexport function assertArgumentCount(count, expectedCount, message) {\n  if (message == null) {\n    message = \"\";\n  }\n  if (message) {\n    message = \": \" + message;\n  }\n  assert(count >= expectedCount, \"missing argument\" + message, \"MISSING_ARGUMENT\", {\n    count: count,\n    expectedCount: expectedCount\n  });\n  assert(count <= expectedCount, \"too many arguments\" + message, \"UNEXPECTED_ARGUMENT\", {\n    count: count,\n    expectedCount: expectedCount\n  });\n}\nconst _normalizeForms = [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].reduce((accum, form) => {\n  try {\n    // General test for normalize\n    /* c8 ignore start */\n    if (\"test\".normalize(form) !== \"test\") {\n      throw new Error(\"bad\");\n    }\n    ;\n    /* c8 ignore stop */\n    if (form === \"NFD\") {\n      const check = String.fromCharCode(0xe9).normalize(\"NFD\");\n      const expected = String.fromCharCode(0x65, 0x0301);\n      /* c8 ignore start */\n      if (check !== expected) {\n        throw new Error(\"broken\");\n      }\n      /* c8 ignore stop */\n    }\n    accum.push(form);\n  } catch (error) {}\n  return accum;\n}, []);\n/**\n *  Throws if the normalization %%form%% is not supported.\n */\nexport function assertNormalize(form) {\n  assert(_normalizeForms.indexOf(form) >= 0, \"platform missing String.prototype.normalize\", \"UNSUPPORTED_OPERATION\", {\n    operation: \"String.prototype.normalize\",\n    info: {\n      form\n    }\n  });\n}\n/**\n *  Many classes use file-scoped values to guard the constructor,\n *  making it effectively private. This facilitates that pattern\n *  by ensuring the %%givenGaurd%% matches the file-scoped %%guard%%,\n *  throwing if not, indicating the %%className%% if provided.\n */\nexport function assertPrivate(givenGuard, guard, className) {\n  if (className == null) {\n    className = \"\";\n  }\n  if (givenGuard !== guard) {\n    let method = className,\n      operation = \"new\";\n    if (className) {\n      method += \".\";\n      operation += \" \" + className;\n    }\n    assert(false, `private constructor; use ${method}from* methods`, \"UNSUPPORTED_OPERATION\", {\n      operation\n    });\n  }\n}","map":{"version":3,"names":["version","defineProperties","stringify","value","seen","Set","has","add","Array","isArray","map","v","join","Uint8Array","HEX","result","i","length","toJSON","toString","BigInt","JSON","keys","Object","sort","k","isError","error","code","isCallException","makeError","message","info","shortMessage","details","Error","key","push","TypeError","RangeError","assign","assert","check","assertArgument","name","argument","assertArgumentCount","count","expectedCount","_normalizeForms","reduce","accum","form","normalize","String","fromCharCode","expected","assertNormalize","indexOf","operation","assertPrivate","givenGuard","guard","className","method"],"sources":["../../src.ts/utils/errors.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}