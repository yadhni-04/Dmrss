{"ast":null,"code":"/**\n *  Using strings in Ethereum (or any security-basd system) requires\n *  additional care. These utilities attempt to mitigate some of the\n *  safety issues as well as provide the ability to recover and analyse\n *  strings.\n *\n *  @_subsection api/utils:Strings and UTF-8  [about-strings]\n */\nimport { getBytes } from \"./data.js\";\nimport { assertArgument, assertNormalize } from \"./errors.js\";\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n  assertArgument(false, `invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n  // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n  if (reason === \"BAD_PREFIX\" || reason === \"UNEXPECTED_CONTINUE\") {\n    let i = 0;\n    for (let o = offset + 1; o < bytes.length; o++) {\n      if (bytes[o] >> 6 !== 0x02) {\n        break;\n      }\n      i++;\n    }\n    return i;\n  }\n  // This byte runs us past the end of the string, so just jump to the end\n  // (but the first byte was read already read and therefore skipped)\n  if (reason === \"OVERRUN\") {\n    return bytes.length - offset - 1;\n  }\n  // Nothing to skip\n  return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n  // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n  if (reason === \"OVERLONG\") {\n    assertArgument(typeof badCodepoint === \"number\", \"invalid bad code point for replacement\", \"badCodepoint\", badCodepoint);\n    output.push(badCodepoint);\n    return 0;\n  }\n  // Put the replacement character into the output\n  output.push(0xfffd);\n  // Otherwise, process as if ignoring errors\n  return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n/**\n *  A handful of popular, built-in UTF-8 error handling strategies.\n *\n *  **``\"error\"``** - throws on ANY illegal UTF-8 sequence or\n *  non-canonical (overlong) codepoints (this is the default)\n *\n *  **``\"ignore\"``** - silently drops any illegal UTF-8 sequence\n *  and accepts non-canonical (overlong) codepoints\n *\n *  **``\"replace\"``** - replace any illegal UTF-8 sequence with the\n *  UTF-8 replacement character (i.e. ``\"\\\\ufffd\"``) and accepts\n *  non-canonical (overlong) codepoints\n *\n *  @returns: Record<\"error\" | \"ignore\" | \"replace\", Utf8ErrorFunc>\n */\nexport const Utf8ErrorFuncs = Object.freeze({\n  error: errorFunc,\n  ignore: ignoreFunc,\n  replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(_bytes, onError) {\n  if (onError == null) {\n    onError = Utf8ErrorFuncs.error;\n  }\n  const bytes = getBytes(_bytes, \"bytes\");\n  const result = [];\n  let i = 0;\n  // Invalid bytes are ignored\n  while (i < bytes.length) {\n    const c = bytes[i++];\n    // 0xxx xxxx\n    if (c >> 7 === 0) {\n      result.push(c);\n      continue;\n    }\n    // Multibyte; how many bytes left for this character?\n    let extraLength = null;\n    let overlongMask = null;\n    // 110x xxxx 10xx xxxx\n    if ((c & 0xe0) === 0xc0) {\n      extraLength = 1;\n      overlongMask = 0x7f;\n      // 1110 xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf0) === 0xe0) {\n      extraLength = 2;\n      overlongMask = 0x7ff;\n      // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf8) === 0xf0) {\n      extraLength = 3;\n      overlongMask = 0xffff;\n    } else {\n      if ((c & 0xc0) === 0x80) {\n        i += onError(\"UNEXPECTED_CONTINUE\", i - 1, bytes, result);\n      } else {\n        i += onError(\"BAD_PREFIX\", i - 1, bytes, result);\n      }\n      continue;\n    }\n    // Do we have enough bytes in our data?\n    if (i - 1 + extraLength >= bytes.length) {\n      i += onError(\"OVERRUN\", i - 1, bytes, result);\n      continue;\n    }\n    // Remove the length prefix from the char\n    let res = c & (1 << 8 - extraLength - 1) - 1;\n    for (let j = 0; j < extraLength; j++) {\n      let nextChar = bytes[i];\n      // Invalid continuation byte\n      if ((nextChar & 0xc0) != 0x80) {\n        i += onError(\"MISSING_CONTINUE\", i, bytes, result);\n        res = null;\n        break;\n      }\n      ;\n      res = res << 6 | nextChar & 0x3f;\n      i++;\n    }\n    // See above loop for invalid continuation byte\n    if (res === null) {\n      continue;\n    }\n    // Maximum code point\n    if (res > 0x10ffff) {\n      i += onError(\"OUT_OF_RANGE\", i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n    // Reserved for UTF-16 surrogate halves\n    if (res >= 0xd800 && res <= 0xdfff) {\n      i += onError(\"UTF16_SURROGATE\", i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n    // Check for overlong sequences (more bytes than needed)\n    if (res <= overlongMask) {\n      i += onError(\"OVERLONG\", i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n    result.push(res);\n  }\n  return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n/**\n *  Returns the UTF-8 byte representation of %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */\nexport function toUtf8Bytes(str, form) {\n  assertArgument(typeof str === \"string\", \"invalid string value\", \"str\", str);\n  if (form != null) {\n    assertNormalize(form);\n    str = str.normalize(form);\n  }\n  let result = [];\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 0x80) {\n      result.push(c);\n    } else if (c < 0x800) {\n      result.push(c >> 6 | 0xc0);\n      result.push(c & 0x3f | 0x80);\n    } else if ((c & 0xfc00) == 0xd800) {\n      i++;\n      const c2 = str.charCodeAt(i);\n      assertArgument(i < str.length && (c2 & 0xfc00) === 0xdc00, \"invalid surrogate pair\", \"str\", str);\n      // Surrogate Pair\n      const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n      result.push(pair >> 18 | 0xf0);\n      result.push(pair >> 12 & 0x3f | 0x80);\n      result.push(pair >> 6 & 0x3f | 0x80);\n      result.push(pair & 0x3f | 0x80);\n    } else {\n      result.push(c >> 12 | 0xe0);\n      result.push(c >> 6 & 0x3f | 0x80);\n      result.push(c & 0x3f | 0x80);\n    }\n  }\n  return new Uint8Array(result);\n}\n;\n//export \nfunction _toUtf8String(codePoints) {\n  return codePoints.map(codePoint => {\n    if (codePoint <= 0xffff) {\n      return String.fromCharCode(codePoint);\n    }\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);\n  }).join(\"\");\n}\n/**\n *  Returns the string represented by the UTF-8 data %%bytes%%.\n *\n *  When %%onError%% function is specified, it is called on UTF-8\n *  errors allowing recovery using the [[Utf8ErrorFunc]] API.\n *  (default: [error](Utf8ErrorFuncs))\n */\nexport function toUtf8String(bytes, onError) {\n  return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\n/**\n *  Returns the UTF-8 code-points for %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */\nexport function toUtf8CodePoints(str, form) {\n  return getUtf8CodePoints(toUtf8Bytes(str, form));\n}","map":{"version":3,"names":["getBytes","assertArgument","assertNormalize","errorFunc","reason","offset","bytes","output","badCodepoint","ignoreFunc","i","o","length","replaceFunc","push","Utf8ErrorFuncs","Object","freeze","error","ignore","replace","getUtf8CodePoints","_bytes","onError","result","c","extraLength","overlongMask","res","j","nextChar","toUtf8Bytes","str","form","normalize","charCodeAt","c2","pair","Uint8Array","_toUtf8String","codePoints","map","codePoint","String","fromCharCode","join","toUtf8String","toUtf8CodePoints"],"sources":["/Users/yadhnikharkar/Desktop/dmrs-mvp/frontend/node_modules/ethers/lib.esm/utils/utf8.js"],"sourcesContent":["/**\n *  Using strings in Ethereum (or any security-basd system) requires\n *  additional care. These utilities attempt to mitigate some of the\n *  safety issues as well as provide the ability to recover and analyse\n *  strings.\n *\n *  @_subsection api/utils:Strings and UTF-8  [about-strings]\n */\nimport { getBytes } from \"./data.js\";\nimport { assertArgument, assertNormalize } from \"./errors.js\";\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n    assertArgument(false, `invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === \"BAD_PREFIX\" || reason === \"UNEXPECTED_CONTINUE\") {\n        let i = 0;\n        for (let o = offset + 1; o < bytes.length; o++) {\n            if (bytes[o] >> 6 !== 0x02) {\n                break;\n            }\n            i++;\n        }\n        return i;\n    }\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === \"OVERRUN\") {\n        return bytes.length - offset - 1;\n    }\n    // Nothing to skip\n    return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === \"OVERLONG\") {\n        assertArgument(typeof (badCodepoint) === \"number\", \"invalid bad code point for replacement\", \"badCodepoint\", badCodepoint);\n        output.push(badCodepoint);\n        return 0;\n    }\n    // Put the replacement character into the output\n    output.push(0xfffd);\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n/**\n *  A handful of popular, built-in UTF-8 error handling strategies.\n *\n *  **``\"error\"``** - throws on ANY illegal UTF-8 sequence or\n *  non-canonical (overlong) codepoints (this is the default)\n *\n *  **``\"ignore\"``** - silently drops any illegal UTF-8 sequence\n *  and accepts non-canonical (overlong) codepoints\n *\n *  **``\"replace\"``** - replace any illegal UTF-8 sequence with the\n *  UTF-8 replacement character (i.e. ``\"\\\\ufffd\"``) and accepts\n *  non-canonical (overlong) codepoints\n *\n *  @returns: Record<\"error\" | \"ignore\" | \"replace\", Utf8ErrorFunc>\n */\nexport const Utf8ErrorFuncs = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(_bytes, onError) {\n    if (onError == null) {\n        onError = Utf8ErrorFuncs.error;\n    }\n    const bytes = getBytes(_bytes, \"bytes\");\n    const result = [];\n    let i = 0;\n    // Invalid bytes are ignored\n    while (i < bytes.length) {\n        const c = bytes[i++];\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n        // Multibyte; how many bytes left for this character?\n        let extraLength = null;\n        let overlongMask = null;\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n            // 1110 xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n        }\n        else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(\"UNEXPECTED_CONTINUE\", i - 1, bytes, result);\n            }\n            else {\n                i += onError(\"BAD_PREFIX\", i - 1, bytes, result);\n            }\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes.length) {\n            i += onError(\"OVERRUN\", i - 1, bytes, result);\n            continue;\n        }\n        // Remove the length prefix from the char\n        let res = c & ((1 << (8 - extraLength - 1)) - 1);\n        for (let j = 0; j < extraLength; j++) {\n            let nextChar = bytes[i];\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(\"MISSING_CONTINUE\", i, bytes, result);\n                res = null;\n                break;\n            }\n            ;\n            res = (res << 6) | (nextChar & 0x3f);\n            i++;\n        }\n        // See above loop for invalid continuation byte\n        if (res === null) {\n            continue;\n        }\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(\"OUT_OF_RANGE\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(\"UTF16_SURROGATE\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(\"OVERLONG\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        result.push(res);\n    }\n    return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n/**\n *  Returns the UTF-8 byte representation of %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */\nexport function toUtf8Bytes(str, form) {\n    assertArgument(typeof (str) === \"string\", \"invalid string value\", \"str\", str);\n    if (form != null) {\n        assertNormalize(form);\n        str = str.normalize(form);\n    }\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charCodeAt(i);\n        if (c < 0x80) {\n            result.push(c);\n        }\n        else if (c < 0x800) {\n            result.push((c >> 6) | 0xc0);\n            result.push((c & 0x3f) | 0x80);\n        }\n        else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n            assertArgument(i < str.length && ((c2 & 0xfc00) === 0xdc00), \"invalid surrogate pair\", \"str\", str);\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push((pair >> 18) | 0xf0);\n            result.push(((pair >> 12) & 0x3f) | 0x80);\n            result.push(((pair >> 6) & 0x3f) | 0x80);\n            result.push((pair & 0x3f) | 0x80);\n        }\n        else {\n            result.push((c >> 12) | 0xe0);\n            result.push(((c >> 6) & 0x3f) | 0x80);\n            result.push((c & 0x3f) | 0x80);\n        }\n    }\n    return new Uint8Array(result);\n}\n;\n//export \nfunction _toUtf8String(codePoints) {\n    return codePoints.map((codePoint) => {\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));\n    }).join(\"\");\n}\n/**\n *  Returns the string represented by the UTF-8 data %%bytes%%.\n *\n *  When %%onError%% function is specified, it is called on UTF-8\n *  errors allowing recovery using the [[Utf8ErrorFunc]] API.\n *  (default: [error](Utf8ErrorFuncs))\n */\nexport function toUtf8String(bytes, onError) {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\n/**\n *  Returns the UTF-8 code-points for %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */\nexport function toUtf8CodePoints(str, form) {\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n}\n//# sourceMappingURL=utf8.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}