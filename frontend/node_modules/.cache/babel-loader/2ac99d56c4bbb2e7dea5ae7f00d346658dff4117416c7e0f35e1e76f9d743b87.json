{"ast":null,"code":"/**\n *  A fragment is a single item from an ABI, which may represent any of:\n *\n *  - [Functions](FunctionFragment)\n *  - [Events](EventFragment)\n *  - [Constructors](ConstructorFragment)\n *  - Custom [Errors](ErrorFragment)\n *  - [Fallback or Receive](FallbackFragment) functions\n *\n *  @_subsection api/abi/abi-coder:Fragments  [about-fragments]\n */\nimport { defineProperties, getBigInt, getNumber, assert, assertPrivate, assertArgument } from \"../utils/index.js\";\nimport { id } from \"../hash/index.js\";\n;\n// [ \"a\", \"b\" ] => { \"a\": 1, \"b\": 1 }\nfunction setify(items) {\n  const result = new Set();\n  items.forEach(k => result.add(k));\n  return Object.freeze(result);\n}\nconst _kwVisibDeploy = \"external public payable override\";\nconst KwVisibDeploy = setify(_kwVisibDeploy.split(\" \"));\n// Visibility Keywords\nconst _kwVisib = \"constant external internal payable private public pure view override\";\nconst KwVisib = setify(_kwVisib.split(\" \"));\nconst _kwTypes = \"constructor error event fallback function receive struct\";\nconst KwTypes = setify(_kwTypes.split(\" \"));\nconst _kwModifiers = \"calldata memory storage payable indexed\";\nconst KwModifiers = setify(_kwModifiers.split(\" \"));\nconst _kwOther = \"tuple returns\";\n// All Keywords\nconst _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(\" \");\nconst Keywords = setify(_keywords.split(\" \"));\n// Single character tokens\nconst SimpleTokens = {\n  \"(\": \"OPEN_PAREN\",\n  \")\": \"CLOSE_PAREN\",\n  \"[\": \"OPEN_BRACKET\",\n  \"]\": \"CLOSE_BRACKET\",\n  \",\": \"COMMA\",\n  \"@\": \"AT\"\n};\n// Parser regexes to consume the next token\nconst regexWhitespacePrefix = new RegExp(\"^(\\\\s*)\");\nconst regexNumberPrefix = new RegExp(\"^([0-9]+)\");\nconst regexIdPrefix = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)\");\n// Parser regexs to check validity\nconst regexId = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)$\");\nconst regexType = new RegExp(\"^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$\");\nclass TokenString {\n  #offset;\n  #tokens;\n  get offset() {\n    return this.#offset;\n  }\n  get length() {\n    return this.#tokens.length - this.#offset;\n  }\n  constructor(tokens) {\n    this.#offset = 0;\n    this.#tokens = tokens.slice();\n  }\n  clone() {\n    return new TokenString(this.#tokens);\n  }\n  reset() {\n    this.#offset = 0;\n  }\n  #subTokenString(from = 0, to = 0) {\n    return new TokenString(this.#tokens.slice(from, to).map(t => {\n      return Object.freeze(Object.assign({}, t, {\n        match: t.match - from,\n        linkBack: t.linkBack - from,\n        linkNext: t.linkNext - from\n      }));\n    }));\n  }\n  // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens\n  popKeyword(allowed) {\n    const top = this.peek();\n    if (top.type !== \"KEYWORD\" || !allowed.has(top.text)) {\n      throw new Error(`expected keyword ${top.text}`);\n    }\n    return this.pop().text;\n  }\n  // Pops and returns the value of the next token if it is `type`; throws if out of tokens\n  popType(type) {\n    if (this.peek().type !== type) {\n      const top = this.peek();\n      throw new Error(`expected ${type}; got ${top.type} ${JSON.stringify(top.text)}`);\n    }\n    return this.pop().text;\n  }\n  // Pops and returns a \"(\" TOKENS \")\"\n  popParen() {\n    const top = this.peek();\n    if (top.type !== \"OPEN_PAREN\") {\n      throw new Error(\"bad start\");\n    }\n    const result = this.#subTokenString(this.#offset + 1, top.match + 1);\n    this.#offset = top.match + 1;\n    return result;\n  }\n  // Pops and returns the items within \"(\" ITEM1 \",\" ITEM2 \",\" ... \")\"\n  popParams() {\n    const top = this.peek();\n    if (top.type !== \"OPEN_PAREN\") {\n      throw new Error(\"bad start\");\n    }\n    const result = [];\n    while (this.#offset < top.match - 1) {\n      const link = this.peek().linkNext;\n      result.push(this.#subTokenString(this.#offset + 1, link));\n      this.#offset = link;\n    }\n    this.#offset = top.match + 1;\n    return result;\n  }\n  // Returns the top Token, throwing if out of tokens\n  peek() {\n    if (this.#offset >= this.#tokens.length) {\n      throw new Error(\"out-of-bounds\");\n    }\n    return this.#tokens[this.#offset];\n  }\n  // Returns the next value, if it is a keyword in `allowed`\n  peekKeyword(allowed) {\n    const top = this.peekType(\"KEYWORD\");\n    return top != null && allowed.has(top) ? top : null;\n  }\n  // Returns the value of the next token if it is `type`\n  peekType(type) {\n    if (this.length === 0) {\n      return null;\n    }\n    const top = this.peek();\n    return top.type === type ? top.text : null;\n  }\n  // Returns the next token; throws if out of tokens\n  pop() {\n    const result = this.peek();\n    this.#offset++;\n    return result;\n  }\n  toString() {\n    const tokens = [];\n    for (let i = this.#offset; i < this.#tokens.length; i++) {\n      const token = this.#tokens[i];\n      tokens.push(`${token.type}:${token.text}`);\n    }\n    return `<TokenString ${tokens.join(\" \")}>`;\n  }\n}\nfunction lex(text) {\n  const tokens = [];\n  const throwError = message => {\n    const token = offset < text.length ? JSON.stringify(text[offset]) : \"$EOI\";\n    throw new Error(`invalid token ${token} at ${offset}: ${message}`);\n  };\n  let brackets = [];\n  let commas = [];\n  let offset = 0;\n  while (offset < text.length) {\n    // Strip off any leading whitespace\n    let cur = text.substring(offset);\n    let match = cur.match(regexWhitespacePrefix);\n    if (match) {\n      offset += match[1].length;\n      cur = text.substring(offset);\n    }\n    const token = {\n      depth: brackets.length,\n      linkBack: -1,\n      linkNext: -1,\n      match: -1,\n      type: \"\",\n      text: \"\",\n      offset,\n      value: -1\n    };\n    tokens.push(token);\n    let type = SimpleTokens[cur[0]] || \"\";\n    if (type) {\n      token.type = type;\n      token.text = cur[0];\n      offset++;\n      if (type === \"OPEN_PAREN\") {\n        brackets.push(tokens.length - 1);\n        commas.push(tokens.length - 1);\n      } else if (type == \"CLOSE_PAREN\") {\n        if (brackets.length === 0) {\n          throwError(\"no matching open bracket\");\n        }\n        token.match = brackets.pop();\n        tokens[token.match].match = tokens.length - 1;\n        token.depth--;\n        token.linkBack = commas.pop();\n        tokens[token.linkBack].linkNext = tokens.length - 1;\n      } else if (type === \"COMMA\") {\n        token.linkBack = commas.pop();\n        tokens[token.linkBack].linkNext = tokens.length - 1;\n        commas.push(tokens.length - 1);\n      } else if (type === \"OPEN_BRACKET\") {\n        token.type = \"BRACKET\";\n      } else if (type === \"CLOSE_BRACKET\") {\n        // Remove the CLOSE_BRACKET\n        let suffix = tokens.pop().text;\n        if (tokens.length > 0 && tokens[tokens.length - 1].type === \"NUMBER\") {\n          const value = tokens.pop().text;\n          suffix = value + suffix;\n          tokens[tokens.length - 1].value = getNumber(value);\n        }\n        if (tokens.length === 0 || tokens[tokens.length - 1].type !== \"BRACKET\") {\n          throw new Error(\"missing opening bracket\");\n        }\n        tokens[tokens.length - 1].text += suffix;\n      }\n      continue;\n    }\n    match = cur.match(regexIdPrefix);\n    if (match) {\n      token.text = match[1];\n      offset += token.text.length;\n      if (Keywords.has(token.text)) {\n        token.type = \"KEYWORD\";\n        continue;\n      }\n      if (token.text.match(regexType)) {\n        token.type = \"TYPE\";\n        continue;\n      }\n      token.type = \"ID\";\n      continue;\n    }\n    match = cur.match(regexNumberPrefix);\n    if (match) {\n      token.text = match[1];\n      token.type = \"NUMBER\";\n      offset += token.text.length;\n      continue;\n    }\n    throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);\n  }\n  return new TokenString(tokens.map(t => Object.freeze(t)));\n}\n// Check only one of `allowed` is in `set`\nfunction allowSingle(set, allowed) {\n  let included = [];\n  for (const key in allowed.keys()) {\n    if (set.has(key)) {\n      included.push(key);\n    }\n  }\n  if (included.length > 1) {\n    throw new Error(`conflicting types: ${included.join(\", \")}`);\n  }\n}\n// Functions to process a Solidity Signature TokenString from left-to-right for...\n// ...the name with an optional type, returning the name\nfunction consumeName(type, tokens) {\n  if (tokens.peekKeyword(KwTypes)) {\n    const keyword = tokens.pop().text;\n    if (keyword !== type) {\n      throw new Error(`expected ${type}, got ${keyword}`);\n    }\n  }\n  return tokens.popType(\"ID\");\n}\n// ...all keywords matching allowed, returning the keywords\nfunction consumeKeywords(tokens, allowed) {\n  const keywords = new Set();\n  while (true) {\n    const keyword = tokens.peekType(\"KEYWORD\");\n    if (keyword == null || allowed && !allowed.has(keyword)) {\n      break;\n    }\n    tokens.pop();\n    if (keywords.has(keyword)) {\n      throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);\n    }\n    keywords.add(keyword);\n  }\n  return Object.freeze(keywords);\n}\n// ...all visibility keywords, returning the coalesced mutability\nfunction consumeMutability(tokens) {\n  let modifiers = consumeKeywords(tokens, KwVisib);\n  // Detect conflicting modifiers\n  allowSingle(modifiers, setify(\"constant payable nonpayable\".split(\" \")));\n  allowSingle(modifiers, setify(\"pure view payable nonpayable\".split(\" \")));\n  // Process mutability states\n  if (modifiers.has(\"view\")) {\n    return \"view\";\n  }\n  if (modifiers.has(\"pure\")) {\n    return \"pure\";\n  }\n  if (modifiers.has(\"payable\")) {\n    return \"payable\";\n  }\n  if (modifiers.has(\"nonpayable\")) {\n    return \"nonpayable\";\n  }\n  // Process legacy `constant` last\n  if (modifiers.has(\"constant\")) {\n    return \"view\";\n  }\n  return \"nonpayable\";\n}\n// ...a parameter list, returning the ParamType list\nfunction consumeParams(tokens, allowIndexed) {\n  return tokens.popParams().map(t => ParamType.from(t, allowIndexed));\n}\n// ...a gas limit, returning a BigNumber or null if none\nfunction consumeGas(tokens) {\n  if (tokens.peekType(\"AT\")) {\n    tokens.pop();\n    if (tokens.peekType(\"NUMBER\")) {\n      return getBigInt(tokens.pop().text);\n    }\n    throw new Error(\"invalid gas\");\n  }\n  return null;\n}\nfunction consumeEoi(tokens) {\n  if (tokens.length) {\n    throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);\n  }\n}\nconst regexArrayType = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nfunction verifyBasicType(type) {\n  const match = type.match(regexType);\n  assertArgument(match, \"invalid type\", \"type\", type);\n  if (type === \"uint\") {\n    return \"uint256\";\n  }\n  if (type === \"int\") {\n    return \"int256\";\n  }\n  if (match[2]) {\n    // bytesXX\n    const length = parseInt(match[2]);\n    assertArgument(length !== 0 && length <= 32, \"invalid bytes length\", \"type\", type);\n  } else if (match[3]) {\n    // intXX or uintXX\n    const size = parseInt(match[3]);\n    assertArgument(size !== 0 && size <= 256 && size % 8 === 0, \"invalid numeric width\", \"type\", type);\n  }\n  return type;\n}\n// Make the Fragment constructors effectively private\nconst _guard = {};\nconst internal = Symbol.for(\"_ethers_internal\");\nconst ParamTypeInternal = \"_ParamTypeInternal\";\nconst ErrorFragmentInternal = \"_ErrorInternal\";\nconst EventFragmentInternal = \"_EventInternal\";\nconst ConstructorFragmentInternal = \"_ConstructorInternal\";\nconst FallbackFragmentInternal = \"_FallbackInternal\";\nconst FunctionFragmentInternal = \"_FunctionInternal\";\nconst StructFragmentInternal = \"_StructInternal\";\n/**\n *  Each input and output of a [[Fragment]] is an Array of **ParamType**.\n */\nexport class ParamType {\n  /**\n   *  The local name of the parameter (or ``\"\"`` if unbound)\n   */\n  name;\n  /**\n   *  The fully qualified type (e.g. ``\"address\"``, ``\"tuple(address)\"``,\n   *  ``\"uint256[3][]\"``)\n   */\n  type;\n  /**\n   *  The base type (e.g. ``\"address\"``, ``\"tuple\"``, ``\"array\"``)\n   */\n  baseType;\n  /**\n   *  True if the parameters is indexed.\n   *\n   *  For non-indexable types this is ``null``.\n   */\n  indexed;\n  /**\n   *  The components for the tuple.\n   *\n   *  For non-tuple types this is ``null``.\n   */\n  components;\n  /**\n   *  The array length, or ``-1`` for dynamic-lengthed arrays.\n   *\n   *  For non-array types this is ``null``.\n   */\n  arrayLength;\n  /**\n   *  The type of each child in the array.\n   *\n   *  For non-array types this is ``null``.\n   */\n  arrayChildren;\n  /**\n   *  @private\n   */\n  constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {\n    assertPrivate(guard, _guard, \"ParamType\");\n    Object.defineProperty(this, internal, {\n      value: ParamTypeInternal\n    });\n    if (components) {\n      components = Object.freeze(components.slice());\n    }\n    if (baseType === \"array\") {\n      if (arrayLength == null || arrayChildren == null) {\n        throw new Error(\"\");\n      }\n    } else if (arrayLength != null || arrayChildren != null) {\n      throw new Error(\"\");\n    }\n    if (baseType === \"tuple\") {\n      if (components == null) {\n        throw new Error(\"\");\n      }\n    } else if (components != null) {\n      throw new Error(\"\");\n    }\n    defineProperties(this, {\n      name,\n      type,\n      baseType,\n      indexed,\n      components,\n      arrayLength,\n      arrayChildren\n    });\n  }\n  /**\n   *  Return a string representation of this type.\n   *\n   *  For example,\n   *\n   *  ``sighash\" => \"(uint256,address)\"``\n   *\n   *  ``\"minimal\" => \"tuple(uint256,address) indexed\"``\n   *\n   *  ``\"full\" => \"tuple(uint256 foo, address bar) indexed baz\"``\n   */\n  format(format) {\n    if (format == null) {\n      format = \"sighash\";\n    }\n    if (format === \"json\") {\n      const name = this.name || \"\";\n      if (this.isArray()) {\n        const result = JSON.parse(this.arrayChildren.format(\"json\"));\n        result.name = name;\n        result.type += `[${this.arrayLength < 0 ? \"\" : String(this.arrayLength)}]`;\n        return JSON.stringify(result);\n      }\n      const result = {\n        type: this.baseType === \"tuple\" ? \"tuple\" : this.type,\n        name\n      };\n      if (typeof this.indexed === \"boolean\") {\n        result.indexed = this.indexed;\n      }\n      if (this.isTuple()) {\n        result.components = this.components.map(c => JSON.parse(c.format(format)));\n      }\n      return JSON.stringify(result);\n    }\n    let result = \"\";\n    // Array\n    if (this.isArray()) {\n      result += this.arrayChildren.format(format);\n      result += `[${this.arrayLength < 0 ? \"\" : String(this.arrayLength)}]`;\n    } else {\n      if (this.isTuple()) {\n        result += \"(\" + this.components.map(comp => comp.format(format)).join(format === \"full\" ? \", \" : \",\") + \")\";\n      } else {\n        result += this.type;\n      }\n    }\n    if (format !== \"sighash\") {\n      if (this.indexed === true) {\n        result += \" indexed\";\n      }\n      if (format === \"full\" && this.name) {\n        result += \" \" + this.name;\n      }\n    }\n    return result;\n  }\n  /**\n   *  Returns true if %%this%% is an Array type.\n   *\n   *  This provides a type gaurd ensuring that [[arrayChildren]]\n   *  and [[arrayLength]] are non-null.\n   */\n  isArray() {\n    return this.baseType === \"array\";\n  }\n  /**\n   *  Returns true if %%this%% is a Tuple type.\n   *\n   *  This provides a type gaurd ensuring that [[components]]\n   *  is non-null.\n   */\n  isTuple() {\n    return this.baseType === \"tuple\";\n  }\n  /**\n   *  Returns true if %%this%% is an Indexable type.\n   *\n   *  This provides a type gaurd ensuring that [[indexed]]\n   *  is non-null.\n   */\n  isIndexable() {\n    return this.indexed != null;\n  }\n  /**\n   *  Walks the **ParamType** with %%value%%, calling %%process%%\n   *  on each type, destructing the %%value%% recursively.\n   */\n  walk(value, process) {\n    if (this.isArray()) {\n      if (!Array.isArray(value)) {\n        throw new Error(\"invalid array value\");\n      }\n      if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n        throw new Error(\"array is wrong length\");\n      }\n      const _this = this;\n      return value.map(v => _this.arrayChildren.walk(v, process));\n    }\n    if (this.isTuple()) {\n      if (!Array.isArray(value)) {\n        throw new Error(\"invalid tuple value\");\n      }\n      if (value.length !== this.components.length) {\n        throw new Error(\"array is wrong length\");\n      }\n      const _this = this;\n      return value.map((v, i) => _this.components[i].walk(v, process));\n    }\n    return process(this.type, value);\n  }\n  #walkAsync(promises, value, process, setValue) {\n    if (this.isArray()) {\n      if (!Array.isArray(value)) {\n        throw new Error(\"invalid array value\");\n      }\n      if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n        throw new Error(\"array is wrong length\");\n      }\n      const childType = this.arrayChildren;\n      const result = value.slice();\n      result.forEach((value, index) => {\n        childType.#walkAsync(promises, value, process, value => {\n          result[index] = value;\n        });\n      });\n      setValue(result);\n      return;\n    }\n    if (this.isTuple()) {\n      const components = this.components;\n      // Convert the object into an array\n      let result;\n      if (Array.isArray(value)) {\n        result = value.slice();\n      } else {\n        if (value == null || typeof value !== \"object\") {\n          throw new Error(\"invalid tuple value\");\n        }\n        result = components.map(param => {\n          if (!param.name) {\n            throw new Error(\"cannot use object value with unnamed components\");\n          }\n          if (!(param.name in value)) {\n            throw new Error(`missing value for component ${param.name}`);\n          }\n          return value[param.name];\n        });\n      }\n      if (result.length !== this.components.length) {\n        throw new Error(\"array is wrong length\");\n      }\n      result.forEach((value, index) => {\n        components[index].#walkAsync(promises, value, process, value => {\n          result[index] = value;\n        });\n      });\n      setValue(result);\n      return;\n    }\n    const result = process(this.type, value);\n    if (result.then) {\n      promises.push(async function () {\n        setValue(await result);\n      }());\n    } else {\n      setValue(result);\n    }\n  }\n  /**\n   *  Walks the **ParamType** with %%value%%, asynchronously calling\n   *  %%process%% on each type, destructing the %%value%% recursively.\n   *\n   *  This can be used to resolve ENS names by walking and resolving each\n   *  ``\"address\"`` type.\n   */\n  async walkAsync(value, process) {\n    const promises = [];\n    const result = [value];\n    this.#walkAsync(promises, value, process, value => {\n      result[0] = value;\n    });\n    if (promises.length) {\n      await Promise.all(promises);\n    }\n    return result[0];\n  }\n  /**\n   *  Creates a new **ParamType** for %%obj%%.\n   *\n   *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,\n   *  otherwise the ``indexed`` keyword will throw an error.\n   */\n  static from(obj, allowIndexed) {\n    if (ParamType.isParamType(obj)) {\n      return obj;\n    }\n    if (typeof obj === \"string\") {\n      try {\n        return ParamType.from(lex(obj), allowIndexed);\n      } catch (error) {\n        assertArgument(false, \"invalid param type\", \"obj\", obj);\n      }\n    } else if (obj instanceof TokenString) {\n      let type = \"\",\n        baseType = \"\";\n      let comps = null;\n      if (consumeKeywords(obj, setify([\"tuple\"])).has(\"tuple\") || obj.peekType(\"OPEN_PAREN\")) {\n        // Tuple\n        baseType = \"tuple\";\n        comps = obj.popParams().map(t => ParamType.from(t));\n        type = `tuple(${comps.map(c => c.format()).join(\",\")})`;\n      } else {\n        // Normal\n        type = verifyBasicType(obj.popType(\"TYPE\"));\n        baseType = type;\n      }\n      // Check for Array\n      let arrayChildren = null;\n      let arrayLength = null;\n      while (obj.length && obj.peekType(\"BRACKET\")) {\n        const bracket = obj.pop(); //arrays[i];\n        arrayChildren = new ParamType(_guard, \"\", type, baseType, null, comps, arrayLength, arrayChildren);\n        arrayLength = bracket.value;\n        type += bracket.text;\n        baseType = \"array\";\n        comps = null;\n      }\n      let indexed = null;\n      const keywords = consumeKeywords(obj, KwModifiers);\n      if (keywords.has(\"indexed\")) {\n        if (!allowIndexed) {\n          throw new Error(\"\");\n        }\n        indexed = true;\n      }\n      const name = obj.peekType(\"ID\") ? obj.pop().text : \"\";\n      if (obj.length) {\n        throw new Error(\"leftover tokens\");\n      }\n      return new ParamType(_guard, name, type, baseType, indexed, comps, arrayLength, arrayChildren);\n    }\n    const name = obj.name;\n    assertArgument(!name || typeof name === \"string\" && name.match(regexId), \"invalid name\", \"obj.name\", name);\n    let indexed = obj.indexed;\n    if (indexed != null) {\n      assertArgument(allowIndexed, \"parameter cannot be indexed\", \"obj.indexed\", obj.indexed);\n      indexed = !!indexed;\n    }\n    let type = obj.type;\n    let arrayMatch = type.match(regexArrayType);\n    if (arrayMatch) {\n      const arrayLength = parseInt(arrayMatch[2] || \"-1\");\n      const arrayChildren = ParamType.from({\n        type: arrayMatch[1],\n        components: obj.components\n      });\n      return new ParamType(_guard, name || \"\", type, \"array\", indexed, null, arrayLength, arrayChildren);\n    }\n    if (type === \"tuple\" || type.startsWith(\"tuple(\" /* fix: ) */) || type.startsWith(\"(\" /* fix: ) */)) {\n      const comps = obj.components != null ? obj.components.map(c => ParamType.from(c)) : null;\n      const tuple = new ParamType(_guard, name || \"\", type, \"tuple\", indexed, comps, null, null);\n      // @TODO: use lexer to validate and normalize type\n      return tuple;\n    }\n    type = verifyBasicType(obj.type);\n    return new ParamType(_guard, name || \"\", type, type, indexed, null, null, null);\n  }\n  /**\n   *  Returns true if %%value%% is a **ParamType**.\n   */\n  static isParamType(value) {\n    return value && value[internal] === ParamTypeInternal;\n  }\n}\n/**\n *  An abstract class to represent An individual fragment from a parse ABI.\n */\nexport class Fragment {\n  /**\n   *  The type of the fragment.\n   */\n  type;\n  /**\n   *  The inputs for the fragment.\n   */\n  inputs;\n  /**\n   *  @private\n   */\n  constructor(guard, type, inputs) {\n    assertPrivate(guard, _guard, \"Fragment\");\n    inputs = Object.freeze(inputs.slice());\n    defineProperties(this, {\n      type,\n      inputs\n    });\n  }\n  /**\n   *  Creates a new **Fragment** for %%obj%%, wich can be any supported\n   *  ABI frgament type.\n   */\n  static from(obj) {\n    if (typeof obj === \"string\") {\n      // Try parsing JSON...\n      try {\n        Fragment.from(JSON.parse(obj));\n      } catch (e) {}\n      // ...otherwise, use the human-readable lexer\n      return Fragment.from(lex(obj));\n    }\n    if (obj instanceof TokenString) {\n      // Human-readable ABI (already lexed)\n      const type = obj.peekKeyword(KwTypes);\n      switch (type) {\n        case \"constructor\":\n          return ConstructorFragment.from(obj);\n        case \"error\":\n          return ErrorFragment.from(obj);\n        case \"event\":\n          return EventFragment.from(obj);\n        case \"fallback\":\n        case \"receive\":\n          return FallbackFragment.from(obj);\n        case \"function\":\n          return FunctionFragment.from(obj);\n        case \"struct\":\n          return StructFragment.from(obj);\n      }\n    } else if (typeof obj === \"object\") {\n      // JSON ABI\n      switch (obj.type) {\n        case \"constructor\":\n          return ConstructorFragment.from(obj);\n        case \"error\":\n          return ErrorFragment.from(obj);\n        case \"event\":\n          return EventFragment.from(obj);\n        case \"fallback\":\n        case \"receive\":\n          return FallbackFragment.from(obj);\n        case \"function\":\n          return FunctionFragment.from(obj);\n        case \"struct\":\n          return StructFragment.from(obj);\n      }\n      assert(false, `unsupported type: ${obj.type}`, \"UNSUPPORTED_OPERATION\", {\n        operation: \"Fragment.from\"\n      });\n    }\n    assertArgument(false, \"unsupported frgament object\", \"obj\", obj);\n  }\n  /**\n   *  Returns true if %%value%% is a [[ConstructorFragment]].\n   */\n  static isConstructor(value) {\n    return ConstructorFragment.isFragment(value);\n  }\n  /**\n   *  Returns true if %%value%% is an [[ErrorFragment]].\n   */\n  static isError(value) {\n    return ErrorFragment.isFragment(value);\n  }\n  /**\n   *  Returns true if %%value%% is an [[EventFragment]].\n   */\n  static isEvent(value) {\n    return EventFragment.isFragment(value);\n  }\n  /**\n   *  Returns true if %%value%% is a [[FunctionFragment]].\n   */\n  static isFunction(value) {\n    return FunctionFragment.isFragment(value);\n  }\n  /**\n   *  Returns true if %%value%% is a [[StructFragment]].\n   */\n  static isStruct(value) {\n    return StructFragment.isFragment(value);\n  }\n}\n/**\n *  An abstract class to represent An individual fragment\n *  which has a name from a parse ABI.\n */\nexport class NamedFragment extends Fragment {\n  /**\n   *  The name of the fragment.\n   */\n  name;\n  /**\n   *  @private\n   */\n  constructor(guard, type, name, inputs) {\n    super(guard, type, inputs);\n    assertArgument(typeof name === \"string\" && name.match(regexId), \"invalid identifier\", \"name\", name);\n    inputs = Object.freeze(inputs.slice());\n    defineProperties(this, {\n      name\n    });\n  }\n}\nfunction joinParams(format, params) {\n  return \"(\" + params.map(p => p.format(format)).join(format === \"full\" ? \", \" : \",\") + \")\";\n}\n/**\n *  A Fragment which represents a //Custom Error//.\n */\nexport class ErrorFragment extends NamedFragment {\n  /**\n   *  @private\n   */\n  constructor(guard, name, inputs) {\n    super(guard, \"error\", name, inputs);\n    Object.defineProperty(this, internal, {\n      value: ErrorFragmentInternal\n    });\n  }\n  /**\n   *  The Custom Error selector.\n   */\n  get selector() {\n    return id(this.format(\"sighash\")).substring(0, 10);\n  }\n  /**\n   *  Returns a string representation of this fragment as %%format%%.\n   */\n  format(format) {\n    if (format == null) {\n      format = \"sighash\";\n    }\n    if (format === \"json\") {\n      return JSON.stringify({\n        type: \"error\",\n        name: this.name,\n        inputs: this.inputs.map(input => JSON.parse(input.format(format)))\n      });\n    }\n    const result = [];\n    if (format !== \"sighash\") {\n      result.push(\"error\");\n    }\n    result.push(this.name + joinParams(format, this.inputs));\n    return result.join(\" \");\n  }\n  /**\n   *  Returns a new **ErrorFragment** for %%obj%%.\n   */\n  static from(obj) {\n    if (ErrorFragment.isFragment(obj)) {\n      return obj;\n    }\n    if (typeof obj === \"string\") {\n      return ErrorFragment.from(lex(obj));\n    } else if (obj instanceof TokenString) {\n      const name = consumeName(\"error\", obj);\n      const inputs = consumeParams(obj);\n      consumeEoi(obj);\n      return new ErrorFragment(_guard, name, inputs);\n    }\n    return new ErrorFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n  }\n  /**\n   *  Returns ``true`` and provides a type guard if %%value%% is an\n   *  **ErrorFragment**.\n   */\n  static isFragment(value) {\n    return value && value[internal] === ErrorFragmentInternal;\n  }\n}\n/**\n *  A Fragment which represents an Event.\n */\nexport class EventFragment extends NamedFragment {\n  /**\n   *  Whether this event is anonymous.\n   */\n  anonymous;\n  /**\n   *  @private\n   */\n  constructor(guard, name, inputs, anonymous) {\n    super(guard, \"event\", name, inputs);\n    Object.defineProperty(this, internal, {\n      value: EventFragmentInternal\n    });\n    defineProperties(this, {\n      anonymous\n    });\n  }\n  /**\n   *  The Event topic hash.\n   */\n  get topicHash() {\n    return id(this.format(\"sighash\"));\n  }\n  /**\n   *  Returns a string representation of this event as %%format%%.\n   */\n  format(format) {\n    if (format == null) {\n      format = \"sighash\";\n    }\n    if (format === \"json\") {\n      return JSON.stringify({\n        type: \"event\",\n        anonymous: this.anonymous,\n        name: this.name,\n        inputs: this.inputs.map(i => JSON.parse(i.format(format)))\n      });\n    }\n    const result = [];\n    if (format !== \"sighash\") {\n      result.push(\"event\");\n    }\n    result.push(this.name + joinParams(format, this.inputs));\n    if (format !== \"sighash\" && this.anonymous) {\n      result.push(\"anonymous\");\n    }\n    return result.join(\" \");\n  }\n  /**\n   *  Return the topic hash for an event with %%name%% and %%params%%.\n   */\n  static getTopicHash(name, params) {\n    params = (params || []).map(p => ParamType.from(p));\n    const fragment = new EventFragment(_guard, name, params, false);\n    return fragment.topicHash;\n  }\n  /**\n   *  Returns a new **EventFragment** for %%obj%%.\n   */\n  static from(obj) {\n    if (EventFragment.isFragment(obj)) {\n      return obj;\n    }\n    if (typeof obj === \"string\") {\n      try {\n        return EventFragment.from(lex(obj));\n      } catch (error) {\n        assertArgument(false, \"invalid event fragment\", \"obj\", obj);\n      }\n    } else if (obj instanceof TokenString) {\n      const name = consumeName(\"event\", obj);\n      const inputs = consumeParams(obj, true);\n      const anonymous = !!consumeKeywords(obj, setify([\"anonymous\"])).has(\"anonymous\");\n      consumeEoi(obj);\n      return new EventFragment(_guard, name, inputs, anonymous);\n    }\n    return new EventFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(p => ParamType.from(p, true)) : [], !!obj.anonymous);\n  }\n  /**\n   *  Returns ``true`` and provides a type guard if %%value%% is an\n   *  **EventFragment**.\n   */\n  static isFragment(value) {\n    return value && value[internal] === EventFragmentInternal;\n  }\n}\n/**\n *  A Fragment which represents a constructor.\n */\nexport class ConstructorFragment extends Fragment {\n  /**\n   *  Whether the constructor can receive an endowment.\n   */\n  payable;\n  /**\n   *  The recommended gas limit for deployment or ``null``.\n   */\n  gas;\n  /**\n   *  @private\n   */\n  constructor(guard, type, inputs, payable, gas) {\n    super(guard, type, inputs);\n    Object.defineProperty(this, internal, {\n      value: ConstructorFragmentInternal\n    });\n    defineProperties(this, {\n      payable,\n      gas\n    });\n  }\n  /**\n   *  Returns a string representation of this constructor as %%format%%.\n   */\n  format(format) {\n    assert(format != null && format !== \"sighash\", \"cannot format a constructor for sighash\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"format(sighash)\"\n    });\n    if (format === \"json\") {\n      return JSON.stringify({\n        type: \"constructor\",\n        stateMutability: this.payable ? \"payable\" : \"undefined\",\n        payable: this.payable,\n        gas: this.gas != null ? this.gas : undefined,\n        inputs: this.inputs.map(i => JSON.parse(i.format(format)))\n      });\n    }\n    const result = [`constructor${joinParams(format, this.inputs)}`];\n    if (this.payable) {\n      result.push(\"payable\");\n    }\n    if (this.gas != null) {\n      result.push(`@${this.gas.toString()}`);\n    }\n    return result.join(\" \");\n  }\n  /**\n   *  Returns a new **ConstructorFragment** for %%obj%%.\n   */\n  static from(obj) {\n    if (ConstructorFragment.isFragment(obj)) {\n      return obj;\n    }\n    if (typeof obj === \"string\") {\n      try {\n        return ConstructorFragment.from(lex(obj));\n      } catch (error) {\n        assertArgument(false, \"invalid constuctor fragment\", \"obj\", obj);\n      }\n    } else if (obj instanceof TokenString) {\n      consumeKeywords(obj, setify([\"constructor\"]));\n      const inputs = consumeParams(obj);\n      const payable = !!consumeKeywords(obj, KwVisibDeploy).has(\"payable\");\n      const gas = consumeGas(obj);\n      consumeEoi(obj);\n      return new ConstructorFragment(_guard, \"constructor\", inputs, payable, gas);\n    }\n    return new ConstructorFragment(_guard, \"constructor\", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);\n  }\n  /**\n   *  Returns ``true`` and provides a type guard if %%value%% is a\n   *  **ConstructorFragment**.\n   */\n  static isFragment(value) {\n    return value && value[internal] === ConstructorFragmentInternal;\n  }\n}\n/**\n *  A Fragment which represents a method.\n */\nexport class FallbackFragment extends Fragment {\n  /**\n   *  If the function can be sent value during invocation.\n   */\n  payable;\n  constructor(guard, inputs, payable) {\n    super(guard, \"fallback\", inputs);\n    Object.defineProperty(this, internal, {\n      value: FallbackFragmentInternal\n    });\n    defineProperties(this, {\n      payable\n    });\n  }\n  /**\n   *  Returns a string representation of this fallback as %%format%%.\n   */\n  format(format) {\n    const type = this.inputs.length === 0 ? \"receive\" : \"fallback\";\n    if (format === \"json\") {\n      const stateMutability = this.payable ? \"payable\" : \"nonpayable\";\n      return JSON.stringify({\n        type,\n        stateMutability\n      });\n    }\n    return `${type}()${this.payable ? \" payable\" : \"\"}`;\n  }\n  /**\n   *  Returns a new **FallbackFragment** for %%obj%%.\n   */\n  static from(obj) {\n    if (FallbackFragment.isFragment(obj)) {\n      return obj;\n    }\n    if (typeof obj === \"string\") {\n      try {\n        return FallbackFragment.from(lex(obj));\n      } catch (error) {\n        assertArgument(false, \"invalid fallback fragment\", \"obj\", obj);\n      }\n    } else if (obj instanceof TokenString) {\n      const errorObj = obj.toString();\n      const topIsValid = obj.peekKeyword(setify([\"fallback\", \"receive\"]));\n      assertArgument(topIsValid, \"type must be fallback or receive\", \"obj\", errorObj);\n      const type = obj.popKeyword(setify([\"fallback\", \"receive\"]));\n      // receive()\n      if (type === \"receive\") {\n        const inputs = consumeParams(obj);\n        assertArgument(inputs.length === 0, `receive cannot have arguments`, \"obj.inputs\", inputs);\n        consumeKeywords(obj, setify([\"payable\"]));\n        consumeEoi(obj);\n        return new FallbackFragment(_guard, [], true);\n      }\n      // fallback() [payable]\n      // fallback(bytes) [payable] returns (bytes)\n      let inputs = consumeParams(obj);\n      if (inputs.length) {\n        assertArgument(inputs.length === 1 && inputs[0].type === \"bytes\", \"invalid fallback inputs\", \"obj.inputs\", inputs.map(i => i.format(\"minimal\")).join(\", \"));\n      } else {\n        inputs = [ParamType.from(\"bytes\")];\n      }\n      const mutability = consumeMutability(obj);\n      assertArgument(mutability === \"nonpayable\" || mutability === \"payable\", \"fallback cannot be constants\", \"obj.stateMutability\", mutability);\n      if (consumeKeywords(obj, setify([\"returns\"])).has(\"returns\")) {\n        const outputs = consumeParams(obj);\n        assertArgument(outputs.length === 1 && outputs[0].type === \"bytes\", \"invalid fallback outputs\", \"obj.outputs\", outputs.map(i => i.format(\"minimal\")).join(\", \"));\n      }\n      consumeEoi(obj);\n      return new FallbackFragment(_guard, inputs, mutability === \"payable\");\n    }\n    if (obj.type === \"receive\") {\n      return new FallbackFragment(_guard, [], true);\n    }\n    if (obj.type === \"fallback\") {\n      const inputs = [ParamType.from(\"bytes\")];\n      const payable = obj.stateMutability === \"payable\";\n      return new FallbackFragment(_guard, inputs, payable);\n    }\n    assertArgument(false, \"invalid fallback description\", \"obj\", obj);\n  }\n  /**\n   *  Returns ``true`` and provides a type guard if %%value%% is a\n   *  **FallbackFragment**.\n   */\n  static isFragment(value) {\n    return value && value[internal] === FallbackFragmentInternal;\n  }\n}\n/**\n *  A Fragment which represents a method.\n */\nexport class FunctionFragment extends NamedFragment {\n  /**\n   *  If the function is constant (e.g. ``pure`` or ``view`` functions).\n   */\n  constant;\n  /**\n   *  The returned types for the result of calling this function.\n   */\n  outputs;\n  /**\n   *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``\n   *  or ``pure``)\n   */\n  stateMutability;\n  /**\n   *  If the function can be sent value during invocation.\n   */\n  payable;\n  /**\n   *  The recommended gas limit to send when calling this function.\n   */\n  gas;\n  /**\n   *  @private\n   */\n  constructor(guard, name, stateMutability, inputs, outputs, gas) {\n    super(guard, \"function\", name, inputs);\n    Object.defineProperty(this, internal, {\n      value: FunctionFragmentInternal\n    });\n    outputs = Object.freeze(outputs.slice());\n    const constant = stateMutability === \"view\" || stateMutability === \"pure\";\n    const payable = stateMutability === \"payable\";\n    defineProperties(this, {\n      constant,\n      gas,\n      outputs,\n      payable,\n      stateMutability\n    });\n  }\n  /**\n   *  The Function selector.\n   */\n  get selector() {\n    return id(this.format(\"sighash\")).substring(0, 10);\n  }\n  /**\n   *  Returns a string representation of this function as %%format%%.\n   */\n  format(format) {\n    if (format == null) {\n      format = \"sighash\";\n    }\n    if (format === \"json\") {\n      return JSON.stringify({\n        type: \"function\",\n        name: this.name,\n        constant: this.constant,\n        stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n        payable: this.payable,\n        gas: this.gas != null ? this.gas : undefined,\n        inputs: this.inputs.map(i => JSON.parse(i.format(format))),\n        outputs: this.outputs.map(o => JSON.parse(o.format(format)))\n      });\n    }\n    const result = [];\n    if (format !== \"sighash\") {\n      result.push(\"function\");\n    }\n    result.push(this.name + joinParams(format, this.inputs));\n    if (format !== \"sighash\") {\n      if (this.stateMutability !== \"nonpayable\") {\n        result.push(this.stateMutability);\n      }\n      if (this.outputs && this.outputs.length) {\n        result.push(\"returns\");\n        result.push(joinParams(format, this.outputs));\n      }\n      if (this.gas != null) {\n        result.push(`@${this.gas.toString()}`);\n      }\n    }\n    return result.join(\" \");\n  }\n  /**\n   *  Return the selector for a function with %%name%% and %%params%%.\n   */\n  static getSelector(name, params) {\n    params = (params || []).map(p => ParamType.from(p));\n    const fragment = new FunctionFragment(_guard, name, \"view\", params, [], null);\n    return fragment.selector;\n  }\n  /**\n   *  Returns a new **FunctionFragment** for %%obj%%.\n   */\n  static from(obj) {\n    if (FunctionFragment.isFragment(obj)) {\n      return obj;\n    }\n    if (typeof obj === \"string\") {\n      try {\n        return FunctionFragment.from(lex(obj));\n      } catch (error) {\n        assertArgument(false, \"invalid function fragment\", \"obj\", obj);\n      }\n    } else if (obj instanceof TokenString) {\n      const name = consumeName(\"function\", obj);\n      const inputs = consumeParams(obj);\n      const mutability = consumeMutability(obj);\n      let outputs = [];\n      if (consumeKeywords(obj, setify([\"returns\"])).has(\"returns\")) {\n        outputs = consumeParams(obj);\n      }\n      const gas = consumeGas(obj);\n      consumeEoi(obj);\n      return new FunctionFragment(_guard, name, mutability, inputs, outputs, gas);\n    }\n    let stateMutability = obj.stateMutability;\n    // Use legacy Solidity ABI logic if stateMutability is missing\n    if (stateMutability == null) {\n      stateMutability = \"payable\";\n      if (typeof obj.constant === \"boolean\") {\n        stateMutability = \"view\";\n        if (!obj.constant) {\n          stateMutability = \"payable\";\n          if (typeof obj.payable === \"boolean\" && !obj.payable) {\n            stateMutability = \"nonpayable\";\n          }\n        }\n      } else if (typeof obj.payable === \"boolean\" && !obj.payable) {\n        stateMutability = \"nonpayable\";\n      }\n    }\n    // @TODO: verifyState for stateMutability (e.g. throw if\n    //        payable: false but stateMutability is \"nonpayable\")\n    return new FunctionFragment(_guard, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], obj.gas != null ? obj.gas : null);\n  }\n  /**\n   *  Returns ``true`` and provides a type guard if %%value%% is a\n   *  **FunctionFragment**.\n   */\n  static isFragment(value) {\n    return value && value[internal] === FunctionFragmentInternal;\n  }\n}\n/**\n *  A Fragment which represents a structure.\n */\nexport class StructFragment extends NamedFragment {\n  /**\n   *  @private\n   */\n  constructor(guard, name, inputs) {\n    super(guard, \"struct\", name, inputs);\n    Object.defineProperty(this, internal, {\n      value: StructFragmentInternal\n    });\n  }\n  /**\n   *  Returns a string representation of this struct as %%format%%.\n   */\n  format() {\n    throw new Error(\"@TODO\");\n  }\n  /**\n   *  Returns a new **StructFragment** for %%obj%%.\n   */\n  static from(obj) {\n    if (typeof obj === \"string\") {\n      try {\n        return StructFragment.from(lex(obj));\n      } catch (error) {\n        assertArgument(false, \"invalid struct fragment\", \"obj\", obj);\n      }\n    } else if (obj instanceof TokenString) {\n      const name = consumeName(\"struct\", obj);\n      const inputs = consumeParams(obj);\n      consumeEoi(obj);\n      return new StructFragment(_guard, name, inputs);\n    }\n    return new StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n  }\n  // @TODO: fix this return type\n  /**\n   *  Returns ``true`` and provides a type guard if %%value%% is a\n   *  **StructFragment**.\n   */\n  static isFragment(value) {\n    return value && value[internal] === StructFragmentInternal;\n  }\n}","map":{"version":3,"names":["defineProperties","getBigInt","getNumber","assert","assertPrivate","assertArgument","id","setify","items","result","Set","forEach","k","add","Object","freeze","_kwVisibDeploy","KwVisibDeploy","split","_kwVisib","KwVisib","_kwTypes","KwTypes","_kwModifiers","KwModifiers","_kwOther","_keywords","join","Keywords","SimpleTokens","regexWhitespacePrefix","RegExp","regexNumberPrefix","regexIdPrefix","regexId","regexType","TokenString","offset","tokens","length","constructor","slice","clone","reset","subTokenString","#subTokenString","from","to","map","t","assign","match","linkBack","linkNext","popKeyword","allowed","top","peek","type","has","text","Error","pop","popType","JSON","stringify","popParen","popParams","link","push","peekKeyword","peekType","toString","i","token","lex","throwError","message","brackets","commas","cur","substring","depth","value","suffix","allowSingle","set","included","key","keys","consumeName","keyword","consumeKeywords","keywords","consumeMutability","modifiers","consumeParams","allowIndexed","ParamType","consumeGas","consumeEoi","regexArrayType","verifyBasicType","parseInt","size","_guard","internal","Symbol","for","ParamTypeInternal","ErrorFragmentInternal","EventFragmentInternal","ConstructorFragmentInternal","FallbackFragmentInternal","FunctionFragmentInternal","StructFragmentInternal","name","baseType","indexed","components","arrayLength","arrayChildren","guard","defineProperty","format","isArray","parse","String","isTuple","c","comp","isIndexable","walk","process","Array","_this","v","walkAsync","#walkAsync","promises","setValue","childType","index","param","then","Promise","all","obj","isParamType","error","comps","bracket","arrayMatch","startsWith","tuple","Fragment","inputs","e","ConstructorFragment","ErrorFragment","EventFragment","FallbackFragment","FunctionFragment","StructFragment","operation","isConstructor","isFragment","isError","isEvent","isFunction","isStruct","NamedFragment","joinParams","params","p","selector","input","anonymous","topicHash","getTopicHash","fragment","payable","gas","stateMutability","undefined","errorObj","topIsValid","mutability","outputs","constant","o","getSelector"],"sources":["/Users/yadhnikharkar/Desktop/dmrs-mvp/frontend/node_modules/ethers/lib.esm/abi/fragments.js"],"sourcesContent":["/**\n *  A fragment is a single item from an ABI, which may represent any of:\n *\n *  - [Functions](FunctionFragment)\n *  - [Events](EventFragment)\n *  - [Constructors](ConstructorFragment)\n *  - Custom [Errors](ErrorFragment)\n *  - [Fallback or Receive](FallbackFragment) functions\n *\n *  @_subsection api/abi/abi-coder:Fragments  [about-fragments]\n */\nimport { defineProperties, getBigInt, getNumber, assert, assertPrivate, assertArgument } from \"../utils/index.js\";\nimport { id } from \"../hash/index.js\";\n;\n// [ \"a\", \"b\" ] => { \"a\": 1, \"b\": 1 }\nfunction setify(items) {\n    const result = new Set();\n    items.forEach((k) => result.add(k));\n    return Object.freeze(result);\n}\nconst _kwVisibDeploy = \"external public payable override\";\nconst KwVisibDeploy = setify(_kwVisibDeploy.split(\" \"));\n// Visibility Keywords\nconst _kwVisib = \"constant external internal payable private public pure view override\";\nconst KwVisib = setify(_kwVisib.split(\" \"));\nconst _kwTypes = \"constructor error event fallback function receive struct\";\nconst KwTypes = setify(_kwTypes.split(\" \"));\nconst _kwModifiers = \"calldata memory storage payable indexed\";\nconst KwModifiers = setify(_kwModifiers.split(\" \"));\nconst _kwOther = \"tuple returns\";\n// All Keywords\nconst _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(\" \");\nconst Keywords = setify(_keywords.split(\" \"));\n// Single character tokens\nconst SimpleTokens = {\n    \"(\": \"OPEN_PAREN\", \")\": \"CLOSE_PAREN\",\n    \"[\": \"OPEN_BRACKET\", \"]\": \"CLOSE_BRACKET\",\n    \",\": \"COMMA\", \"@\": \"AT\"\n};\n// Parser regexes to consume the next token\nconst regexWhitespacePrefix = new RegExp(\"^(\\\\s*)\");\nconst regexNumberPrefix = new RegExp(\"^([0-9]+)\");\nconst regexIdPrefix = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)\");\n// Parser regexs to check validity\nconst regexId = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)$\");\nconst regexType = new RegExp(\"^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$\");\nclass TokenString {\n    #offset;\n    #tokens;\n    get offset() { return this.#offset; }\n    get length() { return this.#tokens.length - this.#offset; }\n    constructor(tokens) {\n        this.#offset = 0;\n        this.#tokens = tokens.slice();\n    }\n    clone() { return new TokenString(this.#tokens); }\n    reset() { this.#offset = 0; }\n    #subTokenString(from = 0, to = 0) {\n        return new TokenString(this.#tokens.slice(from, to).map((t) => {\n            return Object.freeze(Object.assign({}, t, {\n                match: (t.match - from),\n                linkBack: (t.linkBack - from),\n                linkNext: (t.linkNext - from),\n            }));\n        }));\n    }\n    // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens\n    popKeyword(allowed) {\n        const top = this.peek();\n        if (top.type !== \"KEYWORD\" || !allowed.has(top.text)) {\n            throw new Error(`expected keyword ${top.text}`);\n        }\n        return this.pop().text;\n    }\n    // Pops and returns the value of the next token if it is `type`; throws if out of tokens\n    popType(type) {\n        if (this.peek().type !== type) {\n            const top = this.peek();\n            throw new Error(`expected ${type}; got ${top.type} ${JSON.stringify(top.text)}`);\n        }\n        return this.pop().text;\n    }\n    // Pops and returns a \"(\" TOKENS \")\"\n    popParen() {\n        const top = this.peek();\n        if (top.type !== \"OPEN_PAREN\") {\n            throw new Error(\"bad start\");\n        }\n        const result = this.#subTokenString(this.#offset + 1, top.match + 1);\n        this.#offset = top.match + 1;\n        return result;\n    }\n    // Pops and returns the items within \"(\" ITEM1 \",\" ITEM2 \",\" ... \")\"\n    popParams() {\n        const top = this.peek();\n        if (top.type !== \"OPEN_PAREN\") {\n            throw new Error(\"bad start\");\n        }\n        const result = [];\n        while (this.#offset < top.match - 1) {\n            const link = this.peek().linkNext;\n            result.push(this.#subTokenString(this.#offset + 1, link));\n            this.#offset = link;\n        }\n        this.#offset = top.match + 1;\n        return result;\n    }\n    // Returns the top Token, throwing if out of tokens\n    peek() {\n        if (this.#offset >= this.#tokens.length) {\n            throw new Error(\"out-of-bounds\");\n        }\n        return this.#tokens[this.#offset];\n    }\n    // Returns the next value, if it is a keyword in `allowed`\n    peekKeyword(allowed) {\n        const top = this.peekType(\"KEYWORD\");\n        return (top != null && allowed.has(top)) ? top : null;\n    }\n    // Returns the value of the next token if it is `type`\n    peekType(type) {\n        if (this.length === 0) {\n            return null;\n        }\n        const top = this.peek();\n        return (top.type === type) ? top.text : null;\n    }\n    // Returns the next token; throws if out of tokens\n    pop() {\n        const result = this.peek();\n        this.#offset++;\n        return result;\n    }\n    toString() {\n        const tokens = [];\n        for (let i = this.#offset; i < this.#tokens.length; i++) {\n            const token = this.#tokens[i];\n            tokens.push(`${token.type}:${token.text}`);\n        }\n        return `<TokenString ${tokens.join(\" \")}>`;\n    }\n}\nfunction lex(text) {\n    const tokens = [];\n    const throwError = (message) => {\n        const token = (offset < text.length) ? JSON.stringify(text[offset]) : \"$EOI\";\n        throw new Error(`invalid token ${token} at ${offset}: ${message}`);\n    };\n    let brackets = [];\n    let commas = [];\n    let offset = 0;\n    while (offset < text.length) {\n        // Strip off any leading whitespace\n        let cur = text.substring(offset);\n        let match = cur.match(regexWhitespacePrefix);\n        if (match) {\n            offset += match[1].length;\n            cur = text.substring(offset);\n        }\n        const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: \"\", text: \"\", offset, value: -1 };\n        tokens.push(token);\n        let type = (SimpleTokens[cur[0]] || \"\");\n        if (type) {\n            token.type = type;\n            token.text = cur[0];\n            offset++;\n            if (type === \"OPEN_PAREN\") {\n                brackets.push(tokens.length - 1);\n                commas.push(tokens.length - 1);\n            }\n            else if (type == \"CLOSE_PAREN\") {\n                if (brackets.length === 0) {\n                    throwError(\"no matching open bracket\");\n                }\n                token.match = brackets.pop();\n                (tokens[token.match]).match = tokens.length - 1;\n                token.depth--;\n                token.linkBack = commas.pop();\n                (tokens[token.linkBack]).linkNext = tokens.length - 1;\n            }\n            else if (type === \"COMMA\") {\n                token.linkBack = commas.pop();\n                (tokens[token.linkBack]).linkNext = tokens.length - 1;\n                commas.push(tokens.length - 1);\n            }\n            else if (type === \"OPEN_BRACKET\") {\n                token.type = \"BRACKET\";\n            }\n            else if (type === \"CLOSE_BRACKET\") {\n                // Remove the CLOSE_BRACKET\n                let suffix = tokens.pop().text;\n                if (tokens.length > 0 && tokens[tokens.length - 1].type === \"NUMBER\") {\n                    const value = tokens.pop().text;\n                    suffix = value + suffix;\n                    (tokens[tokens.length - 1]).value = getNumber(value);\n                }\n                if (tokens.length === 0 || tokens[tokens.length - 1].type !== \"BRACKET\") {\n                    throw new Error(\"missing opening bracket\");\n                }\n                (tokens[tokens.length - 1]).text += suffix;\n            }\n            continue;\n        }\n        match = cur.match(regexIdPrefix);\n        if (match) {\n            token.text = match[1];\n            offset += token.text.length;\n            if (Keywords.has(token.text)) {\n                token.type = \"KEYWORD\";\n                continue;\n            }\n            if (token.text.match(regexType)) {\n                token.type = \"TYPE\";\n                continue;\n            }\n            token.type = \"ID\";\n            continue;\n        }\n        match = cur.match(regexNumberPrefix);\n        if (match) {\n            token.text = match[1];\n            token.type = \"NUMBER\";\n            offset += token.text.length;\n            continue;\n        }\n        throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);\n    }\n    return new TokenString(tokens.map((t) => Object.freeze(t)));\n}\n// Check only one of `allowed` is in `set`\nfunction allowSingle(set, allowed) {\n    let included = [];\n    for (const key in allowed.keys()) {\n        if (set.has(key)) {\n            included.push(key);\n        }\n    }\n    if (included.length > 1) {\n        throw new Error(`conflicting types: ${included.join(\", \")}`);\n    }\n}\n// Functions to process a Solidity Signature TokenString from left-to-right for...\n// ...the name with an optional type, returning the name\nfunction consumeName(type, tokens) {\n    if (tokens.peekKeyword(KwTypes)) {\n        const keyword = tokens.pop().text;\n        if (keyword !== type) {\n            throw new Error(`expected ${type}, got ${keyword}`);\n        }\n    }\n    return tokens.popType(\"ID\");\n}\n// ...all keywords matching allowed, returning the keywords\nfunction consumeKeywords(tokens, allowed) {\n    const keywords = new Set();\n    while (true) {\n        const keyword = tokens.peekType(\"KEYWORD\");\n        if (keyword == null || (allowed && !allowed.has(keyword))) {\n            break;\n        }\n        tokens.pop();\n        if (keywords.has(keyword)) {\n            throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);\n        }\n        keywords.add(keyword);\n    }\n    return Object.freeze(keywords);\n}\n// ...all visibility keywords, returning the coalesced mutability\nfunction consumeMutability(tokens) {\n    let modifiers = consumeKeywords(tokens, KwVisib);\n    // Detect conflicting modifiers\n    allowSingle(modifiers, setify(\"constant payable nonpayable\".split(\" \")));\n    allowSingle(modifiers, setify(\"pure view payable nonpayable\".split(\" \")));\n    // Process mutability states\n    if (modifiers.has(\"view\")) {\n        return \"view\";\n    }\n    if (modifiers.has(\"pure\")) {\n        return \"pure\";\n    }\n    if (modifiers.has(\"payable\")) {\n        return \"payable\";\n    }\n    if (modifiers.has(\"nonpayable\")) {\n        return \"nonpayable\";\n    }\n    // Process legacy `constant` last\n    if (modifiers.has(\"constant\")) {\n        return \"view\";\n    }\n    return \"nonpayable\";\n}\n// ...a parameter list, returning the ParamType list\nfunction consumeParams(tokens, allowIndexed) {\n    return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));\n}\n// ...a gas limit, returning a BigNumber or null if none\nfunction consumeGas(tokens) {\n    if (tokens.peekType(\"AT\")) {\n        tokens.pop();\n        if (tokens.peekType(\"NUMBER\")) {\n            return getBigInt(tokens.pop().text);\n        }\n        throw new Error(\"invalid gas\");\n    }\n    return null;\n}\nfunction consumeEoi(tokens) {\n    if (tokens.length) {\n        throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);\n    }\n}\nconst regexArrayType = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nfunction verifyBasicType(type) {\n    const match = type.match(regexType);\n    assertArgument(match, \"invalid type\", \"type\", type);\n    if (type === \"uint\") {\n        return \"uint256\";\n    }\n    if (type === \"int\") {\n        return \"int256\";\n    }\n    if (match[2]) {\n        // bytesXX\n        const length = parseInt(match[2]);\n        assertArgument(length !== 0 && length <= 32, \"invalid bytes length\", \"type\", type);\n    }\n    else if (match[3]) {\n        // intXX or uintXX\n        const size = parseInt(match[3]);\n        assertArgument(size !== 0 && size <= 256 && (size % 8) === 0, \"invalid numeric width\", \"type\", type);\n    }\n    return type;\n}\n// Make the Fragment constructors effectively private\nconst _guard = {};\nconst internal = Symbol.for(\"_ethers_internal\");\nconst ParamTypeInternal = \"_ParamTypeInternal\";\nconst ErrorFragmentInternal = \"_ErrorInternal\";\nconst EventFragmentInternal = \"_EventInternal\";\nconst ConstructorFragmentInternal = \"_ConstructorInternal\";\nconst FallbackFragmentInternal = \"_FallbackInternal\";\nconst FunctionFragmentInternal = \"_FunctionInternal\";\nconst StructFragmentInternal = \"_StructInternal\";\n/**\n *  Each input and output of a [[Fragment]] is an Array of **ParamType**.\n */\nexport class ParamType {\n    /**\n     *  The local name of the parameter (or ``\"\"`` if unbound)\n     */\n    name;\n    /**\n     *  The fully qualified type (e.g. ``\"address\"``, ``\"tuple(address)\"``,\n     *  ``\"uint256[3][]\"``)\n     */\n    type;\n    /**\n     *  The base type (e.g. ``\"address\"``, ``\"tuple\"``, ``\"array\"``)\n     */\n    baseType;\n    /**\n     *  True if the parameters is indexed.\n     *\n     *  For non-indexable types this is ``null``.\n     */\n    indexed;\n    /**\n     *  The components for the tuple.\n     *\n     *  For non-tuple types this is ``null``.\n     */\n    components;\n    /**\n     *  The array length, or ``-1`` for dynamic-lengthed arrays.\n     *\n     *  For non-array types this is ``null``.\n     */\n    arrayLength;\n    /**\n     *  The type of each child in the array.\n     *\n     *  For non-array types this is ``null``.\n     */\n    arrayChildren;\n    /**\n     *  @private\n     */\n    constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {\n        assertPrivate(guard, _guard, \"ParamType\");\n        Object.defineProperty(this, internal, { value: ParamTypeInternal });\n        if (components) {\n            components = Object.freeze(components.slice());\n        }\n        if (baseType === \"array\") {\n            if (arrayLength == null || arrayChildren == null) {\n                throw new Error(\"\");\n            }\n        }\n        else if (arrayLength != null || arrayChildren != null) {\n            throw new Error(\"\");\n        }\n        if (baseType === \"tuple\") {\n            if (components == null) {\n                throw new Error(\"\");\n            }\n        }\n        else if (components != null) {\n            throw new Error(\"\");\n        }\n        defineProperties(this, {\n            name, type, baseType, indexed, components, arrayLength, arrayChildren\n        });\n    }\n    /**\n     *  Return a string representation of this type.\n     *\n     *  For example,\n     *\n     *  ``sighash\" => \"(uint256,address)\"``\n     *\n     *  ``\"minimal\" => \"tuple(uint256,address) indexed\"``\n     *\n     *  ``\"full\" => \"tuple(uint256 foo, address bar) indexed baz\"``\n     */\n    format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            const name = this.name || \"\";\n            if (this.isArray()) {\n                const result = JSON.parse(this.arrayChildren.format(\"json\"));\n                result.name = name;\n                result.type += `[${(this.arrayLength < 0 ? \"\" : String(this.arrayLength))}]`;\n                return JSON.stringify(result);\n            }\n            const result = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\" : this.type),\n                name\n            };\n            if (typeof (this.indexed) === \"boolean\") {\n                result.indexed = this.indexed;\n            }\n            if (this.isTuple()) {\n                result.components = this.components.map((c) => JSON.parse(c.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n        let result = \"\";\n        // Array\n        if (this.isArray()) {\n            result += this.arrayChildren.format(format);\n            result += `[${(this.arrayLength < 0 ? \"\" : String(this.arrayLength))}]`;\n        }\n        else {\n            if (this.isTuple()) {\n                result += \"(\" + this.components.map((comp) => comp.format(format)).join((format === \"full\") ? \", \" : \",\") + \")\";\n            }\n            else {\n                result += this.type;\n            }\n        }\n        if (format !== \"sighash\") {\n            if (this.indexed === true) {\n                result += \" indexed\";\n            }\n            if (format === \"full\" && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n        return result;\n    }\n    /**\n     *  Returns true if %%this%% is an Array type.\n     *\n     *  This provides a type gaurd ensuring that [[arrayChildren]]\n     *  and [[arrayLength]] are non-null.\n     */\n    isArray() {\n        return (this.baseType === \"array\");\n    }\n    /**\n     *  Returns true if %%this%% is a Tuple type.\n     *\n     *  This provides a type gaurd ensuring that [[components]]\n     *  is non-null.\n     */\n    isTuple() {\n        return (this.baseType === \"tuple\");\n    }\n    /**\n     *  Returns true if %%this%% is an Indexable type.\n     *\n     *  This provides a type gaurd ensuring that [[indexed]]\n     *  is non-null.\n     */\n    isIndexable() {\n        return (this.indexed != null);\n    }\n    /**\n     *  Walks the **ParamType** with %%value%%, calling %%process%%\n     *  on each type, destructing the %%value%% recursively.\n     */\n    walk(value, process) {\n        if (this.isArray()) {\n            if (!Array.isArray(value)) {\n                throw new Error(\"invalid array value\");\n            }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n                throw new Error(\"array is wrong length\");\n            }\n            const _this = this;\n            return value.map((v) => (_this.arrayChildren.walk(v, process)));\n        }\n        if (this.isTuple()) {\n            if (!Array.isArray(value)) {\n                throw new Error(\"invalid tuple value\");\n            }\n            if (value.length !== this.components.length) {\n                throw new Error(\"array is wrong length\");\n            }\n            const _this = this;\n            return value.map((v, i) => (_this.components[i].walk(v, process)));\n        }\n        return process(this.type, value);\n    }\n    #walkAsync(promises, value, process, setValue) {\n        if (this.isArray()) {\n            if (!Array.isArray(value)) {\n                throw new Error(\"invalid array value\");\n            }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n                throw new Error(\"array is wrong length\");\n            }\n            const childType = this.arrayChildren;\n            const result = value.slice();\n            result.forEach((value, index) => {\n                childType.#walkAsync(promises, value, process, (value) => {\n                    result[index] = value;\n                });\n            });\n            setValue(result);\n            return;\n        }\n        if (this.isTuple()) {\n            const components = this.components;\n            // Convert the object into an array\n            let result;\n            if (Array.isArray(value)) {\n                result = value.slice();\n            }\n            else {\n                if (value == null || typeof (value) !== \"object\") {\n                    throw new Error(\"invalid tuple value\");\n                }\n                result = components.map((param) => {\n                    if (!param.name) {\n                        throw new Error(\"cannot use object value with unnamed components\");\n                    }\n                    if (!(param.name in value)) {\n                        throw new Error(`missing value for component ${param.name}`);\n                    }\n                    return value[param.name];\n                });\n            }\n            if (result.length !== this.components.length) {\n                throw new Error(\"array is wrong length\");\n            }\n            result.forEach((value, index) => {\n                components[index].#walkAsync(promises, value, process, (value) => {\n                    result[index] = value;\n                });\n            });\n            setValue(result);\n            return;\n        }\n        const result = process(this.type, value);\n        if (result.then) {\n            promises.push((async function () { setValue(await result); })());\n        }\n        else {\n            setValue(result);\n        }\n    }\n    /**\n     *  Walks the **ParamType** with %%value%%, asynchronously calling\n     *  %%process%% on each type, destructing the %%value%% recursively.\n     *\n     *  This can be used to resolve ENS names by walking and resolving each\n     *  ``\"address\"`` type.\n     */\n    async walkAsync(value, process) {\n        const promises = [];\n        const result = [value];\n        this.#walkAsync(promises, value, process, (value) => {\n            result[0] = value;\n        });\n        if (promises.length) {\n            await Promise.all(promises);\n        }\n        return result[0];\n    }\n    /**\n     *  Creates a new **ParamType** for %%obj%%.\n     *\n     *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,\n     *  otherwise the ``indexed`` keyword will throw an error.\n     */\n    static from(obj, allowIndexed) {\n        if (ParamType.isParamType(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            try {\n                return ParamType.from(lex(obj), allowIndexed);\n            }\n            catch (error) {\n                assertArgument(false, \"invalid param type\", \"obj\", obj);\n            }\n        }\n        else if (obj instanceof TokenString) {\n            let type = \"\", baseType = \"\";\n            let comps = null;\n            if (consumeKeywords(obj, setify([\"tuple\"])).has(\"tuple\") || obj.peekType(\"OPEN_PAREN\")) {\n                // Tuple\n                baseType = \"tuple\";\n                comps = obj.popParams().map((t) => ParamType.from(t));\n                type = `tuple(${comps.map((c) => c.format()).join(\",\")})`;\n            }\n            else {\n                // Normal\n                type = verifyBasicType(obj.popType(\"TYPE\"));\n                baseType = type;\n            }\n            // Check for Array\n            let arrayChildren = null;\n            let arrayLength = null;\n            while (obj.length && obj.peekType(\"BRACKET\")) {\n                const bracket = obj.pop(); //arrays[i];\n                arrayChildren = new ParamType(_guard, \"\", type, baseType, null, comps, arrayLength, arrayChildren);\n                arrayLength = bracket.value;\n                type += bracket.text;\n                baseType = \"array\";\n                comps = null;\n            }\n            let indexed = null;\n            const keywords = consumeKeywords(obj, KwModifiers);\n            if (keywords.has(\"indexed\")) {\n                if (!allowIndexed) {\n                    throw new Error(\"\");\n                }\n                indexed = true;\n            }\n            const name = (obj.peekType(\"ID\") ? obj.pop().text : \"\");\n            if (obj.length) {\n                throw new Error(\"leftover tokens\");\n            }\n            return new ParamType(_guard, name, type, baseType, indexed, comps, arrayLength, arrayChildren);\n        }\n        const name = obj.name;\n        assertArgument(!name || (typeof (name) === \"string\" && name.match(regexId)), \"invalid name\", \"obj.name\", name);\n        let indexed = obj.indexed;\n        if (indexed != null) {\n            assertArgument(allowIndexed, \"parameter cannot be indexed\", \"obj.indexed\", obj.indexed);\n            indexed = !!indexed;\n        }\n        let type = obj.type;\n        let arrayMatch = type.match(regexArrayType);\n        if (arrayMatch) {\n            const arrayLength = parseInt(arrayMatch[2] || \"-1\");\n            const arrayChildren = ParamType.from({\n                type: arrayMatch[1],\n                components: obj.components\n            });\n            return new ParamType(_guard, name || \"\", type, \"array\", indexed, null, arrayLength, arrayChildren);\n        }\n        if (type === \"tuple\" || type.startsWith(\"tuple(\" /* fix: ) */) || type.startsWith(\"(\" /* fix: ) */)) {\n            const comps = (obj.components != null) ? obj.components.map((c) => ParamType.from(c)) : null;\n            const tuple = new ParamType(_guard, name || \"\", type, \"tuple\", indexed, comps, null, null);\n            // @TODO: use lexer to validate and normalize type\n            return tuple;\n        }\n        type = verifyBasicType(obj.type);\n        return new ParamType(_guard, name || \"\", type, type, indexed, null, null, null);\n    }\n    /**\n     *  Returns true if %%value%% is a **ParamType**.\n     */\n    static isParamType(value) {\n        return (value && value[internal] === ParamTypeInternal);\n    }\n}\n/**\n *  An abstract class to represent An individual fragment from a parse ABI.\n */\nexport class Fragment {\n    /**\n     *  The type of the fragment.\n     */\n    type;\n    /**\n     *  The inputs for the fragment.\n     */\n    inputs;\n    /**\n     *  @private\n     */\n    constructor(guard, type, inputs) {\n        assertPrivate(guard, _guard, \"Fragment\");\n        inputs = Object.freeze(inputs.slice());\n        defineProperties(this, { type, inputs });\n    }\n    /**\n     *  Creates a new **Fragment** for %%obj%%, wich can be any supported\n     *  ABI frgament type.\n     */\n    static from(obj) {\n        if (typeof (obj) === \"string\") {\n            // Try parsing JSON...\n            try {\n                Fragment.from(JSON.parse(obj));\n            }\n            catch (e) { }\n            // ...otherwise, use the human-readable lexer\n            return Fragment.from(lex(obj));\n        }\n        if (obj instanceof TokenString) {\n            // Human-readable ABI (already lexed)\n            const type = obj.peekKeyword(KwTypes);\n            switch (type) {\n                case \"constructor\": return ConstructorFragment.from(obj);\n                case \"error\": return ErrorFragment.from(obj);\n                case \"event\": return EventFragment.from(obj);\n                case \"fallback\":\n                case \"receive\":\n                    return FallbackFragment.from(obj);\n                case \"function\": return FunctionFragment.from(obj);\n                case \"struct\": return StructFragment.from(obj);\n            }\n        }\n        else if (typeof (obj) === \"object\") {\n            // JSON ABI\n            switch (obj.type) {\n                case \"constructor\": return ConstructorFragment.from(obj);\n                case \"error\": return ErrorFragment.from(obj);\n                case \"event\": return EventFragment.from(obj);\n                case \"fallback\":\n                case \"receive\":\n                    return FallbackFragment.from(obj);\n                case \"function\": return FunctionFragment.from(obj);\n                case \"struct\": return StructFragment.from(obj);\n            }\n            assert(false, `unsupported type: ${obj.type}`, \"UNSUPPORTED_OPERATION\", {\n                operation: \"Fragment.from\"\n            });\n        }\n        assertArgument(false, \"unsupported frgament object\", \"obj\", obj);\n    }\n    /**\n     *  Returns true if %%value%% is a [[ConstructorFragment]].\n     */\n    static isConstructor(value) {\n        return ConstructorFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is an [[ErrorFragment]].\n     */\n    static isError(value) {\n        return ErrorFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is an [[EventFragment]].\n     */\n    static isEvent(value) {\n        return EventFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is a [[FunctionFragment]].\n     */\n    static isFunction(value) {\n        return FunctionFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is a [[StructFragment]].\n     */\n    static isStruct(value) {\n        return StructFragment.isFragment(value);\n    }\n}\n/**\n *  An abstract class to represent An individual fragment\n *  which has a name from a parse ABI.\n */\nexport class NamedFragment extends Fragment {\n    /**\n     *  The name of the fragment.\n     */\n    name;\n    /**\n     *  @private\n     */\n    constructor(guard, type, name, inputs) {\n        super(guard, type, inputs);\n        assertArgument(typeof (name) === \"string\" && name.match(regexId), \"invalid identifier\", \"name\", name);\n        inputs = Object.freeze(inputs.slice());\n        defineProperties(this, { name });\n    }\n}\nfunction joinParams(format, params) {\n    return \"(\" + params.map((p) => p.format(format)).join((format === \"full\") ? \", \" : \",\") + \")\";\n}\n/**\n *  A Fragment which represents a //Custom Error//.\n */\nexport class ErrorFragment extends NamedFragment {\n    /**\n     *  @private\n     */\n    constructor(guard, name, inputs) {\n        super(guard, \"error\", name, inputs);\n        Object.defineProperty(this, internal, { value: ErrorFragmentInternal });\n    }\n    /**\n     *  The Custom Error selector.\n     */\n    get selector() {\n        return id(this.format(\"sighash\")).substring(0, 10);\n    }\n    /**\n     *  Returns a string representation of this fragment as %%format%%.\n     */\n    format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n        const result = [];\n        if (format !== \"sighash\") {\n            result.push(\"error\");\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        return result.join(\" \");\n    }\n    /**\n     *  Returns a new **ErrorFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (ErrorFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            return ErrorFragment.from(lex(obj));\n        }\n        else if (obj instanceof TokenString) {\n            const name = consumeName(\"error\", obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n            return new ErrorFragment(_guard, name, inputs);\n        }\n        return new ErrorFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is an\n     *  **ErrorFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === ErrorFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents an Event.\n */\nexport class EventFragment extends NamedFragment {\n    /**\n     *  Whether this event is anonymous.\n     */\n    anonymous;\n    /**\n     *  @private\n     */\n    constructor(guard, name, inputs, anonymous) {\n        super(guard, \"event\", name, inputs);\n        Object.defineProperty(this, internal, { value: EventFragmentInternal });\n        defineProperties(this, { anonymous });\n    }\n    /**\n     *  The Event topic hash.\n     */\n    get topicHash() {\n        return id(this.format(\"sighash\"));\n    }\n    /**\n     *  Returns a string representation of this event as %%format%%.\n     */\n    format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format)))\n            });\n        }\n        const result = [];\n        if (format !== \"sighash\") {\n            result.push(\"event\");\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        if (format !== \"sighash\" && this.anonymous) {\n            result.push(\"anonymous\");\n        }\n        return result.join(\" \");\n    }\n    /**\n     *  Return the topic hash for an event with %%name%% and %%params%%.\n     */\n    static getTopicHash(name, params) {\n        params = (params || []).map((p) => ParamType.from(p));\n        const fragment = new EventFragment(_guard, name, params, false);\n        return fragment.topicHash;\n    }\n    /**\n     *  Returns a new **EventFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (EventFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            try {\n                return EventFragment.from(lex(obj));\n            }\n            catch (error) {\n                assertArgument(false, \"invalid event fragment\", \"obj\", obj);\n            }\n        }\n        else if (obj instanceof TokenString) {\n            const name = consumeName(\"event\", obj);\n            const inputs = consumeParams(obj, true);\n            const anonymous = !!consumeKeywords(obj, setify([\"anonymous\"])).has(\"anonymous\");\n            consumeEoi(obj);\n            return new EventFragment(_guard, name, inputs, anonymous);\n        }\n        return new EventFragment(_guard, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType.from(p, true)) : [], !!obj.anonymous);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is an\n     *  **EventFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === EventFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents a constructor.\n */\nexport class ConstructorFragment extends Fragment {\n    /**\n     *  Whether the constructor can receive an endowment.\n     */\n    payable;\n    /**\n     *  The recommended gas limit for deployment or ``null``.\n     */\n    gas;\n    /**\n     *  @private\n     */\n    constructor(guard, type, inputs, payable, gas) {\n        super(guard, type, inputs);\n        Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });\n        defineProperties(this, { payable, gas });\n    }\n    /**\n     *  Returns a string representation of this constructor as %%format%%.\n     */\n    format(format) {\n        assert(format != null && format !== \"sighash\", \"cannot format a constructor for sighash\", \"UNSUPPORTED_OPERATION\", { operation: \"format(sighash)\" });\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: (this.payable ? \"payable\" : \"undefined\"),\n                payable: this.payable,\n                gas: ((this.gas != null) ? this.gas : undefined),\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format)))\n            });\n        }\n        const result = [`constructor${joinParams(format, this.inputs)}`];\n        if (this.payable) {\n            result.push(\"payable\");\n        }\n        if (this.gas != null) {\n            result.push(`@${this.gas.toString()}`);\n        }\n        return result.join(\" \");\n    }\n    /**\n     *  Returns a new **ConstructorFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (ConstructorFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            try {\n                return ConstructorFragment.from(lex(obj));\n            }\n            catch (error) {\n                assertArgument(false, \"invalid constuctor fragment\", \"obj\", obj);\n            }\n        }\n        else if (obj instanceof TokenString) {\n            consumeKeywords(obj, setify([\"constructor\"]));\n            const inputs = consumeParams(obj);\n            const payable = !!consumeKeywords(obj, KwVisibDeploy).has(\"payable\");\n            const gas = consumeGas(obj);\n            consumeEoi(obj);\n            return new ConstructorFragment(_guard, \"constructor\", inputs, payable, gas);\n        }\n        return new ConstructorFragment(_guard, \"constructor\", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, (obj.gas != null) ? obj.gas : null);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **ConstructorFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === ConstructorFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents a method.\n */\nexport class FallbackFragment extends Fragment {\n    /**\n     *  If the function can be sent value during invocation.\n     */\n    payable;\n    constructor(guard, inputs, payable) {\n        super(guard, \"fallback\", inputs);\n        Object.defineProperty(this, internal, { value: FallbackFragmentInternal });\n        defineProperties(this, { payable });\n    }\n    /**\n     *  Returns a string representation of this fallback as %%format%%.\n     */\n    format(format) {\n        const type = ((this.inputs.length === 0) ? \"receive\" : \"fallback\");\n        if (format === \"json\") {\n            const stateMutability = (this.payable ? \"payable\" : \"nonpayable\");\n            return JSON.stringify({ type, stateMutability });\n        }\n        return `${type}()${this.payable ? \" payable\" : \"\"}`;\n    }\n    /**\n     *  Returns a new **FallbackFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (FallbackFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            try {\n                return FallbackFragment.from(lex(obj));\n            }\n            catch (error) {\n                assertArgument(false, \"invalid fallback fragment\", \"obj\", obj);\n            }\n        }\n        else if (obj instanceof TokenString) {\n            const errorObj = obj.toString();\n            const topIsValid = obj.peekKeyword(setify([\"fallback\", \"receive\"]));\n            assertArgument(topIsValid, \"type must be fallback or receive\", \"obj\", errorObj);\n            const type = obj.popKeyword(setify([\"fallback\", \"receive\"]));\n            // receive()\n            if (type === \"receive\") {\n                const inputs = consumeParams(obj);\n                assertArgument(inputs.length === 0, `receive cannot have arguments`, \"obj.inputs\", inputs);\n                consumeKeywords(obj, setify([\"payable\"]));\n                consumeEoi(obj);\n                return new FallbackFragment(_guard, [], true);\n            }\n            // fallback() [payable]\n            // fallback(bytes) [payable] returns (bytes)\n            let inputs = consumeParams(obj);\n            if (inputs.length) {\n                assertArgument(inputs.length === 1 && inputs[0].type === \"bytes\", \"invalid fallback inputs\", \"obj.inputs\", inputs.map((i) => i.format(\"minimal\")).join(\", \"));\n            }\n            else {\n                inputs = [ParamType.from(\"bytes\")];\n            }\n            const mutability = consumeMutability(obj);\n            assertArgument(mutability === \"nonpayable\" || mutability === \"payable\", \"fallback cannot be constants\", \"obj.stateMutability\", mutability);\n            if (consumeKeywords(obj, setify([\"returns\"])).has(\"returns\")) {\n                const outputs = consumeParams(obj);\n                assertArgument(outputs.length === 1 && outputs[0].type === \"bytes\", \"invalid fallback outputs\", \"obj.outputs\", outputs.map((i) => i.format(\"minimal\")).join(\", \"));\n            }\n            consumeEoi(obj);\n            return new FallbackFragment(_guard, inputs, mutability === \"payable\");\n        }\n        if (obj.type === \"receive\") {\n            return new FallbackFragment(_guard, [], true);\n        }\n        if (obj.type === \"fallback\") {\n            const inputs = [ParamType.from(\"bytes\")];\n            const payable = (obj.stateMutability === \"payable\");\n            return new FallbackFragment(_guard, inputs, payable);\n        }\n        assertArgument(false, \"invalid fallback description\", \"obj\", obj);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **FallbackFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === FallbackFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents a method.\n */\nexport class FunctionFragment extends NamedFragment {\n    /**\n     *  If the function is constant (e.g. ``pure`` or ``view`` functions).\n     */\n    constant;\n    /**\n     *  The returned types for the result of calling this function.\n     */\n    outputs;\n    /**\n     *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``\n     *  or ``pure``)\n     */\n    stateMutability;\n    /**\n     *  If the function can be sent value during invocation.\n     */\n    payable;\n    /**\n     *  The recommended gas limit to send when calling this function.\n     */\n    gas;\n    /**\n     *  @private\n     */\n    constructor(guard, name, stateMutability, inputs, outputs, gas) {\n        super(guard, \"function\", name, inputs);\n        Object.defineProperty(this, internal, { value: FunctionFragmentInternal });\n        outputs = Object.freeze(outputs.slice());\n        const constant = (stateMutability === \"view\" || stateMutability === \"pure\");\n        const payable = (stateMutability === \"payable\");\n        defineProperties(this, { constant, gas, outputs, payable, stateMutability });\n    }\n    /**\n     *  The Function selector.\n     */\n    get selector() {\n        return id(this.format(\"sighash\")).substring(0, 10);\n    }\n    /**\n     *  Returns a string representation of this function as %%format%%.\n     */\n    format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: ((this.gas != null) ? this.gas : undefined),\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format))),\n                outputs: this.outputs.map((o) => JSON.parse(o.format(format))),\n            });\n        }\n        const result = [];\n        if (format !== \"sighash\") {\n            result.push(\"function\");\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        if (format !== \"sighash\") {\n            if (this.stateMutability !== \"nonpayable\") {\n                result.push(this.stateMutability);\n            }\n            if (this.outputs && this.outputs.length) {\n                result.push(\"returns\");\n                result.push(joinParams(format, this.outputs));\n            }\n            if (this.gas != null) {\n                result.push(`@${this.gas.toString()}`);\n            }\n        }\n        return result.join(\" \");\n    }\n    /**\n     *  Return the selector for a function with %%name%% and %%params%%.\n     */\n    static getSelector(name, params) {\n        params = (params || []).map((p) => ParamType.from(p));\n        const fragment = new FunctionFragment(_guard, name, \"view\", params, [], null);\n        return fragment.selector;\n    }\n    /**\n     *  Returns a new **FunctionFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (FunctionFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            try {\n                return FunctionFragment.from(lex(obj));\n            }\n            catch (error) {\n                assertArgument(false, \"invalid function fragment\", \"obj\", obj);\n            }\n        }\n        else if (obj instanceof TokenString) {\n            const name = consumeName(\"function\", obj);\n            const inputs = consumeParams(obj);\n            const mutability = consumeMutability(obj);\n            let outputs = [];\n            if (consumeKeywords(obj, setify([\"returns\"])).has(\"returns\")) {\n                outputs = consumeParams(obj);\n            }\n            const gas = consumeGas(obj);\n            consumeEoi(obj);\n            return new FunctionFragment(_guard, name, mutability, inputs, outputs, gas);\n        }\n        let stateMutability = obj.stateMutability;\n        // Use legacy Solidity ABI logic if stateMutability is missing\n        if (stateMutability == null) {\n            stateMutability = \"payable\";\n            if (typeof (obj.constant) === \"boolean\") {\n                stateMutability = \"view\";\n                if (!obj.constant) {\n                    stateMutability = \"payable\";\n                    if (typeof (obj.payable) === \"boolean\" && !obj.payable) {\n                        stateMutability = \"nonpayable\";\n                    }\n                }\n            }\n            else if (typeof (obj.payable) === \"boolean\" && !obj.payable) {\n                stateMutability = \"nonpayable\";\n            }\n        }\n        // @TODO: verifyState for stateMutability (e.g. throw if\n        //        payable: false but stateMutability is \"nonpayable\")\n        return new FunctionFragment(_guard, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], (obj.gas != null) ? obj.gas : null);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **FunctionFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === FunctionFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents a structure.\n */\nexport class StructFragment extends NamedFragment {\n    /**\n     *  @private\n     */\n    constructor(guard, name, inputs) {\n        super(guard, \"struct\", name, inputs);\n        Object.defineProperty(this, internal, { value: StructFragmentInternal });\n    }\n    /**\n     *  Returns a string representation of this struct as %%format%%.\n     */\n    format() {\n        throw new Error(\"@TODO\");\n    }\n    /**\n     *  Returns a new **StructFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (typeof (obj) === \"string\") {\n            try {\n                return StructFragment.from(lex(obj));\n            }\n            catch (error) {\n                assertArgument(false, \"invalid struct fragment\", \"obj\", obj);\n            }\n        }\n        else if (obj instanceof TokenString) {\n            const name = consumeName(\"struct\", obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n            return new StructFragment(_guard, name, inputs);\n        }\n        return new StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n    }\n    // @TODO: fix this return type\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **StructFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === StructFragmentInternal);\n    }\n}\n//# sourceMappingURL=fragments.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}