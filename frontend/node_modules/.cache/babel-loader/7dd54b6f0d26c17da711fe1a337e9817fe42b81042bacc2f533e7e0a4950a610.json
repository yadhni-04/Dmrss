{"ast":null,"code":"import { keccak256 } from \"../crypto/index.js\";\nimport { concat, hexlify, assertArgument, toUtf8Bytes } from \"../utils/index.js\";\nimport { ens_normalize } from \"@adraffy/ens-normalize\";\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\nfunction checkComponent(comp) {\n  assertArgument(comp.length !== 0, \"invalid ENS name; empty component\", \"comp\", comp);\n  return comp;\n}\nfunction ensNameSplit(name) {\n  const bytes = toUtf8Bytes(ensNormalize(name));\n  const comps = [];\n  if (name.length === 0) {\n    return comps;\n  }\n  let last = 0;\n  for (let i = 0; i < bytes.length; i++) {\n    const d = bytes[i];\n    // A separator (i.e. \".\"); copy this component\n    if (d === 0x2e) {\n      comps.push(checkComponent(bytes.slice(last, i)));\n      last = i + 1;\n    }\n  }\n  // There was a stray separator at the end of the name\n  assertArgument(last < bytes.length, \"invalid ENS name; empty component\", \"name\", name);\n  comps.push(checkComponent(bytes.slice(last)));\n  return comps;\n}\n/**\n *  Returns the ENS %%name%% normalized.\n */\nexport function ensNormalize(name) {\n  try {\n    if (name.length === 0) {\n      throw new Error(\"empty label\");\n    }\n    return ens_normalize(name);\n  } catch (error) {\n    assertArgument(false, `invalid ENS name (${error.message})`, \"name\", name);\n  }\n}\n/**\n *  Returns ``true`` if %%name%% is a valid ENS name.\n */\nexport function isValidName(name) {\n  try {\n    return ensNameSplit(name).length !== 0;\n  } catch (error) {}\n  return false;\n}\n/**\n *  Returns the [[link-namehash]] for %%name%%.\n */\nexport function namehash(name) {\n  assertArgument(typeof name === \"string\", \"invalid ENS name; not a string\", \"name\", name);\n  assertArgument(name.length, `invalid ENS name (empty label)`, \"name\", name);\n  let result = Zeros;\n  const comps = ensNameSplit(name);\n  while (comps.length) {\n    result = keccak256(concat([result, keccak256(comps.pop())]));\n  }\n  return hexlify(result);\n}\n/**\n *  Returns the DNS encoded %%name%%.\n *\n *  This is used for various parts of ENS name resolution, such\n *  as the wildcard resolution.\n */\nexport function dnsEncode(name, _maxLength) {\n  const length = _maxLength != null ? _maxLength : 63;\n  assertArgument(length <= 255, \"DNS encoded label cannot exceed 255\", \"length\", length);\n  return hexlify(concat(ensNameSplit(name).map(comp => {\n    assertArgument(comp.length <= length, `label ${JSON.stringify(name)} exceeds ${length} bytes`, \"name\", name);\n    const bytes = new Uint8Array(comp.length + 1);\n    bytes.set(comp, 1);\n    bytes[0] = bytes.length - 1;\n    return bytes;\n  }))) + \"00\";\n}","map":{"version":3,"names":["keccak256","concat","hexlify","assertArgument","toUtf8Bytes","ens_normalize","Zeros","Uint8Array","fill","checkComponent","comp","length","ensNameSplit","name","bytes","ensNormalize","comps","last","i","d","push","slice","Error","error","message","isValidName","namehash","result","pop","dnsEncode","_maxLength","map","JSON","stringify","set"],"sources":["/Users/yadhnikharkar/Desktop/dmrs-mvp/frontend/node_modules/ethers/lib.esm/hash/namehash.js"],"sourcesContent":["import { keccak256 } from \"../crypto/index.js\";\nimport { concat, hexlify, assertArgument, toUtf8Bytes } from \"../utils/index.js\";\nimport { ens_normalize } from \"@adraffy/ens-normalize\";\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\nfunction checkComponent(comp) {\n    assertArgument(comp.length !== 0, \"invalid ENS name; empty component\", \"comp\", comp);\n    return comp;\n}\nfunction ensNameSplit(name) {\n    const bytes = toUtf8Bytes(ensNormalize(name));\n    const comps = [];\n    if (name.length === 0) {\n        return comps;\n    }\n    let last = 0;\n    for (let i = 0; i < bytes.length; i++) {\n        const d = bytes[i];\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n    // There was a stray separator at the end of the name\n    assertArgument(last < bytes.length, \"invalid ENS name; empty component\", \"name\", name);\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\n/**\n *  Returns the ENS %%name%% normalized.\n */\nexport function ensNormalize(name) {\n    try {\n        if (name.length === 0) {\n            throw new Error(\"empty label\");\n        }\n        return ens_normalize(name);\n    }\n    catch (error) {\n        assertArgument(false, `invalid ENS name (${error.message})`, \"name\", name);\n    }\n}\n/**\n *  Returns ``true`` if %%name%% is a valid ENS name.\n */\nexport function isValidName(name) {\n    try {\n        return (ensNameSplit(name).length !== 0);\n    }\n    catch (error) { }\n    return false;\n}\n/**\n *  Returns the [[link-namehash]] for %%name%%.\n */\nexport function namehash(name) {\n    assertArgument(typeof (name) === \"string\", \"invalid ENS name; not a string\", \"name\", name);\n    assertArgument(name.length, `invalid ENS name (empty label)`, \"name\", name);\n    let result = Zeros;\n    const comps = ensNameSplit(name);\n    while (comps.length) {\n        result = keccak256(concat([result, keccak256((comps.pop()))]));\n    }\n    return hexlify(result);\n}\n/**\n *  Returns the DNS encoded %%name%%.\n *\n *  This is used for various parts of ENS name resolution, such\n *  as the wildcard resolution.\n */\nexport function dnsEncode(name, _maxLength) {\n    const length = (_maxLength != null) ? _maxLength : 63;\n    assertArgument(length <= 255, \"DNS encoded label cannot exceed 255\", \"length\", length);\n    return hexlify(concat(ensNameSplit(name).map((comp) => {\n        assertArgument(comp.length <= length, `label ${JSON.stringify(name)} exceeds ${length} bytes`, \"name\", name);\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n    }))) + \"00\";\n}\n//# sourceMappingURL=namehash.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}