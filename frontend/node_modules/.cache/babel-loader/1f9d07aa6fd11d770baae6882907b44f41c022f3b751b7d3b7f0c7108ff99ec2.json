{"ast":null,"code":"import { SigningKey } from \"../crypto/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\nimport { BaseWallet } from \"./base-wallet.js\";\nimport { HDNodeWallet } from \"./hdwallet.js\";\nimport { decryptCrowdsaleJson, isCrowdsaleJson } from \"./json-crowdsale.js\";\nimport { decryptKeystoreJson, decryptKeystoreJsonSync, encryptKeystoreJson, encryptKeystoreJsonSync, isKeystoreJson } from \"./json-keystore.js\";\nimport { Mnemonic } from \"./mnemonic.js\";\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve();\n    }, duration);\n  });\n}\n/**\n *  A **Wallet** manages a single private key which is used to sign\n *  transactions, messages and other common payloads.\n *\n *  This class is generally the main entry point for developers\n *  that wish to use a private key directly, as it can create\n *  instances from a large variety of common sources, including\n *  raw private key, [[link-bip-39]] mnemonics and encrypte JSON\n *  wallets.\n */\nexport class Wallet extends BaseWallet {\n  /**\n   *  Create a new wallet for the private %%key%%, optionally connected\n   *  to %%provider%%.\n   */\n  constructor(key, provider) {\n    if (typeof key === \"string\" && !key.startsWith(\"0x\")) {\n      key = \"0x\" + key;\n    }\n    let signingKey = typeof key === \"string\" ? new SigningKey(key) : key;\n    super(signingKey, provider);\n  }\n  connect(provider) {\n    return new Wallet(this.signingKey, provider);\n  }\n  /**\n   *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n   *  %%password%%.\n   *\n   *  If %%progressCallback%% is specified, it will receive periodic\n   *  updates as the encryption process progreses.\n   */\n  async encrypt(password, progressCallback) {\n    const account = {\n      address: this.address,\n      privateKey: this.privateKey\n    };\n    return await encryptKeystoreJson(account, password, {\n      progressCallback\n    });\n  }\n  /**\n   *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n   *  %%password%%.\n   *\n   *  It is preferred to use the [async version](encrypt) instead,\n   *  which allows a [[ProgressCallback]] to keep the user informed.\n   *\n   *  This method will block the event loop (freezing all UI) until\n   *  it is complete, which may be a non-trivial duration.\n   */\n  encryptSync(password) {\n    const account = {\n      address: this.address,\n      privateKey: this.privateKey\n    };\n    return encryptKeystoreJsonSync(account, password);\n  }\n  static #fromAccount(account) {\n    assertArgument(account, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n    if (\"mnemonic\" in account && account.mnemonic && account.mnemonic.locale === \"en\") {\n      const mnemonic = Mnemonic.fromEntropy(account.mnemonic.entropy);\n      const wallet = HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);\n      if (wallet.address === account.address && wallet.privateKey === account.privateKey) {\n        return wallet;\n      }\n      console.log(\"WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key\");\n    }\n    const wallet = new Wallet(account.privateKey);\n    assertArgument(wallet.address === account.address, \"address/privateKey mismatch\", \"json\", \"[ REDACTED ]\");\n    return wallet;\n  }\n  /**\n   *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%\n   *  with %%password%%.\n   *\n   *  If %%progress%% is provided, it is called periodically during\n   *  decryption so that any UI can be updated.\n   */\n  static async fromEncryptedJson(json, password, progress) {\n    let account = null;\n    if (isKeystoreJson(json)) {\n      account = await decryptKeystoreJson(json, password, progress);\n    } else if (isCrowdsaleJson(json)) {\n      if (progress) {\n        progress(0);\n        await stall(0);\n      }\n      account = decryptCrowdsaleJson(json, password);\n      if (progress) {\n        progress(1);\n        await stall(0);\n      }\n    }\n    return Wallet.#fromAccount(account);\n  }\n  /**\n   *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.\n   *\n   *  The [[fromEncryptedJson]] method is preferred, as this method\n   *  will lock up and freeze the UI during decryption, which may take\n   *  some time.\n   */\n  static fromEncryptedJsonSync(json, password) {\n    let account = null;\n    if (isKeystoreJson(json)) {\n      account = decryptKeystoreJsonSync(json, password);\n    } else if (isCrowdsaleJson(json)) {\n      account = decryptCrowdsaleJson(json, password);\n    } else {\n      assertArgument(false, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n    }\n    return Wallet.#fromAccount(account);\n  }\n  /**\n   *  Creates a new random [[HDNodeWallet]] using the available\n   *  [cryptographic random source](randomBytes).\n   *\n   *  If there is no crytographic random source, this will throw.\n   */\n  static createRandom(provider) {\n    const wallet = HDNodeWallet.createRandom();\n    if (provider) {\n      return wallet.connect(provider);\n    }\n    return wallet;\n  }\n  /**\n   *  Creates a [[HDNodeWallet]] for %%phrase%%.\n   */\n  static fromPhrase(phrase, provider) {\n    const wallet = HDNodeWallet.fromPhrase(phrase);\n    if (provider) {\n      return wallet.connect(provider);\n    }\n    return wallet;\n  }\n}","map":{"version":3,"names":["SigningKey","assertArgument","BaseWallet","HDNodeWallet","decryptCrowdsaleJson","isCrowdsaleJson","decryptKeystoreJson","decryptKeystoreJsonSync","encryptKeystoreJson","encryptKeystoreJsonSync","isKeystoreJson","Mnemonic","stall","duration","Promise","resolve","setTimeout","Wallet","constructor","key","provider","startsWith","signingKey","connect","encrypt","password","progressCallback","account","address","privateKey","encryptSync","fromAccount","#fromAccount","mnemonic","locale","fromEntropy","entropy","wallet","fromMnemonic","path","console","log","fromEncryptedJson","json","progress","fromEncryptedJsonSync","createRandom","fromPhrase","phrase"],"sources":["/Users/yadhnikharkar/Desktop/dmrs-mvp/frontend/node_modules/ethers/lib.esm/wallet/wallet.js"],"sourcesContent":["import { SigningKey } from \"../crypto/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\nimport { BaseWallet } from \"./base-wallet.js\";\nimport { HDNodeWallet } from \"./hdwallet.js\";\nimport { decryptCrowdsaleJson, isCrowdsaleJson } from \"./json-crowdsale.js\";\nimport { decryptKeystoreJson, decryptKeystoreJsonSync, encryptKeystoreJson, encryptKeystoreJsonSync, isKeystoreJson } from \"./json-keystore.js\";\nimport { Mnemonic } from \"./mnemonic.js\";\nfunction stall(duration) {\n    return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });\n}\n/**\n *  A **Wallet** manages a single private key which is used to sign\n *  transactions, messages and other common payloads.\n *\n *  This class is generally the main entry point for developers\n *  that wish to use a private key directly, as it can create\n *  instances from a large variety of common sources, including\n *  raw private key, [[link-bip-39]] mnemonics and encrypte JSON\n *  wallets.\n */\nexport class Wallet extends BaseWallet {\n    /**\n     *  Create a new wallet for the private %%key%%, optionally connected\n     *  to %%provider%%.\n     */\n    constructor(key, provider) {\n        if (typeof (key) === \"string\" && !key.startsWith(\"0x\")) {\n            key = \"0x\" + key;\n        }\n        let signingKey = (typeof (key) === \"string\") ? new SigningKey(key) : key;\n        super(signingKey, provider);\n    }\n    connect(provider) {\n        return new Wallet(this.signingKey, provider);\n    }\n    /**\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n     *  %%password%%.\n     *\n     *  If %%progressCallback%% is specified, it will receive periodic\n     *  updates as the encryption process progreses.\n     */\n    async encrypt(password, progressCallback) {\n        const account = { address: this.address, privateKey: this.privateKey };\n        return await encryptKeystoreJson(account, password, { progressCallback });\n    }\n    /**\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n     *  %%password%%.\n     *\n     *  It is preferred to use the [async version](encrypt) instead,\n     *  which allows a [[ProgressCallback]] to keep the user informed.\n     *\n     *  This method will block the event loop (freezing all UI) until\n     *  it is complete, which may be a non-trivial duration.\n     */\n    encryptSync(password) {\n        const account = { address: this.address, privateKey: this.privateKey };\n        return encryptKeystoreJsonSync(account, password);\n    }\n    static #fromAccount(account) {\n        assertArgument(account, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n        if (\"mnemonic\" in account && account.mnemonic && account.mnemonic.locale === \"en\") {\n            const mnemonic = Mnemonic.fromEntropy(account.mnemonic.entropy);\n            const wallet = HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);\n            if (wallet.address === account.address && wallet.privateKey === account.privateKey) {\n                return wallet;\n            }\n            console.log(\"WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key\");\n        }\n        const wallet = new Wallet(account.privateKey);\n        assertArgument(wallet.address === account.address, \"address/privateKey mismatch\", \"json\", \"[ REDACTED ]\");\n        return wallet;\n    }\n    /**\n     *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%\n     *  with %%password%%.\n     *\n     *  If %%progress%% is provided, it is called periodically during\n     *  decryption so that any UI can be updated.\n     */\n    static async fromEncryptedJson(json, password, progress) {\n        let account = null;\n        if (isKeystoreJson(json)) {\n            account = await decryptKeystoreJson(json, password, progress);\n        }\n        else if (isCrowdsaleJson(json)) {\n            if (progress) {\n                progress(0);\n                await stall(0);\n            }\n            account = decryptCrowdsaleJson(json, password);\n            if (progress) {\n                progress(1);\n                await stall(0);\n            }\n        }\n        return Wallet.#fromAccount(account);\n    }\n    /**\n     *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.\n     *\n     *  The [[fromEncryptedJson]] method is preferred, as this method\n     *  will lock up and freeze the UI during decryption, which may take\n     *  some time.\n     */\n    static fromEncryptedJsonSync(json, password) {\n        let account = null;\n        if (isKeystoreJson(json)) {\n            account = decryptKeystoreJsonSync(json, password);\n        }\n        else if (isCrowdsaleJson(json)) {\n            account = decryptCrowdsaleJson(json, password);\n        }\n        else {\n            assertArgument(false, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n        }\n        return Wallet.#fromAccount(account);\n    }\n    /**\n     *  Creates a new random [[HDNodeWallet]] using the available\n     *  [cryptographic random source](randomBytes).\n     *\n     *  If there is no crytographic random source, this will throw.\n     */\n    static createRandom(provider) {\n        const wallet = HDNodeWallet.createRandom();\n        if (provider) {\n            return wallet.connect(provider);\n        }\n        return wallet;\n    }\n    /**\n     *  Creates a [[HDNodeWallet]] for %%phrase%%.\n     */\n    static fromPhrase(phrase, provider) {\n        const wallet = HDNodeWallet.fromPhrase(phrase);\n        if (provider) {\n            return wallet.connect(provider);\n        }\n        return wallet;\n    }\n}\n//# sourceMappingURL=wallet.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}