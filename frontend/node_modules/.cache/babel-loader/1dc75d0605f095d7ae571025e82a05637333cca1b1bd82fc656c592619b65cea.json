{"ast":null,"code":"/**\n *  [[link-chainstack]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Arbitrum (``arbitrum``)\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - Polygon (``matic``)\n *\n *  @_subsection: api/providers/thirdparty:Chainstack  [providers-chainstack]\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nfunction getApiKey(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"39f1d67cedf8b7831010a665328c9197\";\n    case \"arbitrum\":\n      return \"0550c209db33c3abf4cc927e1e18cea1\";\n    case \"bnb\":\n      return \"98b5a77e531614387366f6fc5da097f8\";\n    case \"matic\":\n      return \"cd9d4d70377471aa7c142ec4a4205249\";\n  }\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"ethereum-mainnet.core.chainstack.com\";\n    case \"arbitrum\":\n      return \"arbitrum-mainnet.core.chainstack.com\";\n    case \"bnb\":\n      return \"bsc-mainnet.core.chainstack.com\";\n    case \"matic\":\n      return \"polygon-mainnet.core.chainstack.com\";\n  }\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **ChainstackProvider** connects to the [[link-chainstack]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-chainstack).\n */\nexport class ChainstackProvider extends JsonRpcProvider {\n  /**\n   *  The API key for the Chainstack connection.\n   */\n  apiKey;\n  /**\n   *  Creates a new **ChainstackProvider**.\n   */\n  constructor(_network, apiKey) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = Network.from(_network);\n    if (apiKey == null) {\n      apiKey = getApiKey(network.name);\n    }\n    const request = ChainstackProvider.getRequest(network, apiKey);\n    super(request, network, {\n      staticNetwork: network\n    });\n    defineProperties(this, {\n      apiKey\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new ChainstackProvider(chainId, this.apiKey);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  isCommunityResource() {\n    return this.apiKey === getApiKey(this._network.name);\n  }\n  /**\n   *  Returns a prepared request for connecting to %%network%%\n   *  with %%apiKey%% and %%projectSecret%%.\n   */\n  static getRequest(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = getApiKey(network.name);\n    }\n    const request = new FetchRequest(`https:/\\/${getHost(network.name)}/${apiKey}`);\n    request.allowGzip = true;\n    if (apiKey === getApiKey(network.name)) {\n      request.retryFunc = async (request, response, attempt) => {\n        showThrottleMessage(\"ChainstackProvider\");\n        return true;\n      };\n    }\n    return request;\n  }\n}","map":{"version":3,"names":["defineProperties","FetchRequest","assertArgument","showThrottleMessage","Network","JsonRpcProvider","getApiKey","name","getHost","ChainstackProvider","apiKey","constructor","_network","network","from","request","getRequest","staticNetwork","_getProvider","chainId","error","isCommunityResource","allowGzip","retryFunc","response","attempt"],"sources":["/Users/yadhnikharkar/Desktop/dmrs-mvp/frontend/node_modules/ethers/lib.esm/providers/provider-chainstack.js"],"sourcesContent":["/**\n *  [[link-chainstack]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Arbitrum (``arbitrum``)\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - Polygon (``matic``)\n *\n *  @_subsection: api/providers/thirdparty:Chainstack  [providers-chainstack]\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nfunction getApiKey(name) {\n    switch (name) {\n        case \"mainnet\": return \"39f1d67cedf8b7831010a665328c9197\";\n        case \"arbitrum\": return \"0550c209db33c3abf4cc927e1e18cea1\";\n        case \"bnb\": return \"98b5a77e531614387366f6fc5da097f8\";\n        case \"matic\": return \"cd9d4d70377471aa7c142ec4a4205249\";\n    }\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\nfunction getHost(name) {\n    switch (name) {\n        case \"mainnet\":\n            return \"ethereum-mainnet.core.chainstack.com\";\n        case \"arbitrum\":\n            return \"arbitrum-mainnet.core.chainstack.com\";\n        case \"bnb\":\n            return \"bsc-mainnet.core.chainstack.com\";\n        case \"matic\":\n            return \"polygon-mainnet.core.chainstack.com\";\n    }\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **ChainstackProvider** connects to the [[link-chainstack]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-chainstack).\n */\nexport class ChainstackProvider extends JsonRpcProvider {\n    /**\n     *  The API key for the Chainstack connection.\n     */\n    apiKey;\n    /**\n     *  Creates a new **ChainstackProvider**.\n     */\n    constructor(_network, apiKey) {\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = Network.from(_network);\n        if (apiKey == null) {\n            apiKey = getApiKey(network.name);\n        }\n        const request = ChainstackProvider.getRequest(network, apiKey);\n        super(request, network, { staticNetwork: network });\n        defineProperties(this, { apiKey });\n    }\n    _getProvider(chainId) {\n        try {\n            return new ChainstackProvider(chainId, this.apiKey);\n        }\n        catch (error) { }\n        return super._getProvider(chainId);\n    }\n    isCommunityResource() {\n        return (this.apiKey === getApiKey(this._network.name));\n    }\n    /**\n     *  Returns a prepared request for connecting to %%network%%\n     *  with %%apiKey%% and %%projectSecret%%.\n     */\n    static getRequest(network, apiKey) {\n        if (apiKey == null) {\n            apiKey = getApiKey(network.name);\n        }\n        const request = new FetchRequest(`https:/\\/${getHost(network.name)}/${apiKey}`);\n        request.allowGzip = true;\n        if (apiKey === getApiKey(network.name)) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"ChainstackProvider\");\n                return true;\n            };\n        }\n        return request;\n    }\n}\n//# sourceMappingURL=provider-chainstack.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}